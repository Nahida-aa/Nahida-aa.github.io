[
  {
    "title": "max",
    "description": "例题 $f(x)_{min}=2\\sin x + \\s...",
    "url": "/blog/2018/11/10/max.mdx",
    "slug": "2018/11/10/max.mdx",
    "segments": [
      "2018",
      "11",
      "10",
      "max.mdx"
    ],
    "filePath": "2018/11/10/max.mdx",
    "meta": {
      "title": "max",
      "description": "例题 $f(x)_{min}=2\\sin x + \\s...",
      "created_at": "2018-11-10T17:32:07.000Z",
      "updated_at": "2025-04-06T17:32:07.000Z",
      "tags": [
        "math",
        "max"
      ]
    },
    "content": "\n## 例题\n\n### $f(x)_{min}=2\\sin x + \\sin 2x$\n(定义域为 R , 否则无解)\n\n#### 求导函数\n```math\n\\begin{align*}\nf(x) &= 2\\sin x + 2\\sin x \\cos x \\\\\n&= 2t + 2t\\sqrt{1 - t^2}\n\\end{align*}\n```\n求导:\n```math\n\\begin{align*}\nf'(x) &= 2 + 2\\sqrt{1 - t^2} - \\frac{2t^2}{\\sqrt{1 - t^2}} \\\\\n&= 2\\left(\\frac{\\sqrt{1 - t^2}}{\\sqrt{1 - t^2}} + \\frac{1 - t^2}{\\sqrt{1 - t^2}} + \\frac{-t^2}{\\sqrt{1 - t^2}}\\right) \\\\\n&= \\frac{2}{\\sqrt{1 - t^2}} (\\sqrt{1 - t^2} + 2 - 2t^2 - 1) \\\\\n&= \\frac{2}{\\sqrt{1 - t^2}} (2\\sqrt{1 - t^2}-1)(\\sqrt{1 - t^2}+1) \\\\\n\n\\end{align*}\n```\n解: $f'(x) = 0$.\n```math\n\\begin{align*}\n& \\sqrt{1 - t^2} = \\frac{1}{2}, -1  \\\\\n&\\sqrt{1 - t^2}=-1\\ 是一个驻点, 但不是极值点 \\\\\n\\end{align*}\n```\n代入得:\n```math\n\\begin{align*}\nf(x)_{min} &= -(\\sqrt3 + \\sqrt3 \\cdot \\frac{1}{2}) = -\\frac{3\\sqrt3}{2} \\\\\n\\end{align*}\n```\n\n#### 琴生 inequality\n当 $f(x)$ 是一个上凸函数时, 有:\n```math\n\\begin{align*}\n\\frac{f(x_1)+f(x_2)+ ... +f(x_n)}{n} \\leq f\\left(\\frac{x_1+x_2+...+x_n}{n}\\right) \\\\\n\\end{align*}\n```\n下凸函数反之.\n\n则此题最小值为:\n\n```math\n\\begin{align*}\nf(x) = \\sin x + \\sin x + \\sin (\\pi - 2x) \\geq -3\\sin (\\frac{x+x+\\pi-2x}{3}) = -\\frac{3\\sqrt3}{2} \\\\\n\\end{align*}\n```",
    "toc": [
      {
        "depth": 2,
        "value": "例题",
        "slug": "例题"
      },
      {
        "depth": 3,
        "value": "$f(x)_{min}=2\\sin x + \\sin 2x$",
        "slug": "$f(x)_{min}=2\\sin-x-+-\\sin-2x$"
      },
      {
        "depth": 4,
        "value": "求导函数",
        "slug": "求导函数"
      },
      {
        "depth": 4,
        "value": "琴生 inequality",
        "slug": "琴生-inequality"
      }
    ]
  },
  {
    "title": "coc",
    "description": "例子 | l | h | exp | 是速 | 矿石 ...",
    "url": "/blog/2013/06/12/coc.mdx",
    "slug": "2013/06/12/coc.mdx",
    "segments": [
      "2013",
      "06",
      "12",
      "coc.mdx"
    ],
    "filePath": "2013/06/12/coc.mdx",
    "meta": {
      "title": "coc",
      "description": "例子 | l | h | exp | 是速 | 矿石 ...",
      "created_at": "2013-06-12T20:35:23.000Z",
      "updated_at": "2025-04-13T20:35:23.000Z",
      "tags": [
        "math"
      ]
    },
    "content": "例子\n| l | h | exp | 是速 | 矿石 | sort |\n| - | - | --- | ------ | ---- | ---- |\n| 14 | 568 |  | 0 | 731,31,4 | 1.1 |\n| 13 | 536 |  | 0 | 666,29,4 | 1.2 |\n| 12 | 504 | 9 | 0 | 591,26,4 | 1.3 |\n| 11 | 432 | 7 | 1 | 506,22,3 | 1.4 |\n| 10 | 392 | 6 | 0 | 458,21,3 | 1.5 |\n| 10 | 376 | 6 | 0 | 453,21,3 | 1.6 |\n| 10 | 376 | 6 | 0 | 451,20,2 | 1.7 |\n| 10 | 368 | 6 | 0 | 450,20,2 | 1.8 |\n| 10 | 336 | 6 | 0 | 438,20,2 | 1.9 |\n| 10 | 336 | 6 | 0 | 436,20,2 | 1.10 |\n| 16 | 632 | 12 | 1 | 956,36,5 | 2.1 |\n| 15 | 536 | 10 | 1 | 660,28,4 | 2.2 |\n| 14 | 512 | 9  | 1 | 601,26,4 | 2.3 |\n| 13 | 504 | 9  | 1 | 593,26,4 | 2.4 |\n| 12 | 472 | 8 | 1 | 552,24,3 | 2.5 |\n| 11 | 424 | 7 | 0 | 491,22,3 | 2.6 |\n| 11 | 328 | 5 | 1 | 435,19,1 | 2.7 |\n| 11 | 320 | 5  | 1 | 430,19,1 | 2.8 |\n| 10 |  | 5 | 0 | 423,19,1 | 2.9 |\n| 10 | 296 | 5 | 0 | 423,19,1 | 2.10 |\n| 14 | 576 | 11 | 0 | 760,32,5 | 3.1 | \n| 14 | 560 | 11 | 0 | 729,31,4 | 3.2 | \n| 13 | 536 | 10 | 0 | 661,29,4 | 3.3 | \n| 13 | 520 | 10 | 0 | 629,28,4 | 3.4 |\n| 11 | 408 | 7 | 0 | 478,22,3 | 3.5 |\n| 11 | 408 | 7 | 0 | 476,21,3 | 3.6 |\n| 10 | 312 | 5 |  | 430,19,1 | 3.7 |\n| 10 | 320 | 5 | | 431,19,1 | 3.8 |\n| 11 | 304 | 5 | 1 | 425,19,1 | 3.9 |\n|  9 | 248 | 4 | 0 | 406,18,0 | 3.10 |\n| 17 | 648 | | 1 | 993,37,5 | 4.1 |\n| 14 | 560 | | 0 | 718,30,4 | 4.2 |\n| 13 | 536 | | 0 | 660,29,4 | 4.3 |\n| 12 | 488 | | 0 | 578,25,3 | 4.4 |\n| 11 | 432 | 7 | 0 | 501,22,3 | 4.5 |\n| 10 | 376 | 6 | 1 | 451,20,2 | 4.6 |\n| 10 | 352 | 6 | 0 | 445,20,2 | 4.7 |\n| 10 | 304 | 5 | 0 | 426,19,1 | 4.8 |\n|  9 | 208 | 4 | 0 | 395,16,0 | 4.9 |\n|  9 | 192 | 4 | 0 |  390,16,0 | 4.10 |\n| 9  | 200 | 4 | 0 |  | 9.3 |\n| 7  | 16  | 2  | 0 |  | 9.4 |\n\n| 大本营等级 | 匹配值(h) | 进攻获胜经验 |\n| ----------- | ------ | ------------ |\n| 15 | 600-640 | 12 |\n| 14 | 560-600 | 11 |\n| 13 | 520-560 | 10 |\n| 12 | 480-520 |  9 |\n| 11 | 400-480 | 7,8 |\n| 10 | 280-400 | 5,6 |\n| 9  | | 4 | \n| 8  | |  | \n| 7  | 0- | 2 |\n\n\n对于 10本\n| h | exp |\n|-----|-----|\n| 376 | 6 |\n| 392 | 6 | \n",
    "toc": []
  },
  {
    "title": "numberTheory",
    "description": "纯粹数学的分支之一，主要研究整数的性质。 整数可以是方程式的解（丢番图方程）。 有些解析函数（像黎曼ζ函数）中包括了一些整数、质数的性质，透过这些函数也可以了解一些数论的问题。 透过数论也可以建立实数和有理数之间的关系，并且用有理数来逼近实数（丢番图逼近）。",
    "url": "/blog/2012/09/16/numberTheory.mdx",
    "slug": "2012/09/16/numberTheory.mdx",
    "segments": [
      "2012",
      "09",
      "16",
      "numberTheory.mdx"
    ],
    "filePath": "2012/09/16/numberTheory.mdx",
    "meta": {
      "title": "numberTheory",
      "description": "纯粹数学的分支之一，主要研究整数的性质。 整数可以是方程式的解（丢番图方程）。 有些解析函数（像黎曼ζ函数）中包括了一些整数、质数的性质，透过这些函数也可以了解一些数论的问题。 透过数论也可以建立实数和有理数之间的关系，并且用有理数来逼近实数（丢番图逼近）。",
      "created_at": "2012-09-12T20:39:52.000Z",
      "updated_at": "2025-04-04T20:39:52.000Z",
      "tags": [
        "math",
        "numberTheory",
        "alg"
      ]
    },
    "content": "\n## base\n\n### 质数与因数分解\n\n因数也称为约数, 是指能整除一个整数的数\n- 例如: $6$ 的因数有 $1, 2, 3, 6$\n- 例如: $12$ 的因数有 $1, 2, 3, 4, 6, 12$\n\n#### 分解一个数的所有因数\n\n##### 枚举解空间\n\n复杂度为: $O(n)$\n\n```py\ndef divisor(n):\n    res = [1, n]\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res.append(i)\n```\n##### 试除法求所有因数\n找到一个 约数 $d$, 那么 $n/d$ 也是一个约数\n\n复杂度为: $O(\\sqrt{n})$\n```py\ndef divisor(n):\n    res = [1, n]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            res.append(i) # 添加 $d$\n            if i != n // i:\n                res.append(n // i) # 添加 $n/d$\n    return res\n```\n\n#### 分解质因数\n\n例如:\n- $12 = 2\\times 2 \\times 3 = 2^2 \\times 3^1$, 即 有 2 和 3 两个质因数\n- $60 = 2^2 \\times 3^1 \\times 5^1$, 即 有 2, 3 和 5 三个质因数\n\n```py\n# 试除法\ndef prime_factorization(n):\n    res = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            res.append((i, count))\n    if n > 1:\n        res.append((n, 1))\n    return res\nprint(prime_factorization(12))  # 输出: [(2, 2), (3, 1)]\n```\n\n",
    "toc": [
      {
        "depth": 2,
        "value": "base",
        "slug": "base"
      },
      {
        "depth": 3,
        "value": "质数与因数分解",
        "slug": "质数与因数分解"
      },
      {
        "depth": 4,
        "value": "分解一个数的所有因数",
        "slug": "分解一个数的所有因数"
      },
      {
        "depth": 5,
        "value": "枚举解空间",
        "slug": "枚举解空间"
      },
      {
        "depth": 5,
        "value": "试除法求所有因数",
        "slug": "试除法求所有因数"
      },
      {
        "depth": 4,
        "value": "分解质因数",
        "slug": "分解质因数"
      }
    ]
  },
  {
    "title": "微积分",
    "description": "...",
    "url": "/blog/2021/11/11/calculus.mdx",
    "slug": "2021/11/11/calculus.mdx",
    "segments": [
      "2021",
      "11",
      "11",
      "calculus.mdx"
    ],
    "filePath": "2021/11/11/calculus.mdx",
    "meta": {
      "title": "微积分",
      "description": "...",
      "created_at": "2021-11-11T10:13:16.000Z",
      "updated_at": "2025-03-30T10:13:16.000Z",
      "tags": [
        "math"
      ]
    },
    "content": "",
    "toc": []
  },
  {
    "title": "var",
    "description": "赋值 (Assignment) 引用 (Referen...",
    "url": "/blog/2021/12/11/var.mdx",
    "slug": "2021/12/11/var.mdx",
    "segments": [
      "2021",
      "12",
      "11",
      "var.mdx"
    ],
    "filePath": "2021/12/11/var.mdx",
    "meta": {
      "title": "var",
      "description": "赋值 (Assignment) 引用 (Referen...",
      "created_at": "2021-12-11T10:11:52.000Z",
      "updated_at": "2025-03-30T10:11:52.000Z",
      "tags": [
        "c"
      ]
    },
    "content": "\n## 赋值 (Assignment)\n\n### 引用 (Reference)\n\n引用是一个变量的别名，它本质上是一个绑定到已有变量的“标签”，并不是直接的“取地址”\n\n示例:\n```c title=\"c\" \nint a = 10;\nint &b = a;  // b 是 a 的引用\nb = 20;      // 修改 b 等同于修改 a\nstd::cout << a;  // 输出: 20\n```\n\n#### 解引用 (Dereference)\n解引用是通过指针访问指针所指向的内存地址中的值。解引用操作需要显式使用 `*` 运算符\n\n```c title=\"c\"\nint a = 10;\nint *ptr = &a;  // ptr 是指向 a 的指针\n*ptr = 20;      // 解引用 ptr，修改 a 的值\nstd::cout << a;  // 输出: 20\n```\n",
    "toc": [
      {
        "depth": 2,
        "value": "赋值 (Assignment)",
        "slug": "赋值-(assignment)"
      },
      {
        "depth": 3,
        "value": "引用 (Reference)",
        "slug": "引用-(reference)"
      },
      {
        "depth": 4,
        "value": "解引用 (Dereference)",
        "slug": "解引用-(dereference)"
      }
    ]
  },
  {
    "title": "git",
    "description": "git 是一个分布式版本控制系统, 用于跟踪计算机文件的修改, 主要用于源代码管理 (SCM) 。",
    "url": "/blog/2021/12/14/git.mdx",
    "slug": "2021/12/14/git.mdx",
    "segments": [
      "2021",
      "12",
      "14",
      "git.mdx"
    ],
    "filePath": "2021/12/14/git.mdx",
    "meta": {
      "title": "git",
      "description": "git 是一个分布式版本控制系统, 用于跟踪计算机文件的修改, 主要用于源代码管理 (SCM) 。",
      "created_at": "2021-11-14T20:18:40.000Z",
      "updated_at": "2025-03-31T20:18:40.000Z",
      "tags": [
        "git",
        "cli"
      ]
    },
    "content": "\r\n## cli\r\n\r\n### git status\r\n\r\n显示当前工作目录和暂存区的状态。它可以帮助你了解哪些文件被修改、哪些文件被添加到暂存区、哪些文件未被跟踪等信息。\r\n\r\n```sh\r\n🪟 ❯ git status\r\nOn branch main\r\nYour branch is up to date with 'origin/main'.\r\n\r\nnothing to commit, working tree clean\r\n```\r\n>[!note]\r\n> `On branch main` : 当前所在的分支是 `main` 分支<br/>\r\n> `Your branch is up to date with 'origin/main'` : 当前分支与远程分支 `origin/main` 是同步的，没有新的提交。<br/>\r\n> `nothing to commit, working tree clean` : 没有需要提交的更改，工作目录是干净的。<br/>\r\n> `Your branch` : 你的分支<br/>\r\n> `is up to date` : 是最新的<br/>\r\n> `up to date` : 最新的<br/>\r\n> `with 'origin/main'` : 和 `origin/main` 一起<br/>\r\n> `is up to date with ...` : \r\n",
    "toc": [
      {
        "depth": 2,
        "value": "cli",
        "slug": "cli"
      },
      {
        "depth": 3,
        "value": "git status",
        "slug": "git-status"
      }
    ]
  },
  {
    "title": "IDLE",
    "description": "IDLE 是 Python 的集成开发环境 (IDE)，它是用 Python 编写的，提供了一个简单的图形用户界面 (GUI) 来编写和运行 Python 代码。",
    "url": "/blog/2023/06/12/IDLE.mdx",
    "slug": "2023/06/12/IDLE.mdx",
    "segments": [
      "2023",
      "06",
      "12",
      "IDLE.mdx"
    ],
    "filePath": "2023/06/12/IDLE.mdx",
    "meta": {
      "title": "IDLE",
      "description": "IDLE 是 Python 的集成开发环境 (IDE)，它是用 Python 编写的，提供了一个简单的图形用户界面 (GUI) 来编写和运行 Python 代码。",
      "created_at": "2023-06-12T23:35:44.000Z",
      "updated_at": "2025-03-31T23:35:44.000Z",
      "tags": [
        "python",
        "ide"
      ]
    },
    "content": "\r\n```sh\r\npython3 --version\r\n# \r\nwhere idle\r\nwhich idle\r\n# 如果 `IDLE` 指向的不是你期望的 Python 版本，尝试直接运行：\r\npython3 -m idlelib\r\n```\r\n\r\n## use\r\n\r\n- 新建文件: `Ctrl + N`\r\n- 代码补全: `Ctrl + Space` (在 Mac 上是 `Control + Space`)\r\n- 运行: `F5`\r\n- 打开文档: `F1`\r\n- 字体: Options -> Configure IDLE > Fonts/Tabs, 推荐 Consolas, size=18\r\n- 注释: `Alt + 3` (在 Mac 上是 `Option + 3`)\r\n- 取消注释: `Alt + 4` (在 Mac 上是 `Option + 4`)\r\n- 缩进: `Tab`,  取消缩进: `Ctrl + [` (在 Mac 上是 `Command + [`)\r\n",
    "toc": [
      {
        "depth": 2,
        "value": "use",
        "slug": "use"
      }
    ]
  },
  {
    "title": "python",
    "description": "Python 是一种广泛使用的高级编程语言，具有清晰的语法和强大的库支持。它适用于多种应用，包括数据分析、机器学习、Web 开发等。",
    "url": "/blog/2023/06/12/python.mdx",
    "slug": "2023/06/12/python.mdx",
    "segments": [
      "2023",
      "06",
      "12",
      "python.mdx"
    ],
    "filePath": "2023/06/12/python.mdx",
    "meta": {
      "title": "python",
      "description": "Python 是一种广泛使用的高级编程语言，具有清晰的语法和强大的库支持。它适用于多种应用，包括数据分析、机器学习、Web 开发等。",
      "created_at": "2023-06-12T23:35:17.000Z",
      "updated_at": "2025-03-31T23:35:17.000Z",
      "tags": [
        "python"
      ]
    },
    "content": "\r\n## install\r\n\r\n1. 是否已经安装 python\r\n    1. 回想自己是否安装过 python, 下面是误装 `python` 的一些例子\r\n        - 安装 nodejs 时选择了某些选项\r\n    2. 检查当前环境中是否有 python\r\n        ```sh title=\"这些命令会在当前环境中查找 python 的位置\"\r\n        # Windows\r\n        where python\r\n        # 注意在 windows 中 C:\\Users\\aa\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe \r\n        # 这个位置有 python.exe 并不一定意味着你安装了 python, \r\n        # 你可以运行 python 查看有什么反应 可能会跳转到 Microsoft Store, \r\n        # 而不是进入 python 交互式命令行, 那么说明你没有安装 python\r\n        # Linux\r\n        which python\r\n        # MacOS\r\n        type python\r\n        ```\r\n    3. 如果你想的话可以 在所以文件中查找 python 的位置\r\n        ```sh title=\"这些命令会在所有文件中查找 python 的位置\"\r\n        # Windows `/s` 表示递归搜索子目录 `/b` 表示只显示文件名\r\n        dir C:\\python.exe /s /b # 在 C 盘中查找 python.exe\r\n        dir D:\\python.exe /s /b # 在 D 盘中查找 python.exe\r\n        # Linux\r\n        find / -name python\r\n        # MacOS\r\n        find / -name python\r\n        ```\r\n\r\n",
    "toc": [
      {
        "depth": 2,
        "value": "install",
        "slug": "install"
      }
    ]
  },
  {
    "title": "conda",
    "description": "Conda 是一个开源的包管理器和环境管理器，主要用于 Python 和 R 语言。它允许用户安装、更新和管理软件包及其依赖项，并创建和管理虚拟环境。",
    "url": "/blog/2023/06/18/conda.mdx",
    "slug": "2023/06/18/conda.mdx",
    "segments": [
      "2023",
      "06",
      "18",
      "conda.mdx"
    ],
    "filePath": "2023/06/18/conda.mdx",
    "meta": {
      "title": "conda",
      "description": "Conda 是一个开源的包管理器和环境管理器，主要用于 Python 和 R 语言。它允许用户安装、更新和管理软件包及其依赖项，并创建和管理虚拟环境。",
      "created_at": "2023-06-12T23:37:49.000Z",
      "updated_at": "2025-03-31T23:37:49.000Z",
      "tags": [
        "python",
        "env"
      ]
    },
    "content": "\r\n## install conda\r\n\r\nConda 支持多种安装方法\r\n\r\n- Anaconda 是一个包含 Conda 的完整数据科学工具包，适合需要大量预装库的用户\r\n  - 自带大量科学计算和数据分析库（如 NumPy、Pandas、Jupyter Notebook 等）\r\n  - 文件较大（约 500MB+），安装后占用较多磁盘空间\r\n- Miniconda 是一个轻量级的 Conda 版本，仅包含 Conda 和 Python，适合需要更灵活控制环境的用户\r\n  - 文件较小（约 50MB）\r\n\r\n### Anaconda\r\n\r\n\r\n### Miniconda\r\n\r\n#### use 系统包管理器安装\r\n\r\n##### winget (Windows)\r\n\r\n```sh\r\n# 搜索 Miniconda\r\nwinget search miniconda\r\nwinget install Anaconda.Miniconda3\r\n# or \r\nwinget install Miniconda3\r\n# 安装完成后会告诉你安装路径\r\n# 例如 C:\\Users\\aa\\Miniconda3 , 打开这个路径\r\n# dir C:\\Users\\aa\\Miniconda3 /b # 查看这个目录下的文件和文件夹\r\n# 查看是否有  bin/ Scripts/ 文件夹\r\n# 在环境变量中 创建 名为 CondaPath 的变量, 值为 \r\n# C:\\Users\\aa\\Miniconda3\r\n# C:\\Users\\aa\\Miniconda3\\bin\r\n# C:\\Users\\aa\\Miniconda3\\Scripts\r\n# 然后蒋在名为 PATH 的变量中添加 %CondaPath%\r\n```\r\n\r\n##### pacman (Arch Linux \\ Manjaro)\r\n\r\n##### apt (Debian\\Ubuntu)\r\n\r\n##### dnf (Fedora)\r\n\r\n##### yum (openSUSE\\CentOS\\RHEL)\r\n\r\n\r\n#### use src\r\n\r\n#### use docker\r\n\r\n## use\r\n\r\n### create env\r\n\r\n```sh\r\n# (optional) 列出所有可用的环境\r\nconda env list\r\n# (optional) 搜索可用的环境\r\nconda search python\r\n# 创建一个新的 Conda 环境，命名为 py38，使用 Python 3.8.16\r\nconda create -n py38 python=3.8.16\r\n# activate py38 环境\r\nconda activate py38\r\n```\r\n",
    "toc": [
      {
        "depth": 2,
        "value": "install conda",
        "slug": "install-conda"
      },
      {
        "depth": 3,
        "value": "Anaconda",
        "slug": "anaconda"
      },
      {
        "depth": 3,
        "value": "Miniconda",
        "slug": "miniconda"
      },
      {
        "depth": 4,
        "value": "use 系统包管理器安装",
        "slug": "use-系统包管理器安装"
      },
      {
        "depth": 5,
        "value": "winget (Windows)",
        "slug": "winget-(windows)"
      },
      {
        "depth": 5,
        "value": "pacman (Arch Linux \\ Manjaro)",
        "slug": "pacman-(arch-linux-\\-manjaro)"
      },
      {
        "depth": 5,
        "value": "apt (Debian\\Ubuntu)",
        "slug": "apt-(debian\\ubuntu)"
      },
      {
        "depth": 5,
        "value": "dnf (Fedora)",
        "slug": "dnf-(fedora)"
      },
      {
        "depth": 5,
        "value": "yum (openSUSE\\CentOS\\RHEL)",
        "slug": "yum-(opensuse\\centos\\rhel)"
      },
      {
        "depth": 4,
        "value": "use src",
        "slug": "use-src"
      },
      {
        "depth": 4,
        "value": "use docker",
        "slug": "use-docker"
      },
      {
        "depth": 2,
        "value": "use",
        "slug": "use"
      },
      {
        "depth": 3,
        "value": "create env",
        "slug": "create-env"
      }
    ]
  },
  {
    "title": "time",
    "description": "时间 (Time) 是一种度量, 用于表示事件发生的顺序和持续时间",
    "url": "/blog/2023/06/13/time.mdx",
    "slug": "2023/06/13/time.mdx",
    "segments": [
      "2023",
      "06",
      "13",
      "time.mdx"
    ],
    "filePath": "2023/06/13/time.mdx",
    "meta": {
      "title": "time",
      "description": "时间 (Time) 是一种度量, 用于表示事件发生的顺序和持续时间",
      "created_at": "2023-06-13T18:59:44.000Z",
      "updated_at": "2025-04-04T18:59:44.000Z",
      "tags": [
        "time",
        "python",
        "alg"
      ]
    },
    "content": "\n```py\nfrom datetime import date, timedelta\n# 计算两个日期之间的天数\nstart_date = date(2025, 4, 1)\nend_date = date(2025, 4, 17)\ndelta = end_date - start_date\nprint(delta)  # 输出: 16 days, 0:00:00\nprint(delta.days)  # 输出: 16\n```\n\n## 例题\n\n### 第几天\n2000年的1月1日, 是那一年的第1天\n\n那么, 2000年5月4日, 是那一年的第几天\n```py\nfrom datetime import date\nprint((date(2000, 5, 4)-date(2000, 1, 1)).days+1) # 输出: 125\n```\n\n### 星期一\n整个20世纪 (1901-01-01 ~ 2000-12-31) 中, 星期一的数量\n```py\nfrom datetime import date, timedelta\nt0 = date(1901, 1, 1)\nt1 = date(2000, 12, 31)\nres = 0\nwhile t0 <= t1:\n    if t0.weekday() == 0:  # 0=Monday, 1=Tuesday, ..., 6=Sunday\n        res += 1\n    t0 += timedelta(days=1)\nprint(res)  # 输出: 5217\n```\n\n### 含2天数\n小蓝特别喜欢2, 今年是公元2020年, 他特别高校, 因为每天都可以看到2\n\n如果日历中只显示年月日, 请问从公元 1900年1月1日 到公元 9999年12月31日, 一共有多少天日历上包含2\n```py\nfrom datetime import date, timedelta\nt0 = date(1900, 1, 1)\nt1 = date(9999, 12, 31)\ndelta = timedelta(days=1)\nres = 0\nwhile t0 < t1:\n    if '2' in str(t0):\n        res += 1\n    t0 += delta\nprint(res+1)  # 输出: 1994240\n```\n\nnumberTheory",
    "toc": [
      {
        "depth": 2,
        "value": "例题",
        "slug": "例题"
      },
      {
        "depth": 3,
        "value": "第几天",
        "slug": "第几天"
      },
      {
        "depth": 3,
        "value": "星期一",
        "slug": "星期一"
      },
      {
        "depth": 3,
        "value": "含2天数",
        "slug": "含2天数"
      }
    ]
  },
  {
    "title": "Venous Thrombosis",
    "description": "静脉血栓形成是指血液在静脉内异常凝固，形成血栓，可能导致静脉阻塞和其他并发症。",
    "url": "/blog/2023/06/13/venousThrombosis.mdx",
    "slug": "2023/06/13/venousThrombosis.mdx",
    "segments": [
      "2023",
      "06",
      "13",
      "venousThrombosis.mdx"
    ],
    "filePath": "2023/06/13/venousThrombosis.mdx",
    "meta": {
      "title": "Venous Thrombosis",
      "description": "静脉血栓形成是指血液在静脉内异常凝固，形成血栓，可能导致静脉阻塞和其他并发症。",
      "created_at": "2023-06-13T04:12:31.000Z",
      "updated_at": "2025-04-07T04:12:31.000Z",
      "tags": [
        "biomedicine"
      ]
    },
    "content": "静脉血栓（Venous Thrombosis）本身并不直接被归类为心血管疾病（Cardiovascular Disease, CVD），但它可能间接导致一些严重的心血管事件，例如心肌梗塞（Myocardial Infarction, MI）和中风（Stroke），这些确实属于 CVD 事件。\n\n### 详细说明：\n\n1. **静脉血栓（Venous Thrombosis）**：\n   - 静脉血栓是指血液在静脉中异常凝结，常见类型包括深静脉血栓（Deep Vein Thrombosis, DVT）和肺栓塞（Pulmonary Embolism, PE）。\n   - 静脉血栓主要影响静脉系统，而心血管疾病通常指动脉系统的疾病（如冠心病、动脉粥样硬化等）。\n\n2. **心血管疾病（CVD）**：\n   - CVD 是一个广义术语，涵盖了影响心脏和血管的疾病，包括：\n     - 冠心病（Coronary Artery Disease, CAD）\n     - 心肌梗塞（Myocardial Infarction, MI）\n     - 中风（Stroke）\n     - 高血压（Hypertension）\n     - 外周动脉疾病（Peripheral Artery Disease, PAD）\n\n3. **静脉血栓与 CVD 的关系**：\n   - 虽然静脉血栓和 CVD 的病理机制不同（静脉血栓主要与血液凝固异常有关，而 CVD 通常与动脉粥样硬化有关），但两者可能存在关联：\n     - **肺栓塞**：严重的静脉血栓可能导致肺栓塞，影响心脏功能。\n     - **心肌梗塞和中风**：如果静脉血栓的栓子进入动脉系统（例如通过卵圆孔未闭的心脏分流），可能导致动脉栓塞，从而引发心肌梗塞或中风。\n\n4. **总结**：\n   - 静脉血栓本身不是典型的 CVD，但其并发症（如心肌梗塞和中风）确实属于 CVD 事件。\n   - 如果讨论的是心肌梗塞和中风等结果，那么这些是 CVD 事件。\n\n如果你在撰写论文或报告，建议明确区分静脉血栓和心血管疾病的定义，同时说明两者的潜在关联。",
    "toc": [
      {
        "depth": 3,
        "value": "详细说明：",
        "slug": "详细说明："
      }
    ]
  },
  {
    "title": "auth",
    "description": "身份验证 (Authentication) 是一种安全机制, 用于验证用户的身份",
    "url": "/blog/2023/07/12/auth.mdx",
    "slug": "2023/07/12/auth.mdx",
    "segments": [
      "2023",
      "07",
      "12",
      "auth.mdx"
    ],
    "filePath": "2023/07/12/auth.mdx",
    "meta": {
      "title": "auth",
      "description": "身份验证 (Authentication) 是一种安全机制, 用于验证用户的身份",
      "created_at": "2023-07-12T05:59:58.000Z",
      "updated_at": "2025-04-02T05:59:58.000Z",
      "tags": [
        "web",
        "auth"
      ]
    },
    "content": "\n\n",
    "toc": []
  },
  {
    "title": "vscode",
    "description": "...",
    "url": "/blog/2023/08/01/vscode.mdx",
    "slug": "2023/08/01/vscode.mdx",
    "segments": [
      "2023",
      "08",
      "01",
      "vscode.mdx"
    ],
    "filePath": "2023/08/01/vscode.mdx",
    "meta": {
      "title": "vscode",
      "description": "...",
      "created_at": "2023-08-01T05:31:57.000Z",
      "updated_at": "2025-04-02T05:31:57.000Z",
      "tags": [
        "vscode"
      ]
    },
    "content": "\n```sh\ncode ~/repos/env_ls/dotfiles\n```\n",
    "toc": []
  },
  {
    "title": "dns",
    "description": "全称是 Domain Name System （域名系统），它是互联网的重要基础设施之一，用于将人类易于记忆的 域名（如 www.example.com) 转换为计算机可以识别的 IP 地址（如 192.168.1.1 或 2606:4700:4700::1111)",
    "url": "/blog/2023/07/13/dns.mdx",
    "slug": "2023/07/13/dns.mdx",
    "segments": [
      "2023",
      "07",
      "13",
      "dns.mdx"
    ],
    "filePath": "2023/07/13/dns.mdx",
    "meta": {
      "title": "dns",
      "description": "全称是 Domain Name System （域名系统），它是互联网的重要基础设施之一，用于将人类易于记忆的 域名（如 www.example.com) 转换为计算机可以识别的 IP 地址（如 192.168.1.1 或 2606:4700:4700::1111)",
      "created_at": "2023-07-13T16:23:48.000Z",
      "updated_at": "2025-04-02T16:23:48.000Z",
      "tags": [
        "web",
        "dns"
      ]
    },
    "content": "\n## bug\n\n### ERR_TOO_MANY_REDIRECTS\n\ncloudflare vercel\n\nfirefox: 检测到该服务器正在将指向此网址的 请求 无限循环 重定向\n\n在 **Vercel** 上部署并使用 **Cloudflare 提供的域名 (CNAME 记录)** 时，出现 **“无限循环重定向”** 的问题，通常是由于 **HTTPS 配置** 或 **Cloudflare 和 Vercel 的设置冲突** 导致的。以下是针对这种情况的分析和解决方法\n\n#### 问题原因分析\n\n##### HTTPS 重定向冲突\n\n- Vercel 默认会强制将所有 HTTP 请求重定向到 HTTPS\n- Cloudflare 也可能启用了 HTTPS 重定向（通过 \"Always Use HTTPS\" 或 \"Automatic HTTPS Rewrites\" 功能）\n- 如果两者都启用了 HTTPS 重定向，可能会导致循环重定向\n\n##### Cloudflare 的 SSL/TLS 配置问题\n\n- Cloudflare 提供了多种 SSL/TLS 模式 (如 Flexible, Full, Full (strict) )\n- 如果 Cloudflare 的 SSL 模式设置为 Flexible, Cloudflare 会尝试通过 HTTP 与 Vercel 通信，而 Vercel 强制 HTTPS, 这会导致循环重定向\n\n#### 解决方法\n1. 检查 Cloudflare 的 SSL/TLS 模式\n    1. 登陆 Cloudflare 控制面板\n    2. 选择你的域名\n    3. 点击 **SSL/TLS** 选项卡\n    4. 确保 SSL/TLS 模式设置为 **Full** 或 **Full (strict)**，而不是 **Flexible**\n\n## 参考\n\n- https://brume.top/p/solution-for-err-too-many-redirects-error/",
    "toc": [
      {
        "depth": 2,
        "value": "bug",
        "slug": "bug"
      },
      {
        "depth": 3,
        "value": "ERR_TOO_MANY_REDIRECTS",
        "slug": "err_too_many_redirects"
      },
      {
        "depth": 4,
        "value": "问题原因分析",
        "slug": "问题原因分析"
      },
      {
        "depth": 5,
        "value": "HTTPS 重定向冲突",
        "slug": "https-重定向冲突"
      },
      {
        "depth": 5,
        "value": "Cloudflare 的 SSL/TLS 配置问题",
        "slug": "cloudflare-的-ssl/tls-配置问题"
      },
      {
        "depth": 4,
        "value": "解决方法",
        "slug": "解决方法"
      },
      {
        "depth": 2,
        "value": "参考",
        "slug": "参考"
      }
    ]
  },
  {
    "title": "css",
    "description": ":has()...",
    "url": "/blog/2023/08/02/css.mdx",
    "slug": "2023/08/02/css.mdx",
    "segments": [
      "2023",
      "08",
      "02",
      "css.mdx"
    ],
    "filePath": "2023/08/02/css.mdx",
    "meta": {
      "title": "css",
      "description": ":has()...",
      "created_at": "2023-08-02T10:35:32.000Z",
      "updated_at": "2025-03-30T10:35:32.000Z",
      "tags": [
        "css",
        "html"
      ]
    },
    "content": "\n## :has()\n```html\n<style>\n  div:has(.highlight) { /* 使用 :has() 选择包含 .highlight 的 div */\n    border: 2px solid red;\n    padding: 10px;\n    margin-bottom: 10px;\n  }\n  div { /* 普通 div 的样式 */\n    border: 2px solid gray;\n    padding: 10px;\n    margin-bottom: 10px;\n  }\n  .highlight { /* .highlight 的样式 */\n    background-color: yellow;\n    padding: 5px;\n  }\n</style>\n<div><!-- 不包含 .highlight 的 div -->\n  <p>这是一个普通的 div，没有 .highlight 元素。</p>\n</div>\n<div><!-- 包含 .highlight 的 div -->\n  <p>这是一个包含 <span class=\"highlight\">高亮内容</span> 的 div。</p>\n</div>\n<div><!-- 不包含 .highlight 的 div -->\n  <p>这是另一个普通的 div，没有 .highlight 元素。</p>\n</div>\n```\n",
    "toc": [
      {
        "depth": 2,
        "value": ":has()",
        "slug": ":has()"
      }
    ]
  },
  {
    "title": "package manager",
    "description": "包管理器是一种用于自动化安装、升级、配置和删除计算机程序的工具。主要可以分为两类：操作系统包管理器和编程语言包管理器。",
    "url": "/blog/2023/12/13/packManager.mdx",
    "slug": "2023/12/13/packManager.mdx",
    "segments": [
      "2023",
      "12",
      "13",
      "packManager.mdx"
    ],
    "filePath": "2023/12/13/packManager.mdx",
    "meta": {
      "title": "package manager",
      "description": "包管理器是一种用于自动化安装、升级、配置和删除计算机程序的工具。主要可以分为两类：操作系统包管理器和编程语言包管理器。",
      "created_at": "2023-12-13T00:34:27.000Z",
      "updated_at": "2025-04-01T00:34:27.000Z",
      "tags": [
        "package"
      ]
    },
    "content": "\r\n| 环境 | 包管理器 | 说明 |\r\n| --- | --- | --- |\r\n| windows | [winget](https://winget.run/) | Windows 10 和 Windows 11 的包管理器 |\r\n| macOS | [Homebrew](https://brew.sh/) | macOS 的包管理器 |\r\n| Ubuntu\\debian | [apt](https://packages.debian.org/) | Debian 和 Ubuntu 的包管理器 |\r\n| Arch Linux\\Manjaro | [pacman](https://archlinux.org/) | Arch Linux 和 Manjaro 的包管理器 |\r\n| Fedora | [dnf](https://dnf.readthedocs.io/en/latest/) | Fedora 的包管理器 |\r\n| openSUSE\\CentOS\\RHEL | [yum](https://yum.baseurl.org/) | openSUSE、CentOS 和 RHEL 的包管理器 |\r\n| Python | [pip](https://pypi.org/) | Python 的包管理器 |\r\n| Conda | [conda](https://docs.conda.io/en/latest/) | Python 的包管理器 |\r\n| Nodejs | [npm](https://www.npmjs.com/) | Node.js 的包管理器 |\r\n| Nodejs | [yarn](https://yarnpkg.com/) | Node.js 的包管理器 |\r\n| Nodejs | [pnpm](https://pnpm.io/) | Node.js 的包管理器 |\r\n| Deno | [deno](https://deno.land/) | Deno 的包管理器 |\r\n| Bun | [bun](https://bun.sh/) | Bun 的包管理器 |\r\n| Rust | [cargo](https://doc.rust-lang.org/cargo/) | Rust 的包管理器 |\r\n| Go | [go](https://golang.org/) | Go 的包管理器 |\r\n| C\\C++ |[conan](https://conan.io/) | C\\C++ 的包管理器 |\r\n| Ruby | [gem](https://rubygems.org/) | Ruby 的包管理器 |\r\n| Java | [maven](https://maven.apache.org/) | Java 的包管理器 |\r\n| Java | [gradle](https://gradle.org/) | Java 的包管理器 |\r\n| PHP | [composer](https://getcomposer.org/) | PHP 的包管理器 |\r\n| C# | [nuget](https://www.nuget.org/) | C# 的包管理器 |\r\n| Elixir | [hex](https://hex.pm/) | Elixir 的包管理器 |\r\n| Elixir | [mix](https://hexdocs.pm/mix/) | Elixir 的包管理器 |\r\n\r\n## winget (Windows)\r\n\r\n```terminal\r\nAdministrator in ~ took 50s\r\n🪟 ❯ winget search miniconda\r\nThe `msstore` source requires that you view the following agreements before using.\r\nTerms of Transaction: https://aka.ms/microsoft-store-terms-of-transaction\r\nThe source requires the current machine's 2-letter geographic region to be sent to the backend service to function properly (ex. \"US\").\r\n\r\nDo you agree to all the source agreements terms?\r\n[Y] Yes  [N] No: yes\r\nName       Id                  Version        Match          Source\r\n-------------------------------------------------------------------\r\nMiniconda3 Anaconda.Miniconda3 py312_25.1.1-2 Tag: miniconda winget\r\n\r\n🪟 ❯ winget install Miniconda3\r\n# or \r\n🪟 ❯ winget install Anaconda.Miniconda3\r\n```\r\n",
    "toc": [
      {
        "depth": 2,
        "value": "winget (Windows)",
        "slug": "winget-(windows)"
      }
    ]
  },
  {
    "title": "dp",
    "description": "**动态规划(Dynamic Programming)** 是一种将复杂问题分解成更小的子问题的方法, 通过保存子问题的结果来避免重复计算",
    "url": "/blog/2024/03/12/dp.mdx",
    "slug": "2024/03/12/dp.mdx",
    "segments": [
      "2024",
      "03",
      "12",
      "dp.mdx"
    ],
    "filePath": "2024/03/12/dp.mdx",
    "meta": {
      "title": "dp",
      "description": "**动态规划(Dynamic Programming)** 是一种将复杂问题分解成更小的子问题的方法, 通过保存子问题的结果来避免重复计算",
      "created_at": "2024-03-12T16:22:16.000Z",
      "updated_at": "2025-04-03T16:22:16.000Z",
      "tags": [
        "alg",
        "dp"
      ]
    },
    "content": "\n## leetCode 70 爬楼梯\n\n假设你正在爬楼梯。需要 `n` 阶你才能到达楼顶。\n\n每次你可以爬 `1` 或 `2` 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n**示例1:**\n> 输入：`n = 2`<br/>\n> 输出：`2`<br/>\n> 解释: 有两种方法可以爬到楼顶\n> 1. 1 阶 + 1 阶\n> 2. 2 阶\n\n**示例2:**\n> 输入：`n = 3`<br/>\n> 输出：`3`<br/>\n> 解释: 有三种方法可以爬到楼顶\n> 1. 1 阶 + 1 阶 + 1 阶\n> 2. 1 阶 + 2 阶\n> 3. 2 阶 + 1 阶\n\n**提示:**\n- $1 \\leq n \\leq 45$\n\n### 分析\n1. 爬 3 阶, 从 2 阶上来是一种方法, 从 1 阶上来是另外一种方法\n2. 因此爬 3 阶的方法数 = 爬 2 阶的方法数 + 爬 1 阶的方法数\n3. 也就是 `f(n) = f(n-1) + f(n-2)`, 发现此递推公式符合斐波那契数列\n### 解法1: 递归\n```py\ndef dfs(n: int) -> int:\n    if n <= 2:\n        return n # f(1)=1, f(2)=2\n    return dfs(n - 1) + dfs(n - 2)\n```\n**复杂度分析:**\n- 时间复杂度: $O(2^n)$, 这个递归解法相当于搜索一个课高为 `n` 的二叉树\n- 空间复杂度: $O(n)$, 递归栈的深度为 `n`\n\n例如 n=7\n```mermaid\ngraph TD\n    7((7)) --> 6.6((6))\n    7 --> 6.5((5))\n    6.6 --> 5.5((5))\n    6.6 --> 5.4((4))\n    6.5 --> 5.4.2((4))\n    6.5 --> 5.3((3))\n    5.5 --> 4.4((4))\n    5.5 --> 4.3((3))\n    5.4 --> 4.3.2((3))\n    5.4 --> 4.2((2))\n    5.4.2 --> 4.3.3((3))\n    5.4.2 --> 4.2.2((2))\n    5.3 --> 4.2.1((2))\n    5.3 --> 4.1((1))\n    4.4 --> 3.3((3))\n    4.4 --> 3.2((2))\n    4.3 --> 3.2.2((2))\n    4.3 --> 3.1((1))\n    4.3.2 --> 3.2.3((2))\n    4.3.2 --> 3.1.2((1))\n    4.2 --> 3.1.3((1))\n    4.3.3 --> 3.2.4((2))\n    4.3.3 --> 3.1.4((1))\n    4.2.2 --> 3.1.5((1))\n    3.3 --> 2.2((2))\n    3.3 --> 2.1((1))\n```\n> [!warning]\n> 发现计算了过多的重复子问题\n### 解法2: 递归 + 记录返回值 = 记忆化搜索\n> [!note]\n> 可以存储已经计算过的值, 以避免重复计算, 例如可以使用 array or hash_map 来存储<br/>\n> 不过 python 中内置了, `functools.lru_cache{:py}` 装饰器, 可以直接用于这个需求\n```py\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef dfs(n: int) -> int:\n    if n <= 2:\n        return n # f(1)=1, f(2)=2\n    return dfs(n - 1) + dfs(n - 2)\n```\n使用记忆化搜索后的复杂度是$O(n)$, 只需要计算每个子问题一次, 递归栈的深度为 `n`, 所以空间复杂度也是 $O(n)$<br/>\n图示如下:\n```mermaid\ngraph LR\n    7((7)) --> 6((6))\n    6 --> 5((5))\n    5 --> 4((4))\n    4 --> 3((3))\n    3 --> 2((2))\n    2 --> 1((1))\n```\n### 解法3: 动态规划\n> [!note]\n> **动态规划(Dynamic Programming, DP)** 可以被看作是将**递归问题**转化为**迭代问题**的一种算法，但它的核心思想不仅仅是简单的转化，而是通过 **分解问题** 和 **存储子问题的解** 来优化计算过程\n```py\ndef climbStairs(n: int) -> int:\n    if n <= 2:\n        return n\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = 1, 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n```\n### 解法4: DP + 状态压缩(滚动数组)\n- 在这个 解法3 中, `dp[i]` 的值只依赖于 `dp[i-1]` 和 `dp[i-2]`\n- 因此，我们不需要存储整个 `dp` 数组，只需要用两个变量来保存最近的两个状态即可\n- 状态压缩的时间复杂度与普通动态规划相同，但它的 空间复杂度更低，从 $O(n)$ 降到了 $O(1)$\n- 在实际运行中，减少内存分配和访问的开销会使程序运行得更快\n```py\ndef climbStairs(n: int) -> int:\n    if n <= 2:\n        return n\n    prev, curr = 1, 2  # 初始化 f(1) 和 f(2)\n    for i in range(3, n + 1):\n        prev, curr = curr, prev + curr  # 更新状态\n    return curr\n```\n### 解法5: 解通项公式\n```math\n\\begin{align*}\n&f(n) = f(n-1) + f(n-2) \\\\\n&\\rightarrow f(n) = \\frac{1}{\\sqrt{5}}(\\phi^n - \\psi^n) \\\\\n&\\phi = \\frac{1 + \\sqrt{5}}{2} \\quad （黄金比例） \\\\\n&\\psi = \\frac{1 - \\sqrt{5}}{2} \\\\\n\\end{align*}\n```\n```py\nfrom math import sqrt\ndef climbStairs(n: int) -> int:\n    sqrt5 = sqrt(5)\n    phi = (1 + sqrt5) / 2\n    n += 1 # 注意这题求的是 f(n+1)\n    return round((phi**n - (1 - phi)**n) / sqrt5)\n```\n> [!note]\n> 这个解法的时间复杂度是 $O(1)$, 但是由于浮点数精度问题, 当 `n` 较大时可能会出现误差\n#### 证明\n```math\nf(n) = f(n-1) + f(n-2)\n```\n这是一个 **线性递推关系**, 并且它的系数是常数 (即 `1` 和 `1`) 。对于这种递推关, Binet's Formula 提供了一种通用的解法，可以直接推导出数列的通项公式\n\n##### 待定系数法 推导\n\n**1. 递推关系:**\n```math\nf(n) = f(n-1) + f(n-2)\n```\n这是一个二阶线性递推关系\n\n**2. 特征方程:**\n\n为了求解这个递推关系, 我们假设通解的形式为\n```math\nf(n) = x^n\n```\n- 将其代入递推关系中, 得到:\n```math\nx^n = x^{n-1} + x^{n-2}\n```\n- 除以 $x^{n-2}$ (假设 $x \\neq 0$), 得到:\n```math\nx^2 = x + 1\n```\n这就是斐波那契数列的 **特征方程**\n\n**3. 求解特征方程:**\n\n- 解这个方程可以得到两个根:\n```math\n\\begin{align*}\n&x_1 = \\frac{1 + \\sqrt{5}}{2} \\quad (黄金比例) \\quad\\quad\n&x_2 = \\frac{1 - \\sqrt{5}}{2}\n\\end{align*}\n```\n**4. 通解的形式:**\n\n根据线性递推关系，通解可以表示为特征根的线性组合：\n```math\nf(n) = A \\cdot x_1^n + B \\cdot x_2^n\n```\n**5. 确定系数:**\n- 通过初始条件来确定系数 `A` 和 `B`\n```math\n\\begin{aligned}\n&\\left\\{\n\\begin{aligned}\nf(0) &= A \\cdot x_1^0 + B \\cdot x_2^0 = 0, \\\\\nf(1) &= A \\cdot x_1 + B \\cdot x_2 = 1, \\\\\nf(2) &= A \\cdot x_1^2 + B \\cdot x_2^2 = 2.\n\\end{aligned}\n\\right. \n\\\\\n&\\left\\{\n\\begin{aligned}\nA + B &= 0, \\\\\nA \\cdot x_1 + B \\cdot x_2 &= 1.\n\\end{aligned}\n\\right.\n\\end{aligned}\n```\n```math\nA \\cdot \\frac{1 + \\sqrt{5}}{2} + (-A) \\cdot \\frac{1 - \\sqrt{5}}{2} = 1 \n```\n解得\n```math\n\\left\\{\n\\begin{aligned}\n&A \\cdot \\sqrt{5} = 1, \\\\\n&A = \\frac{1}{\\sqrt{5}}, \\\\\n&B = -\\frac{1}{\\sqrt{5}}.\n\\end{aligned}\n\\right.\n```\n- 斐波那契数列的通项公式为:\n```math\nf(n) = \\frac{1}{\\sqrt{5}}(x_1^n - x_2^n)\n```\n### 总结: 不同解法对比\n| 解法 | 时间复杂度 | 空间复杂度 | 优点 | 缺点 |\n|------|------------|------------|------|------|\n| 递归 | $O(2^n)$   | $O(n)$     | 简单易懂 | 重复计算, 效率低 |\n| 记忆化搜索 | $O(n)$   | $O(n)$     | 避免重复计算 | 需要额外的存储空间 |\n| 动态规划(数组) | $O(n)$   | $O(n)$     | 直观易懂 | 需要额外的数组存储空间 |\n| 动态规划(状态压缩) | $O(n)$   | $O(1)$     | 节省空间 | 代码稍复杂 |\n| 数学解法(斐波那契公式) | $O(1)$   | $O(1)$     | 理论最快，常数时间复杂度 | 浮点运算可能导致精度问题 |\n\n## leetCode 198 打家劫舍\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，**如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警**。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你 **不触动警报装置的情况下** ，一夜之内能够偷窃到的最高金额。\n\n**示例1:**\n> 输入：`nums = [1,2,3,1]`<br/>\n> 输出：`4`<br/>\n> 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3) 。偷窃到的最高金额 = 1 + 3 = 4 。\n\n**示例2:**\n> 输入：`nums = [2,7,9,3,1]`<br/>\n> 输出：`12`<br/>\n> 解释：偷窃 1 号房屋 (金额 = 2)，然后偷窃 3 号房屋 (金额 = 9)，最后偷窃 5 号房屋 (金额 = 1)。偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n\n**提示:**\n- `1 <= nums.length <= 100`\n- `0 <= nums[i] <= 400`\n\n```py\ndef rob(self, nums: List[int]) -> int:\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    dp = [0] * n\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n    return dp[-1]\n```\n易懂解法\n```py\ndef rob(self, nums: List[int]) -> int:\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = 0\n    dp[0][1] = nums[0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        dp[i][1] = dp[i - 1][0] + nums[i]\n    return max(dp[-1][0], dp[-1][1])\n```\n\n## 背包问题\n\n$N$ 个物品, 价值为 $v_i$, 重量为 $w_i$, 背包总容量为 $W$, 找到背包能装下的最大价值\n- 0-1背包问题: 每个物品只能选择 0 或 1 次\n- 完全背包问题: 每个物品可以选择多次\n- 多重背包问题: 每个物品最多选择 $s_i$ 次\n- 分组背包问题: 物品分为若干组, 每组只能选择 0 或 1 次\n\n### 0-1背包问题\n状态表示: `dp[i][j]{:py}` 表示前 `i` 个物品, 背包容量为 `j` 时的最大价值\n\n那么 `dp[N][W]{:py}` 就是我们要求的最大价值\n\n从 `i-1` 到 `i` 这个过程, 有两种情况, 即选第 `i` 个物品和不选第 `i` 个物品:\n- 如果不选第 `i` 个物品, 那么最大价值就是前 `i-1` 个物品的最大价值, 即 `dp[i-1][j]{:py}`\n- 如果选第 `i` 个物品, 那么最大价值就是前 `i-1` 个物品的最大价值加上第 `i` 个物品的价值, 即 `dp[i-1][j-w_i] + v_i{:py}`\n\n> [!note]\n> 这里需要注意, 如果选第 `i` 个物品, 那么背包的容量就要减去第 `i` 个物品的重量, 即 `j-w_i`<br/>\n> 因此 `dp[i][j]{:py}` 就是 `dp[i-1][j]{:py}` 和 `dp[i-1][j-w_i] + v_i{:py}` 的最大值<br/>\n> 注意: 需要判断 `j` 是否大于等于 `w_i`, 如果小于 `w_i`, 那么就不能选第 `i` 个物品, 也就是 `dp[i][j] = dp[i-1][j]{:py}`\n\n状态转移方程:\n```math\ndp[i][j] = \\left\\{\n\\begin{aligned}\n&dp[i-1][j] & j < w_i \\\\\n&max(dp[i-1][j], dp[i-1][j-w_i] + v_i) & j \\geq w_i\n\\end{aligned}\n\\right.\n```\ngraph",
    "toc": [
      {
        "depth": 2,
        "value": "leetCode 70 爬楼梯",
        "slug": "leetcode-70-爬楼梯"
      },
      {
        "depth": 3,
        "value": "分析",
        "slug": "分析"
      },
      {
        "depth": 3,
        "value": "解法1: 递归",
        "slug": "解法1:-递归"
      },
      {
        "depth": 3,
        "value": "解法2: 递归 + 记录返回值 = 记忆化搜索",
        "slug": "解法2:-递归-+-记录返回值-=-记忆化搜索"
      },
      {
        "depth": 3,
        "value": "解法3: 动态规划",
        "slug": "解法3:-动态规划"
      },
      {
        "depth": 3,
        "value": "解法4: DP + 状态压缩(滚动数组)",
        "slug": "解法4:-dp-+-状态压缩(滚动数组)"
      },
      {
        "depth": 3,
        "value": "解法5: 解通项公式",
        "slug": "解法5:-解通项公式"
      },
      {
        "depth": 4,
        "value": "证明",
        "slug": "证明"
      },
      {
        "depth": 5,
        "value": "待定系数法 推导",
        "slug": "待定系数法-推导"
      },
      {
        "depth": 3,
        "value": "总结: 不同解法对比",
        "slug": "总结:-不同解法对比"
      },
      {
        "depth": 2,
        "value": "leetCode 198 打家劫舍",
        "slug": "leetcode-198-打家劫舍"
      },
      {
        "depth": 2,
        "value": "背包问题",
        "slug": "背包问题"
      },
      {
        "depth": 3,
        "value": "0-1背包问题",
        "slug": "0-1背包问题"
      }
    ]
  },
  {
    "title": "paper",
    "description": "关于论文的记录",
    "url": "/blog/2024/03/26/paper.mdx",
    "slug": "2024/03/26/paper.mdx",
    "segments": [
      "2024",
      "03",
      "26",
      "paper.mdx"
    ],
    "filePath": "2024/03/26/paper.mdx",
    "meta": {
      "title": "paper",
      "description": "关于论文的记录",
      "created_at": "2024-03-26T20:55:25.000Z",
      "updated_at": "2025-04-05T17:34:39.000Z",
      "tags": [
        "docs",
        "paper"
      ]
    },
    "content": "\n我有数学建模竞赛经验和开发经验, 会使用 python, ts 等, 也有数学竞赛经验, 机器学习, 深度学习经验, 现在我需要编写本科论文, 在选题和初稿阶段, 就是题目还没选好, 我们的数据集以 Harmonized Data 为主\n\n多模态生物医学数据驱动的老年人健康画像构建与预测\n\nhttp://vgms.fanyu.com\n\n## 常规生物医学指标与中国老年人健康状况的相关性研究\n\n2020 CHARLS Wave 5\n\n- 第一章 dataset\n  - 第一节 介绍\n    - part 1 介绍\n    - part 2 Harmonized 概念\n    - part 3 Harmonized 问卷\n    - part 4 变量查询\n  - 第二节 Harmonized Core 问卷 与 选题\n    - part 1 问卷模块\n    - part 2 变量介绍 与 选题 思路\n    - part 3 Harmonized codebook\n  - 第三节 Harmonized end of life 问卷 与 选题\n    - part 1 临终访谈\n    - part 2 临终问卷模块\n    - part 3 变量介绍 与 选题 思路\n  - 第四节 Harmonized life history 问卷 与 选题\n    - part 1 生命历程访谈\n    - part 2 生命历程问卷模块\n    - part 3 变量介绍 与 选题 思路\n- 第二章 各 dataset 及选题\n  - 第一节 CHARLS\n    - part 1 介绍\n    - part 2 采集流程\n    - part 3 原始问卷\n    - part 4 变量 与 选题\n    - part 5 权重介绍\n  - 第二节 HRS\n  - 第三节 ELSA\n  - ...\n- 第三章 数据处理与分析\n  - 第一节 描述性统计\n    - part 1 应用场景\n    - part 2 实战\n    - part 3 结果解读\n  - 第二节 回归分析: 广义线性, logistic, KM曲线+Cox\n    - part 1 三大回归分析应用场景\n    - part 2 实战\n    - part 3 结果解读\n  - 第三节 交互作用与中介效应\n    - part 1 应用场景\n    - part 2 实战\n    - part 3 结果解读\n  - 第四节 限制性立方样条 RCS\n  - 第五节 亚组分析与森林图\n    - part 1 介绍\n    - part 2 实战\n    - part 3 结果解读\n  - 第六节 轨迹模型\n  - 第七节 混合线性模型\n  - 第八节 高分队列研究套路1: 累计平均暴露\\累计暴露\\累积暴露时间进程\n    - part 1 介绍, 文献示例\n    - part 2 适用条件\n    - part 3 实战\n  - 第九节 高分队列研究套路2: 访视期间变异性\\年度变化百分比\\绝对年变化率\n    - part 1 介绍, 文献示例\n    - part 2 适用条件\n    - part 3 实战\n  - 第十节 高分队列研究套路3: 新发年龄\\早发人群\n    - part 1 介绍, 文献示例\n    - part 2 适用条件\n    - part 3 实战\n  - 第十一节 高分队列研究套路4: 交叉滞后\n    - part 1 介绍, 文献示例\n    - part 2 适用条件\n    - part 3 实战\n- 第四章 顶刊论文复现\n  - 第一节 如何进行研究设计及数据制备\n  - 第二节 如何进行数据分析\n  - 第三节 如何完成论文写作\n## 数据集 Global Aging\n\n| 数据集名称 | 数据集描述 | \n| -------- | --------- |\n| CHARLS | 中国健康与养老追踪调查 (CHARLS) 是一项全国性、长期的纵向调查，旨在收集中国中老年人群体的健康、经济和社会信息。 |\n| Health and Retirement Study, HRS | 健康与退休调查 (HRS) 是一项针对美国中老年人群体的纵向调查，旨在研究健康、经济和社会因素对退休决策的影响。 |\n| English Longitudinal Study of Ageing, ELSA | 英国老年人纵向研究 (ELSA) 是一项针对英国中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Survey of Health, Ageing and Retirement in Europe, SHARE | 欧洲健康、老龄化与退休调查 (SHARE) 是一项针对欧洲中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Korea Longitudinal Study of Ageing, KLoSA | 韩国老龄化纵向研究 (KLoSA) 是一项针对韩国中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| The Irish Longitudinal Study on Ageing, TILDA | 爱尔兰老龄化纵向研究 (TILDA) 是一项针对爱尔兰中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Mexico Health and Aging Study, MHAS | 墨西哥健康与老龄化研究 (MHAS) 是一项针对墨西哥中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Indonesia Family Life Survey, IFLS | 印尼家庭生活调查 (IFLS) 是一项针对印尼中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Japanese Study of Aging and Retirement, JSTAR | 日本老龄化与退休研究 (JSTAR) 是一项针对日本中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Study on Global Ageing and Adult Health, SAGE | 全球老龄化与成人健康研究 (SAGE) 是一项针对全球中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n| Global Ageing Data Repository, GADR | 全球老龄化数据存储库 (GADR) 是一项针对全球中老年人群体的纵向调查，旨在研究健康、经济和社会因素对老年人生活质量的影响。 |\n\n### Harmonized Data\n\n些数据集通常都有 Harmonized Data（标准化数据）。Harmonized Data 是对原始数据进行标准化和一致化处理后的数据集，目的是方便跨国家或跨地区的比较研究。这种数据处理方式特别适用于像你提到的这些关于老龄化、健康和退休的纵向调查数据\n\nHarmonized Data 是通过对不同数据集的变量进行标准化处理后生成的统一数据集。它的主要特点包括：\n1. 变量一致性\n2. 跨数据集的可比性\n3. 便于分析\n#### Gateway to Global Aging Data\n官网地址：https://g2aging.org/\n\nGateway to Global Aging Data 是由 加州大学洛杉矶分校（UCLA） 提供的一个平台，专注于全球老龄化相关数据的整合和标准化。它为多个国家的老龄化研究数据（如 CHARLS、HRS、ELSA 等）提供了 Harmonized Data，以便研究者进行跨国家和跨地区的比较研究\n\n#### Preface 前言\nThe China Health and Retirement Longitudinal Study (CHARLS) is a longitudinal study of\nindividuals over age 45 in China. It was designed to better understand the socioeconomic\ndeterminants and consequences of aging. The survey includes a rich set of questions\nregarding economic standing, physical and psychological health, demographics, and social\nnetworks of aged persons. The survey is designed to ensure comparability with the Health and\nRetirement Survey (HRS) in the United States and related aging surveys, such as the English\nLongitudinal Study of Aging (ELSA) in England and the Survey of Health, Aging and Retirement\nin Europe (SHARE) in Europe and Israel. Part of the reason for the close connection is to allow\ncross-country comparisons using these data.\n> [!NOTE]- 翻译\n> 中国健康与退休纵向研究 (CHARLS) 是一项针对中国 45 岁以上人群的纵向研究。其目的是更好地了解老龄化的社会经济决定因素和后果。调查包括有关经济状况、身体和心理健康、人口统计学和老年人社会网络的一系列丰富问题。该调查旨在确保与美国健康与退休调查 (HRS) 以及相关的老龄化调查（例如英国的老龄化纵向研究 (ELSA) 和欧洲及以色列的健康、老龄化和退休调查 (SHARE)）之间的可比性。密切联系的部分原因是允许使用这些数据进行跨国比较。\n\nIn order to make the data more accessible to researchers and to facilitate such comparisons,\nwe the USC Gateway to Global Aging Data team, created the Harmonized CHARLS, a user-\nfriendly version of a subset of the CHARLS interviews. The Harmonized CHARLS initiative is\npart of a larger set of projects. With funding and support from the National Institute on Aging,\nwe have also created Harmonized HRS (USA), Harmonized MHAS (Mexico), Harmonized ELSA\n(England), Harmonized SHARE (Europe and Israel), Harmonized CRELES (Costa Rica),\nHarmonized KLoSA (South Korea), Harmonized JSTAR (Japan), Harmonized TILDA (Ireland),\nHarmonized LASI (India), and Harmonized MARS (Malaysia). Further information about these\nHarmonized data files with questionnaires and other searchable metadata is available on our\nwebsite, https://g2aging.org/.\n> [!NOTE]- 翻译\n> 为了使数据更易于研究人员访问并促进此类比较，我们 USC 全球老龄化数据门户网站团队创建了 Harmonized CHARLS，这是 CHARLS 访谈子集的用户友好版本。Harmonized CHARLS 计划是更大项目集的一部分。在国家老龄化研究所的资助和支持下，我们还创建了 Harmonized HRS（美国）、Harmonized MHAS（墨西哥）、Harmonized ELSA（英国）、Harmonized SHARE（欧洲和以色列）、Harmonized CRELES（哥斯达黎加）、Harmonized KLoSA（韩国）、Harmonized JSTAR（日本）、Harmonized TILDA（爱尔兰）、Harmonized LASI（印度）和 Harmonized MARS（马来西亚）。有关这些 Harmonized 数据文件及其问卷和其他可搜索元数据的更多信息，请访问我们的网站 https://g2aging.org/。\n\nIn creating the Harmonized data files, we have followed the RAND HRS and Harmonized HRS\nconventions of variable naming and data structure. The RAND HRS is a user-friendly version of\na subset of the HRS that the RAND Center for the Study of Aging created to increase usability.\nThe Harmonized HRS is a supplementary dataset to the RAND HRS, which also include a\nsubset of the HRS data, that the Gateway to Global Aging Data team has created to increase\nusability of a greater number of HRS variables. The Harmonized CHARLS includes variables\nwith a similar naming convention that mimics the RAND HRS, Harmonized HRS, and other\nHarmonized variables. This document describes these data.\n> [!NOTE]- 翻译\n> 在创建 Harmonized 数据文件时，我们遵循了 RAND HRS 和 Harmonized HRS 变量命名和数据结构的约定。RAND HRS 是 RAND 老龄化研究中心创建的 HRS 子集的用户友好版本，以提高可用性。Harmonized HRS 是 RAND HRS 的补充数据集，其中还包括一部分 HRS 数据，全球老龄化数据门户网站团队创建了该数据集，以提高更多 HRS 变量的可用性。Harmonized CHARLS 包括具有类似命名约定的变量，模仿 RAND HRS、Harmonized HRS 和其他 Harmonized 变量。本文档描述了这些数据。\n\nWe are grateful for the continuing support of and funding from NIA. In working with the\nCHARLS data, we greatly benefited from the help from Dr. Yaohui Zhao, Dr. Yafeng Wang, Dr.\nJohn Strauss, Dr. Albert Park and the CHARLS team members. We have greatly benefited\nfrom discussions with and the suggestions from our colleagues Arie Kapteyn, Marco\nAngrisani, Erik Meijer, and Bas Weerman. We would also like to acknowledge our current\nand former colleagues at the Gateway to Global Aging Data: Sidney Beaumaster, Sandy\nChien, Samuel Lau, and Ashley Lin.\n> [!NOTE]- 翻译\n> 我们感谢 NIA 的持续支持和资助。在使用 CHARLS 数据时，我们非常感谢赵耀辉博士、王亚峰博士、约翰·斯特劳斯博士、阿尔伯特·帕克博士和 CHARLS 团队成员的帮助。我们从与我们的同事 Arie Kapteyn、Marco Angrisani、Erik Meijer 和 Bas Weerman 的讨论和建议中受益匪浅。我们还要感谢全球老龄化数据门户网站的现任和前任同事：Sidney Beaumaster、Sandy Chien、Samuel Lau 和 Ashley Lin。\n\n#### Requested Acknowledgment 要求致谢\nWe ask all users of the Harmonized CHARLS to please inform our team of any written analysis using data from the Harmonized CHARLS or information from the Harmonized CHARLS Codebook by sending an email to papers@g2aging.org. We also ask users to include the following acknowledgement in their written work:\n> [!NOTE]- 翻译\n> 我们要求所有 使用 《Harmonized CHARLS》 的用户, 请通过发送邮件至 papers@g2aging.org 的方式告知我们的团队任何使用 《Harmonized CHARLS》 数据或《Harmonized CHARLS Codebook》信息的书面分析。我们还要求用户在书面作品中包含以下致谢：\n\n\"This analysis uses data or information from the Harmonized CHARLS dataset and Codebook, Version D as of June 2021 developed by the Gateway to Global Aging Data. The development of the Harmonized CHARLS was funded by the National Institute on Aging (R01 AG030153, RC2 AG036619, R03 AG043052). For more information, please refer to https://g2aging.org/.”\n> [!NOTE]- 翻译\n> “本分析使用了全球老龄化数据门户网站开发的截至 2021 年 6 月的 Harmonized CHARLS 数据集和代码手册版本 D 的数据或信息。Harmonized CHARLS 的开发得到了国家老龄化研究所 (R01 AG030153、RC2 AG036619、R03 AG043052) 的资助。有关更多信息，请访问 https://g2aging.org/。”\n\n#### CHARLS Version and Acknowledgment CHARLS 版本和致谢\nThis document used CHARLS Waves 1 through 4 as of June 2021. CHARLS is supported by Peking University, the National Natural Science Foundation of China, the National Institute on Aging, and the World Bank.\n> [!NOTE]- 翻译\n> 本文档使用了截至 2021 年 6 月的 CHARLS 第 1 至第 4 波数据。CHARLS 得到了北京大学、中国国家自然科学基金、美国国家老龄化研究所和世界银行的支持。\n#### Contents\n- PREFACE ........... 1\n- REQUESTED ACKNOWLEDGMENT ............ 2\n- CHARLS VERSION AND ACKNOWLEDGMENT .... 2\n- WHAT’S NEW IN VERSION D OF THE HARMONIZED CHARLS? ................. 5\n1. INTRODUCTION AND OVERVIEW ... 9\n    - 1.1. Gateway to Global Aging Data ...................10\n    - 1.2. Unit of Observation ...........11\n    - 1.3. Data File Structure ............11\n    - 1.4. Variable Naming Convention .....................11\n    - 1.5. Missing Values, Nonresponse, and Imputations .....13\n    - 1.6. Weighting and Accounting for Survey Design .................13\n    - 1.7. Availability of Stress Measures ..................14\n2. WEALTH AND INCOME VARIABLES .................... 15\n    - 2.1 Units of Observation and financial respondent......15\n    - 2.2. Currency ..................16\n3. STRUCTURE OF CODEBOOK ..... 17\n4. DISTRIBUTION AND TECHNICAL NOTES ............ 21\n5. DATA CODEBOOK ... 22\n- SECTION A: DEMOGRAPHICS AND IDENTIFIERS ... 23\n- SECTION B: HEALTH .... 76\n- SECTION C: HEALTH CARE UTILIZATION AND INSURANCE ..... 173\n- SECTION D: COGNITION ............... 203\n- SECTION E: FINANCIAL AND HOUSING WEALTH ... 223\n- SECTION F: INCOME AND CONSUMPTION ........... 290\n- SECTION G: FAMILY STRUCTURE ......................... 383\n- SECTION H: EMPLOYMENT HISTORY ................... 496\n- SECTION I: RETIREMENT .............. 538\n- SECTION J: PENSION .................... 556\n\n#### What’s New in Version D of the Harmonized CHARLS?\nVersion D incorporates the latest released version of CHARLS data, and adds variables for Wave 4. It contains 25,586 observations or rows. It is a Respondent-level file so each row represents a unique Respondent. It also adds new variables and makes adjustments and corrections.\n> [!NOTE]- 翻译\n> 版本 D 包含 CHARLS 数据的最新发布版本，并添加了第 4 波的变量。它包含 25,586 个观察值或行。它是一个受访者级别的文件，因此每一行代表一个唯一的受访者。它还添加了新变量并进行了调整和更正。\n  \nWe have added the following new sections to the file:\n> [!NOTE]- 翻译\n> 我们在文件中添加了以下新部分：\n\n**Physical Measures:**\n> [!NOTE]- 翻译\n> 身体测量\n\n- We created the Physical Measures section, which contains variables pertaining to timed walk measurements, blood pressure measurements, hand grip strength measurements, height and weight measurements, waist measurements, lung function measurements, balance tests, and chair stand tests.\n> [!NOTE]- 翻译\n> 我们创建了身体测量部分，其中包含与计时步态测量、血压测量、握力测量、身高和体重测量、腰围测量、肺功能测量、平衡测试和椅子站立测试相关的变量。\n\n**Assistance and Caregiving:**\n- We created the Assistance and Caregiving section, which contains variables pertaining to receiving any care for individual ADLS, using assistive devices for ADLS, receiving any care for individual IADLS, future ADL needs, receiving any care for ADLs or IADLs, receiving any informal care, receiving informal care from spouse, receiving informal care from children or grandchildren, receiving informal care from non-relatives, receiving any formal care, receiving formal care from paid professionals, receiving formal care from unpaid professionals, paid help, providing care for parents and grandchildren (previously in Family Structure section), and providing informal care to sick or disabled persons.\n> [!NOTE]- 翻译\n> 我们创建了协助和护理部分，其中包含与接受个人 ADLS 护理、使用 ADLS 辅助设备、接受个人 IADLS 护理、未来 ADL 需求、接受 ADLs 或 IADLs 护理、接受任何非正式护理、接受配偶的非正式护理、接受来自子女或孙子女的非正式护理、接受来自非亲属的非正式护理、接受任何正式护理、接受来自付费专业人员的正式护理、接受来自非付费专业人员的正式护理、付费帮助、为父母和孙子女提供护理（以前在家庭结构部分）以及为生病或残疾人士提供非正式护理相关的变量。\n\n**Stress:**\n- We created the Stress section, which contains variables pertaining to\nchildhood/lifetime stressful events and self-rated childhood health and finances.\n> [!NOTE]- 翻译\n> 我们创建了压力部分，其中包含与童年/终生压力事件和自我评估的童年健康和财务相关的变量。\n\n**Psychosocial:**\n- We created the Psychosocial section, which contains variables pertaining to depressive symptoms using CES-D (previously in the Health section) and single life satisfaction question. This work was done in collaboration with Jacqui Smith and Lindsay Ryan of the University of Michigan.\n> [!NOTE]- 翻译\n> 我们创建了心理社会部分，其中包含与使用 CES-D 的抑郁症状（以前在健康部分）和单一生活满意度问题相关的变量。这项工作是与密歇根大学的 Jacqui Smith 和 Lindsay Ryan 合作完成的。\n\nWe have added the following variables to the file:\n\n**Demographics and Identifiers:**\n- We added HACOHORT_C, which is the cohort in which the household was\noriginally sampled.\n- We added **RAFBYEAR**, **RAFBMONTH**, and **RAFBDAY**, indicating the wave at which the respondent reported the values used in **RABYEAR**, **RABMONTH**, and **RABDAY**, respectively.\n- We added **RwNHMLIV** for all available waves, indicating whether the respondent lives in an institution.\n- We added RwRXHIBP, RwRXHIBP_C, RwRXDIABI, RwRXDIAB, RwRXDIAB_C,\nRwCNCRMEDS, RwCNCRMEDS_C, RwCNCRCHEM, RwCNCRSURG,\nRwCNCRRADN, RwRXLUNG, RwRXLUNG_C, RwRXHEART, RwRXHEART_C,\nRwRXSTROK, RwRXSTROK_C, RwTRPSYCH, RwRXARTHR, RwRXARTHR_C,\nRwRXDYSLIP, RwRXDYSLIP_C, RwRXLIVER, RwRXLIVER_C, RwRXKIDNEY,\nRwRXKIDNEY_C, RwRXDIGEST, RwRXDIGEST_C, RwRXMEMRY, and\nRwRXMEMRY_C for all available waves, indicating whether and how the\nrespondent was treated for high blood pressure, diabetes, cancer, lung\ncondition, heart problems, stroke, psychiatric condition, arthritis, dyslipidemia,\nliver disease, kidney disease, digestive disease, and memory problems.\n- We added RwDRINKR_C at all available waves, indicating the highest range of the number of drinks per day that the respondent reports for any one of three types of alcohol (liquor, beer, or wine).\n- We added RwDRINKNR at all available waves, indicating whether the respondent has ever taken a drink first thing in the morning to steady nerves or get rig of a hangover.\n> [!NOTE]- 翻译\n> **人口统计资料和标识符:**\n> - 我们添加了 HACOHORT_C，它是最初抽样的家庭所在的队列。\n> - 我们添加了 **RAFBYEAR**、**RAFBMONTH** 和 **RAFBDAY**，分别表示受访者报告用于 **RABYEAR**、**RABMONTH** 和 **RABDAY** 的值的波次。\n> - 我们为所有可用波次添加了 **RwNHMLIV**，表示受访者是否住在机构中。\n> - 我们添加了 RwRXHIBP、RwRXHIBP_C、RwRXDIABI、RwRXDIAB、RwRXDIAB_C、RwCNCRMEDS、RwCNCRMEDS_C、RwCNCRCHEM、RwCNCRSURG、RwCNCRRADN、RwRXLUNG、RwRXLUNG_C、RwRXHEART、RwRXHEART_C、RwRXSTROK、RwRXSTROK_C、RwTRPSYCH、RwRXARTHR、RwRXARTHR_C、RwRXDYSLIP、RwRXDYSLIP_C、RwRXLIVER、RwRXLIVER_C、RwRXKIDNEY、RwRXKIDNEY_C、RwRXDIGEST 和 RwRXDIGEST_C，表示受访者是否以及如何治疗高血压、糖尿病、癌症、肺部疾病、心脏病、中风、精神病状况、关节炎、高脂血症、肝病、肾病和消化系统疾病。\n> - 我们添加了 RwRXMEMRY 和 RwRXMEMRY_C，表示受访者是否以及如何治疗记忆问题。\n> - 我们为所有可用波次添加了 RwDRINKR_C，表示受访者报告的三种类型的酒精（烈酒、啤酒或葡萄酒）中任何一种的每日饮酒数量的最高范围。\n> - 我们添加了 RwDRINKNR，表示受访者是否曾经在早上第一件事喝酒以稳定神经或摆脱宿醉。\n\n**Financial and Housing Wealth:**\n- We added HwABORR at all available waves, indicating the total amount of\npersonal loans owed to others by the respondent and spouse.\n> [!NOTE]- 翻译\n> **金融和住房财富:**\n> - 我们在所有可用波添加了 HwABORR，表示受访者和配偶欠他人的个人贷款总额。\n\n**Family Structure:**\n- We added RAMOMEDUCL and RADADEDUCL, indicating the highest level of\neducation completed by the respondent’s mother and father. These variables\nuse a harmonized scale that is a simplified version of the 1997 International\nStandard Classification of Education (ISCED) codes.\n- We added RAMOMOCCUP_C and RADADOCCUP_C, indicating the occupation of\nthe respondent’s mother and father before the respondent was age 17.\n> [!NOTE]- 翻译\n> **家庭结构:**\n> - 我们添加了 RAMOMEDUCL 和 RADADEDUCL，表示受访者母亲和父亲完成的最高教育水平。这些变量使用的是一个协调的量表，这是 1997 年国际教育分类标准 (ISCED) 代码的简化版本。\n> - 我们添加了 RAMOMOCCUP_C 和 RADADOCCUP_C，表示受访者 17 岁之前母亲和父亲的职业。\n\n**Employment History:**\n- We added RwJHOURTOT at all available waves, indicating the total number of\nhours the respondent works per week on their main job and other jobs.\n- We added RwJGOVTEMP at all available waves, indicating whether the\nrespondent is employed by the government.\n- We added RwJSALARY_C at all available waves, indicating whether the\nrespondent is paid salary or wages in their current job.\n- We added RwJBONUS at all available waves, indicating the amount of bonuses\nthe respondent received in the past year.\n- We added RwJMSICK at all available waves, indicating whether the respondent\nmissed work in the past year due to health problems.\n- We added RwJNSICKAGR, RwJNSICKEMP, and RwJNSICKSF at all available\nwaves, indicating the number of days of agricultural work, employed work, and\nself-employed work the respondent missed in the past year due to health\nproblems.\n- We added RwJBGYR and RwJBGMO at all available waves, indicating the year\nand month the respondent began their current job.\n- We added RwJRSLEFT and RwJRSLEFT_C at all available waves, indicating the\nreason the respondent left their last employer, if they are currently not working.\n> [!NOTE]- 翻译\n> **就业历史:**\n> - 我们在所有可用波次添加了 RwJHOURTOT，表示受访者每周在主要工作和其他工作上工作的总小时数。\n> - 我们在所有可用波次添加了 RwJGOVTEMP，表示受访者是否受雇于政府。\n> - 我们在所有可用波次添加了 RwJSALARY_C，表示受访者在当前工作中是否领取薪水或工资。\n> - 我们在所有可用波次添加了 RwJBONUS，表示受访者在过去一年中获得的奖金金额。\n> - 我们在所有可用波次添加了 RwJMSICK，表示受访者在过去一年中因健康问题缺勤。\n> - 我们在所有可用波次添加了 RwJNSICKAGR、RwJNSICKEMP 和 RwJNSICKSF，表示受访者因健康问题在过去一年中缺勤的农业工作、雇佣工作和自雇工作的天数。\n> - 我们在所有可用波次添加了 RwJBGYR 和 RwJBGMO，表示受访者开始当前工作的年份和月份。\n> - 我们在所有可用波次添加了 RwJRSLEFT 和 RwJRSLEFT_C，表示受访者离开上一个雇主的原因（如果他们目前没有工作）。\n\n**Retirement:**\n- We added RwFRETF_C at all available waves, indicating whether the\nrespondent’s previous report that they completed retirement or receding\nposition procedures is disputed at the current interview or a later interview.\n- We added RwWKAFTRET at all available waves, indicating whether the\nrespondent worked after they completed the retirement process.\n- We added RwRETRS_C at all available waves, indicating the respondent’s main\nreason for processing early or internal retirement.\n> [!NOTE]- 翻译\n> **退休:**\n> - 我们在所有可用波次添加了 RwFRETF_C，表示受访者之前报告的完成退休或退位程序在当前访谈或后续访谈中是否存在争议。\n> - 我们在所有可用波次添加了 RwWKAFTRET，表示受访者在完成退休程序后是否工作。\n\nWe have made the following adjustments, improvements, and corrections to the data and\n>  [!NOTE]- 翻译\n> 我们对数据和文档进行了以下调整、改进和更正：\n\ndocumentation:\n\n**All Sections:**\n- In version C of the Harmonized CHARLS, we had named the 2015 wave of\nCHARLS Wave 4, coinciding with that wave’s naming in the CHARLS\ndocumentation. Since CHARLS now refers to the 2015 wave as Wave 3 of\nCHARLS, we have renamed all variables for this wave to pertain to Wave 3, and\nnow refer to the 2018 wave as Wave 4.\n> [!NOTE]- 翻译\n> **所有部分:**\n> 在 Harmonized CHARLS 的版本 C 中，我们将 2015 年的 CHARLS 第 4 波命名为与该波在 CHARLS 文档中的命名相一致。由于 CHARLS 现在将 2015 年的波称为 CHARLS 的第 3 波，我们已将该波的所有变量重命名为与第 3 波相关，并且现在将第 2018 波称为第 4 波。\n\n**Demographics and Identifiers:**\n- We renamed HHID_W1 to HOUSEHOLDID_W1, indicating the 9-character\nhousehold identifier at Wave 1.\n- We adjusted RABYEAR, RABMONTH, and RABDAY so that Chinese lunar\ncalendar birth dates are converted to solar (Gregorian) calendar birth dates. This\nchange impacts the value of RwAGEY.\n- We adjusted RADYEAR and RADMONTH so that Chinese lunar calendar death\ndates are converted to solar (Gregorian) calendar death dates.\n> [!NOTE]- 翻译\n> **人口统计资料和标识符:**\n> - 我们将 HHID_W1 重命名为 HOUSEHOLDID_W1，表示第 1 波的 9 位字符家庭标识符。\n> - 我们调整了 RABYEAR、RABMONTH 和 RABDAY，以便将农历出生日期转换为阳历（公历）出生日期。此更改会影响 RwAGEY 的值。\n> - 我们调整了 RADYEAR 和 RADMONTH，以便将农历死亡日期转换为阳历（公历）死亡日期。\n\n**Health:**\n- We moved RwBMI, RwHEIGHT, and RwWEIGHT, indicating the respondent’s\nbody mass index, height in meters, and weight in kilograms, respectively, to the\nnew Physical Measures section. Also, we renamed RwBMI to RwMBMI,\nRwHEIGHT to RwMHEIGHT, and RwWEIGHT to RwMWEIGHT to identify that\nthese values were derived from measurements conducted by CHARLS as\nopposed to self-reported values.\n- We renamed RwDRINK to RwDRINKEV to align better with ever drinking\nvariables in other Harmonized dataets.\n> [!NOTE]- 翻译\n> **健康:**\n> - 我们将 RwBMI、RwHEIGHT 和 RwWEIGHT 移动到新的身体测量部分，分别表示受访者的身体质量指数、以米为单位的身高和以千克为单位的体重。此外，我们将 RwBMI 重命名为 RwMBMI，将 RwHEIGHT 重命名为 RwMHEIGHT，将 RwWEIGHT 重命名为 RwMWEIGHT，以识别这些值是由 CHARLS 进行测量得出的，而不是自我报告的值。\n> - 我们将 RwDRINK 重命名为 RwDRINKEV，以更好地与其他 Harmonized 数据集中的饮酒变量对齐。\n\n**Health Care Utilization and Insurance:**\n- We renamed RwORDOC1M to RwTRDMED1M, indicating whether the\nrespondent visit a Chinese medicine hospital in the past month.\n- We renamed RwORDTIM1M to RwTRDMED1M, indicating the number of times\nthe respondent visited a Chinese medicine hospital in the past month.\n> [!NOTE]- 翻译\n> **医疗保健利用和保险:**\n> - 我们将 RwORDOC1M 重命名为 RwTRDMED1M，表示受访者在过去一个月是否去过中医医院。\n> - 我们将 RwORDTIM1M 重命名为 RwTRDMED1M，表示受访者在过去一个月内去中医医院的次数。\n\n**Financial and Housing Wealth:**\n- We updated the values of CyyyyCPINDEX based on updated values from the\nOECD. We continue to use 2010 as the base year.\n> [!NOTE]- 翻译\n> **金融和住房财富:**\n> - 我们根据 OECD 的最新值更新了 CyyyyCPINDEX 的值。我们继续使用 2010 年作为基年。\n\n**Family Structure:**\n- We renamed HwPCNTF to HwPCNT, indicating whether the respondent and\nspouse had any weekly contact with parents/parents-lin-law in person, to avoid\nconfusion with non-comparable HwPCNTF variables in other Harmonized\ndatasets.\n- We moved HwGRCARE and HwGKCARE, indicating whether the respondent gave\ncare to parents/parents-in-law and grandchildren, respectively, to the new\nAssistance and Caregiving section. Also, we renamed HwGRCARE to HwGPCARE.\n- Financial support to and from others at Wave 3, H3FOAMT, H3FOANY,\nH3TOAMT, and H3TOANY (previously named H4FOAMT, H4FOANY, H4TOAMT,\nand H4TOANY), were adjusted to also include support to and from siblings.\n> [!NOTE]- 翻译\n> **家庭结构:**\n> - 我们将 HwPCNTF 重命名为 HwPCNT，表示受访者和配偶是否与父母/岳父母有任何面对面的每周联系，以避免与其他 Harmonized 数据集中不可比较的 HwPCNTF 变量混淆。\n> - 我们将 HwGRCARE 和 HwGKCARE 移动到新的协助和护理部分，分别表示受访者是否照顾父母/岳父母和孙子女。此外，我们将 HwGRCARE 重命名为 HwGPCARE。\n> - 第 3 波对他人提供和接受的经济支持 H3FOAMT、H3FOANY、H3TOAMT 和 H3TOANY（以前命名为 H4FOAMT、H4FOANY、H4TOAMT 和 H4TOANY）进行了调整，以包括对兄弟姐妹的支持。\n\n**Employment History:**\n- We adjusted RwLBRF_C at all waves, indicating the respondent’s labor force\nstatus, to include both an agricultural employed work and an agricultural self-\nemployed work category instead of one general agricultural work category.\n> [!NOTE]- 翻译\n> **就业历史:**\n> - 我们在所有波次调整了 RwLBRF_C，表示受访者的劳动参与状态，以包括农业雇佣工作和农业自雇工作类别，而不是一个一般的农业工作类别。\n\n**Retirement:**\n- We removed RwRPLYNR, indicating the year when the respondent plans to stop\nworking.\n> [!NOTE]- 翻译\n> **退休:**\n> - 我们删除了 RwRPLYNR，表示受访者计划停止工作的年份。\n\n#### Introduction and Overview\nThis report documents the Harmonized CHARLS data files, a streamlined collection of\nvariables derived from the China Health and Retirement Longitudinal Study (CHARLS).\nCHARLS is a panel survey of people aged 45 and over and their partners regardless of age in\nChina. The main goal is to provide a high quality nationally representative sample of\nChinese residents’ data to serve the needs of scientific research on health, economic\nposition, and quality of life as people age. The survey elicits information about\ndemographics, income, assets, health, cognition, family structure and connections, health\ncare use and costs, housing, job status and history, expectations, biomarkers, and insurance.\n> [!NOTE]- 翻译\n> 本报告记录了 Harmonized CHARLS 数据文件，这是从中国健康与退休纵向研究 (CHARLS) 派生的变量的精简集合。CHARLS 是一项针对 45 岁及以上人群及其伴侣（无论年龄）的面板调查。主要目标是提供高质量的全国代表性样本，以满足科学研究对健康、经济状况和生活质量的需求。调查收集有关人口统计、收入、资产、健康、认知、家庭结构和联系、医疗保健使用和成本、住房、工作状态和历史、预期、生物标志物和保险的信息。\n\nCHARLS is supported by Peking University, the National Natural Science Foundation of\nChina, the Behavioral and Social Research Division of the National Institute on Aging, and\nthe World Bank. CHARLS shares the same basic guidelines as the Health and Retirement\nStudy (HRS) and related aging surveys, such as the English Longitudinal Study of Aging\n(ELSA) in England) and the Survey of Health, Aging and Retirement in Europe (SHARE) in\nEurope and Israel.\n> [!NOTE]- 翻译\n> CHARLS 得到了北京大学、中国国家自然科学基金、中国国家老龄化研究所行为与社会研究部和世界银行的支持。CHARLS 与健康与退休研究 (HRS) 和相关的老龄化调查（例如，英国的老龄化纵向研究 (ELSA) 和欧洲和以色列的健康、老龄化和退休调查 (SHARE)）具有相同的基本准则。\n\nThe first wave of CHARLS was conducted between June 2011 and March 2012. The sample\npopulation was selected as part of a stratified, multistage probability design. The first\ncomponent of this sampling framework was the probability proportion to size (PPS)\nsampling of all county-level unit except for Tibet after stratifying by region, characteristic of\nthe county (urban or rural), and per-capita gross domestic product (GDP). Households were\nselected within PSUs using a CHARLS-designed mapping/listing software (CHARLS-GIS) that\nuses Google Earth images to list all dwelling units in all residential buildings to create\nsampling frames. If the sampled household had occupants older than 40, one of them was\nrandomly selected. If the selected person was aged 45 or older, they became a respondent.\nIf the selected person was between age 40 and 44, they were reserved as a refreshment\nsample. This initial sample included 17,708 respondents in 10,257 households in 450\nvillages/urban communities in 150 counties/districts in 28 provinces. The second wave was\nconducted between July 2013 and January 2014 and included a refreshment sample\nconsisting of individuals aged between 43 and 44 at Wave 1 and their partners. The third\nwave was conducted between July 2015 and January 2016 and included a refreshment\nsample consisting of individuals aged between 41 and 42 at Wave 1 and their partners. The\nfourth wave was conducted between July and November 2018 and included a refreshment\nsample consisting of individuals who were 40-years-old at Wave 1 and their partners.\n> [!NOTE]- 翻译\n> CHARLS 的第一波调查于 2011 年 6 月至 2012 年 3 月进行。样本人口是分层的多阶段概率设计的一部分。该抽样框架的第一个组成部分是在按地区、县的特征（城市或农村）和人均国内生产总值 (GDP) 分层后，对除西藏以外的所有县级单位进行按规模概率比例 (PPS) 抽样。使用 CHARLS 设计的映射/列表软件 (CHARLS-GIS) 在 PSU 内选择家庭，该软件使用 Google 地球图像列出所有住宅建筑中的所有居住单元以创建抽样框架。如果抽样家庭中有 40 岁以上的居民，则随机选择其中一人。如果选定的人年龄在 45 岁或以上，则他们成为受访者。如果选定的人年龄在 40 岁到 44 岁之间，则他们被保留为补充样本。该初始样本包括来自 28 个省份的 150 个县/区的 10,257 个家庭中的 17,708 名受访者。第二波调查于 2013 年 7 月至 2014 年 1 月进行，并包括由第 1 波中年龄在 43 岁和 44 岁之间的个人及其伴侣组成的补充样本。第三波调查于 2015 年 7 月至 2016 年 1 月进行，并包括由第 1 波中年龄在 41 岁和 42 岁之间的个人及其伴侣组成的补充样本。第四波调查于2018年7月至11月进行，包括由第1波中40岁的人及其伴侣组成的补充样本。\n\nThe data include any individual interviewed at least once. This includes respondents and\ncurrent and former spouses regardless of age.\n> [!NOTE]- 翻译\n> 数据包括至少接受过一次采访的任何个人。这包括受访者和当前和前配偶（无论年龄）。\n\nThe Harmonized CHARLS data file incorporates the demographic background data, family\ninformation data, family transfer data, health care and insurance data, health status and\nfunction data, household income data, household roster data, housing characteristics data,\nindividual income data, weight data, and work, retirement and pension data. It does not\ninclude any data which is not for public release.\n> [!NOTE]- 翻译\n> Harmonized CHARLS 数据文件包含人口统计背景数据、家庭信息数据、家庭转移数据、医疗保健和保险数据、健康状况和功能数据、家庭收入数据、家庭名册数据、住房特征数据、个人收入数据、权重数据以及工作、退休和养老金数据。它不包括任何不公开发布的数据。\n##### Gateway to Global Aging Data\nThe Health and Retirement Study (HRS) has achieved remarkable scientific success, as\ndemonstrated by an impressive number of users, research studies, and publications using it. Its\nsuccess has generated substantial interest in collecting similar data as population aging has\nprogressed in every region of the world.\n> [!NOTE]- 翻译\n> 健康与退休研究 (HRS) 取得了显著的科学成功，这一点通过大量用户、研究和使用它的出版物得到了证明。随着世界各地人口老龄化的加剧，它的成功引起了人们对收集类似数据的极大兴趣。\n\nThe result has been a number of surveys designed to be comparable with the HRS: the Mexican\nHealth & Aging Survey (MHAS), the English Longitudinal Study of Ageing (ELSA), the Survey of\nHealth, Ageing and Retirement in Europe (SHARE), the Korean Longitudinal Study of Aging\n(KLoSA), the Japanese Study on Aging Retirement (JSTAR), the Irish Longitudinal Study on\nAgeing (TILDA), the China Health and Retirement Longitudinal Study (CHARLS), Health and\nAging in Africa: A Longitudinal Study of an INDEPTH Community in South Africa (HAALSI), the\nBrazilian Longitudinal Study of Ageing (ELSI), Healthy Ageing in Scotland (HAGIS), the Northern\nIreland Cohort Longitudinal Study of Ageing (NICOLA), the Longitudinal Aging Study in India\n(LASI), and the Malaysia Ageing and Retirement Survey (MARS). The overview of this family of\nsurveys, including their research designs, samples, and key domains can be found in Lee,\nPhillips, and Wilkens (2019).\n> [!NOTE]- 翻译\n> 结果是一些旨在与 HRS 可比的调查：墨西哥健康与老龄化调查 (MHAS)、英国老龄化纵向研究 (ELSA)、欧洲健康、老龄化和退休调查 (SHARE)、韩国老龄化纵向研究 (KLoSA)、日本老龄化退休研究 (JSTAR)、爱尔兰老龄化纵向研究 (TILDA)、中国健康与退休纵向研究 (CHARLS)、南非 INDEPTH 社区的健康与非洲老龄化：纵向研究 (HAALSI)、巴西老龄化纵向研究 (ELSI)、苏格兰健康老龄化 (HAGIS)、北爱尔兰队列纵向研究 (NICOLA)、印度老龄化纵向研究 (LASI) 和马来西亚老龄化与退休调查 (MARS)。有关这组调查的概述，包括它们的研究设计、样本和关键领域，请参见 Lee、Phillips 和 Wilkens（2019 年）。\n\nAs these surveys were designed with harmonization as a goal, they provide remarkable\nopportunities for cross-country studies. The value of comparative analyses, especially the\nopportunities they offer for learning lessons resulting from policies adopted elsewhere, is\nwidely recognized. Yet there are only a limited number of empirical studies exploiting such\nopportunities. This is partly due to the difficulty associated with learning multiple surveys and\nthe policies and institutions of each country.\n> [!NOTE]- 翻译\n> 由于这些调查的设计目标是协调，因此它们为跨国研究提供了显着的机会。比较分析的价值，尤其是它们为从其他地方采用的政策中吸取教训所提供的机会，得到了广泛认可。然而，利用这些机会的实证研究数量有限。这在一定程度上是由于学习多项调查以及每个国家的政策和制度所带来的困难。\n\nIdentifying comparable questions across surveys is the first step toward cross-country analyses.\nThe Gateway to Global Aging Data (Gateway) helps users understand and use these large-scale\npopulation surveys on health and retirement. The Gateway includes several tools to facilitate\ncross-national health and retirement research. It includes a digital library of survey questions\nfor all participating surveys. Its search engine enables users to find relevant survey questions.\nThe Gateway also includes a concordance with information comparing measures within and\nacross surveys over time. Using these tools, researchers can identify all questions related to\nparticular key words or within a domain. The Gateway also includes population and sub-\npopulation estimates for key harmonized variables and presents them in graphs and tables that\ncan be downloaded.\n> [!NOTE]- 翻译\n> 确定调查中可比较的问题是跨国分析的第一步。全球老龄化数据门户 (Gateway) 帮助用户理解和使用这些大规模人口调查数据。该门户包括几个工具来促进跨国健康和退休研究。它包括所有参与调查的调查问题的数字图书馆。其搜索引擎使用户能够找到相关的调查问题。该门户还包括一个一致性表，其中包含有关随时间推移在调查中和调查之间比较措施的信息。使用这些工具，研究人员可以识别与特定关键字或领域相关的所有问题。该门户还包括关键协调变量的人口和子群体估计，并以图形和表格的形式呈现，可以下载。\n\nThe Gateway can be accessed at https://g2aging.org/. For more information about using the\nGateway visit the Help page. For more information about obtaining the Harmonized CHARLS or\ndownloading the Stata file used to create the Harmonized CHARLS using the Gateway see\n“Chapter 4.Distribution and Technical Notes.”\n> [!NOTE]- 翻译\n> 可以通过 https://g2aging.org/ 访问 Gateway。有关使用 Gateway 的更多信息，请访问帮助页面。有关获取 Harmonized CHARLS 或下载用于使用 Gateway 创建 Harmonized CHARLS 的 Stata 文件的更多信息，请参阅“第 4 章。分发和技术说明。”\n##### Unit of Observation \nLike in the HRS, an age-eligible individual is sampled and then this individual and their spouse or\npartner regardless of age is interviewed, but no other household members, even if they are\nage-eligible. We distinguish between three units of observation: individual, couple, and\nhousehold. A “couple” is a “single individual or individual with his/her spouse. A “household”\nincludes the single individual, spouse, and all other household members.\n> [!NOTE]- 翻译\n> 像 HRS 一样，选择一个符合年龄要求的个人进行抽样，然后采访该个人及其配偶或伴侣（无论年龄如何），但不采访其他家庭成员，即使他们符合年龄要求。我们区分三种观察单位：个人、夫妻和家庭。“夫妻”是“单个个人或与其配偶的个人”。“家庭”包括单个个人、配偶和所有其他家庭成员。\n##### Data File Structure\nThe Harmonized CHARLS data contain four waves of CHARLS. The data are stored in a “fat\nformat” where each observation represents one respondent. The unit of observation is the\nindividual. Each individual is uniquely identified by the unique identifier “ID”. Households are\nidentified by HHID. Couples are identified by wave-specific HwCOUPID where “w” refers to the\nspecific wave. Households are identified by the unique identifier “HOUSEHOLDID”. It is\nimportant to note that unlike the HRS, households in the CHARLS might include multiple\ncouples and other household members.\n> [!NOTE]- 翻译\n> Harmonized CHARLS 数据包含四波 CHARLS。数据以“胖格式”存储，其中每个观察值代表一个受访者。观察单位是个人。每个个体都由唯一标识符“ID”唯一标识。家庭由 HHID 标识。夫妻由特定波次的 HwCOUPID 标识，其中“w”指的是特定波次。家庭由唯一标识符“HOUSEHOLDID”标识。重要的是要注意，与 HRS 不同，CHARLS 中的家庭可能包括多个夫妻和其他家庭成员。\n##### Variable Naming Convention\nWith few exceptions, variable names in the Harmonized CHARLS Data follow a consistent\npattern. The first character indicates whether the variable refers to the reference person (“R”),\nspouse (“S”), a financial unit couple (“H”), and the full household (“HH”).1 2 The second\ncharacter indicates the wave to which the variable pertains: “1”, “2”, “3”, “4”, or “A”. The “A”\nindicates “all,” i.e., the variable is not specific to any single wave. An example is RABDATE, the\nbirth date of the respondent. The remaining characters describe the concept that the variable\ncaptures. For example:\n> [!NOTE]- 翻译\n> 变量命名约定\n> 除少数例外，Harmonized CHARLS 数据中的变量名称遵循一致的模式。第一个字符表示变量是指参考人（“R”）、配偶（“S”）、财务单位夫妻（“H”）还是整个家庭（“HH”）。第二个字符表示变量所涉及的波次：“1”、“2”、“3”、“4”或“A”。 “A”表示“全部”，即该变量不特定于任何单一波次。一个例子是 RABDATE，受访者的出生日期。其余字符描述变量捕获的概念。例如：\n\nS1HLTHLM\n> S: Spouse <br/>\n> 1: Wave 1 (2011) <br/>\n> HLTHLM: Health problem limiting work\n\nVariable S1HLTHLM captures whether the spouse of the reference person experiences an\nimpairment or health problem that limits the kind or amount of paid work he/she can do. The\nname of the variable does not indicate who provided the information. For example, the\nspouse’s health problem may have been reported by the spouse himself or herself, or it may\nhave been reported by the reference person as a proxy.\n> [!NOTE]- 翻译\n> 变量 S1HLTHLM 捕获参考人配偶是否经历了限制他/她可以做的有偿工作的种类或数量的损伤或健康问题。变量的名称没有指明谁提供了信息。例如，配偶的健康问题可能是由配偶本人报告的，也可能是由参考人作为代理人报告的。\n\nIn the text below, we may refer to variables such as SwHLTHLM for example, without specifying\nthe wave. This reference points at the group of variables S1HLTHLM, S2 HLTHLM, S3 HLTHLM,\nand S4 HLTHLM.\n> [!NOTE]- 翻译\n> 在下面的文本中，我们可能会引用变量，例如 SwHLTHLM，而不指定波次。此引用指向变量组 S1HLTHLM、S2 HLTHLM、S3 HLTHLM 和 S4 HLTHLM。\n\nVariable labels also follow a consistent pattern. The first characters denote the name of the\nvariable, followed by a colon. The remainder of the label describes the concept that the\nvariable captures. For example, the variable label of S1HLTHLM is:\n> [!NOTE]- 翻译\n> 变量标签也遵循一致的模式。前几个字符表示变量的名称，后跟冒号。标签的其余部分描述变量捕获的概念。例如，S1HLTHLM 的变量标签是：\n```math\nS1HLTHLM:W1\\ Hlth\\ problems\\ limit\\ work\n```\nIt may seem duplicative to include the name of the variable and the wave in the variable label.\nHowever, statistical packages often suppresses the variable name and instead uses its label in\nthe presentation of results.\n> [!NOTE]- 翻译\n> 在变量标签中包含变量名称和波次似乎是重复的。然而，统计软件包通常会抑制变量名称，而是使用其标签来呈现结果。\n\nVariable names in the Harmonized CHARLS are generally based on the variable name used in\nthe RAND HRS (Bugliari et al, 2021) or Harmonized HRS (Beaumaster et al, 2018) for the same\nmeasure. Measures which are exactly or near-exactly comparable between the Harmonized\nCHARLS and RAND HRS or Harmonized HRS use the exact same name. For instance, RABYEAR is\nthe variable name for the respondent birth year in both the Harmonized CHARLS, as well as the\nRAND HRS. If the Harmonized CHARLS measure is deemed only somewhat comparable with the\nRAND HRS or Harmonized HRS version of that measure, the variable name in the Harmonized\nCHARLS will often end in “_C.” This variable name suffix indicates some CHARLS-specific\ndifference with the RAND HRS or Harmonized HRS version of this measure. For example, the\nHarmonized CHARLS variable for an ADL summary is named RwADLA_C, while the RAND HRS\nvariable is named RwADLA. The reason for this difference in variable name is that the CHARLS\nused different components for this summary variable. Other reasons for Harmonized CHARLS-\nspecific variable names include: differences in survey questions, differences in survey routing,\nand whether both sets of variables use imputed values. Harmonized CHARLS-specific variable\nnames are used to notify users that there are substantial differences between the RAND HRS or\nHarmonized HRS and Harmonized CHARLS measures and comparability between these\nmeasures is not straight-forward.\n> [!NOTE]- 翻译\n> Harmonized CHARLS 中的变量名称通常基于 RAND HRS（Bugliari 等，2021 年）或 Harmonized HRS（Beaumaster 等，2018 年）中用于相同测量的变量名称。Harmonized CHARLS 和 RAND HRS 或 Harmonized HRS 之间完全或近乎完全可比的测量使用完全相同的名称。例如，RABYEAR 是受访者出生年份的变量名称，在 Harmonized CHARLS 和 RAND HRS 中都是如此。如果 Harmonized CHARLS 测量被认为仅与 RAND HRS 或 Harmonized HRS 版本的测量部分可比，则 Harmonized CHARLS 中的变量名称通常以“_C”结尾。此变量名称后缀表示与 RAND HRS 或 Harmonized HRS 版本之间存在一些 CHARLS 特定差异。 例如，Harmonized CHARLS 的 ADL 摘要变量名为 RwADLA_C，而 RAND HRS 变量名为 RwADLA。变量名称不同的原因是 CHARLS 使用了不同的组件来计算该摘要变量。Harmonized CHARLS 特定变量名称的其他原因包括：调查问题、调查路由和两个变量集是否使用插补值之间的差异。Harmonized CHARLS 特定变量名称用于通知用户 RAND HRS 或 Harmonized HRS 与 Harmonized CHARLS 测量之间存在实质性差异，并且这些测量之间的可比性并不简单。\nThe Harmonized CHARLS includes some variables without Harmonized CHARLS-specific variable\nnames even though the Harmonized CHARLS measure is significantly different from the RAND HRS or Harmonized HRS measure of the same name. In particular, wealth and income measures\nin the Harmonized CHARLS do not use Harmonized CHARLS-specific variable names even\nthough wealth and income measures in the Harmonized CHARLS are expressed in Chinese Yuan,\nwhile income and wealth measures in the RAND HRS or Harmonized HRS are always expressed\nin nominal dollars. Users should always check the “Differences with RAND HRS/Harmonized\nHRS” section of each measure before comparing any Harmonized CHARLS measure to the RAND\nHRS version of the same measures or any other Harmonized Dataset version of the same\nmeasure.\n> [!NOTE]- 翻译\n> 尽管 Harmonized CHARLS 测量与 RAND HRS 或 Harmonized HRS 测量有显着不同，但 Harmonized CHARLS 中的一些变量没有 Harmonized CHARLS 特定的变量名称。特别是，Harmonized CHARLS 中的财富和收入测量没有使用 Harmonized CHARLS 特定的变量名称，即使 Harmonized CHARLS 中的财富和收入测量以人民币表示，而 RAND HRS 或 Harmonized HRS 中的收入和财富测量总是以名义美元表示。用户在将任何 Harmonized CHARLS 测量与 RAND HRS 版本或任何其他 Harmonized 数据集版本进行比较之前，应始终检查每个测量值的“与 RAND HRS/Harmonized HRS 的差异”部分。\n\n##### Missing Values, Nonresponse, and Imputations 缺失值、非响应和插补\nVariables may contain missing values for several reasons. Stata, SAS, and SPSS offer the\ncapability to distinguish multiple types of missing values, and we have attempted to record as\nmuch information as possible. Generally, the codes adhere to the classification in Table 1.\n> [!NOTE]- 翻译\n> 变量可能由于多种原因而包含缺失值。Stata、SAS 和 SPSS 提供区分多种类型缺失值的功能，我们已尽力记录尽可能多的信息。通常，代码遵循表 1 中的分类。\n\nTable 1. Missing Codes\n| Code | Reason for Missing |\n| ---- | ------------------ |\n| .    | Missing            |\n| .a   | Age ineligible     |\n| .d   | Don’t know         |\n| .r   | Refused            |\n| .s   | Skipped due to routing |\n| .k   | No kids           |\n| .n   | Not applicable     |\n| .u   | Reference person is not married (for spouse variables) |\n| .v   | Spouse did not respond this wave (for spousal variables) |\n| .m   | Other missing      |\n> [!NOTE]- 翻译\n> | Code | Reason for Missing |\n> | ---- | ------------------ |\n>| .    | 缺失            |\n> | .a   | 年龄不合格     |\n>| .d   | 不知道         |\n>| .r   | 拒绝            |\n>| .s   | 跳过路由 |\n>| .k   | 没有孩子           |\n>| .n   | 不适用     |\n>| .u   | 参考人未婚（配偶变量） |\n>| .v   | 配偶在本波次未回应（配偶变量） |\n>| .m   | 其他缺失      |\n\nThe coding scheme varies across variables. Consult the Data Codebook for details on individual\nvariables.\n> [!NOTE]- 翻译\n> 编码方案因变量而异。有关单个变量的详细信息，请参阅 Data Codebook。\n\n##### Weighting and Accounting for Survey Design\nThe Harmonized CHARLS includes variables to allow users to produce weighted estimates with\nsurvey design adjusted standard errors where provided by CHARLS.\n> [!NOTE]- 翻译\n> Harmonized CHARLS 包括变量，以允许用户在 CHARLS 提供的地方生成加权估计和调整过的标准误差。\n\nCHARLS produces seven different weights. There are two different weights at the household\nlevel: one is adjusted for non-response and the other is not adjusted for non-response. At the\nindividual level, CHARLS produces three different weights: an individual weight without non-\nresponse adjustment, an individual weight with household non-response adjustment, and an\nindividual weight with household and individual non-response adjustment. Finally, CHARLS\nprovides two biomarker weights, one with household non-response adjustment and the other\nwith household and individual non-response adjustment. Starting in Wave 2, CHARLS provides\ntwo additional longitudinal weights at both the household and individual level. Please note\nthere is no individual biomarker weight with household non-response adjustment in the Wave\n2 data.\n> [!NOTE]- 翻译\n> CHARLS 产生七个不同的权重。家庭层面有两个不同的权重：一个是针对非响应进行调整，另一个则没有针对非响应进行调整。在个人层面，CHARLS 产生三个不同的权重：一个是没有非响应调整的个人权重，一个是经过家庭非响应调整的个人权重，以及一个经过家庭和个人非响应调整的个人权重。最后，CHARLS 提供两个生物标志物权重，一个经过家庭非响应调整，另一个经过家庭和个人非响应调整。从第 2 波开始，CHARLS 在家庭和个人层面提供两个额外的纵向权重。请注意，第 2 波数据中没有经过家庭非响应调整的个人生物标志物权重。\n\nIn addition to weights, CHARLS uses a stratified (by per capita GDP of urban districts and rural\ncounties) multistage (county/district-village/community-household) proportionate to\npopulation size (PPS) random sampling method to strictly control the quality of the samples.\nFor more detail information about weight and survey design, please see\nhttp://charls.pku.edu.cn/en/page/documentation/2013_tracking-_survey at China Health and\nRetirement Longitudinal Study (CHARLS) website.\n> [!NOTE]- 翻译\n> 除了权重外，CHARLS 还使用分层（按城市地区和农村县的人均 GDP）多阶段（县/区-村/社区-家庭）与人口规模成比例 (PPS) 的随机抽样方法来严格控制样本质量。有关权重和调查设计的更多详细信息，请访问中国健康与退休纵向研究 (CHARLS) 网站 http://charls.pku.edu.cn/en/page/documentation/2013_tracking-_survey。\n##### Availability of Stress Measures\nIn 2015, Drs. Elissa Epel and Wendy Mendes partnered with the Gateway to Global Aging Data\nteam to form the Stress Measurement Network, funded by the National Institute on Aging\n(NIA/NIH R24 AG048024). The goal of the Stress Network is to promote better theory and\nmeasurement of psychosocial stress in population-based studies. One of the specific aims is to\nfacilitate the use of stress measures in population based studies, which was led by Drs. Tara\nGruenewald, Alexandra Crosswell, and Jinkook Lee. It is hoped that identification of such\nmeasures will facilitate examination of the association of stressor conditions with cognitive-\naffective and physiological distress experience and poor psychological and physical health\nstates hypothesized to follow from stressor exposure.\n> [!NOTE]- 翻译\n> 2015 年，Elissa Epel 博士和 Wendy Mendes 与全球老龄化数据门户 (Gateway to Global Aging Data) 团队合作，成立了由国家老龄化研究所 (NIA/NIH R24 AG048024) 资助的压力测量网络。压力网络的目标是促进基于人群的研究中心理社会压力的更好理论和测量。具体目标之一是促进在人口基础研究中使用压力测量，由 Tara Gruenewald 博士、Alexandra Crosswell 博士和 Jinkook Lee 博士领导。希望识别这些措施将促进对压力条件与假设因压力暴露而导致的认知情感和生理痛苦体验以及心理和身体健康状况不佳之间关系的检查。\n\nAs a result of the work of the NIA Stress Measurement Network, the Harmonized CHARLS\nprovides harmonized stress measures beginning in 2011, CHARLS Wave 1, and through 2018,\nCHARLS Wave 4. The vast majority of the stress measures were collected in the 2014 life history\ninterview. Those who did not participate in the interview are assigned a special missing .a for\nthe applicable variables. A small number of measures are collected in the core interview.\n> [!NOTE]- 翻译\n> 由于 NIA 压力测量网络的工作，Harmonized CHARLS 提供了从 2011 年 CHARLS 第 1 波到 2018 年 CHARLS 第 4 波的协调压力测量。绝大多数压力测量是在 2014 年生活史访谈中收集的。那些没有参加采访的人在适用变量中被分配一个特殊的缺失值 .a。少量措施在核心访谈中收集。\nCHARLS queried information on discrete events that can be categorized as major life stressors\nor traumatic events (e.g., death of a child, serious traffic accident/injury). CHARLS asked\nrespondents to compare their health condition and financial situation to others. CHARLS\nincluded measures of parental relationship quality.\n> [!NOTE]- 翻译\n> CHARLS 查询可以归类为重大生活压力源或创伤事件的信息（例如，儿童去世、严重交通事故/受伤）。CHARLS 要求受访者将他们的健康状况和财务状况与他人进行比较。CHARLS 包括父母关系质量的衡量。\nFor more specific information about all stress measures included in the CHARLS, as well as\ncomparable stress measures in HRS sister studies, please refer to the Measures of Stress in the\nHealth and Retirement Study (HRS) and the HRS Family of Studies (2020) user guide available\nfrom https://g2aging.org/index.php?section=documentation.\n> [!NOTE]- 翻译\n> 有关 CHARLS 中包含的所有压力测量的更多具体信息，以及 HRS 姐妹研究中的可比压力测量，请参阅 https://g2aging.org/index.php?section=documentation 上提供的健康与退休研究 (HRS) 和 HRS 家族研究 (2020) 用户指南。\n#### Wealth and Income Variables 财富和收入变量\n##### Units of Observation and financial respondent 观察单位和财务受访者\nIn CHARLS, financial questions are asked at three different levels:\n1. Individual level: all respondents and spouses answer about their own financial status\nthat include the value of cash, savings accounts, stocks, mutual funds, government\nbond, debt, all other savings, individual earnings (wage and bonus), pension income,\ngovernment transfer income, other income, and capital income. Please note that\nCAHRLS asks about individual wages, bonuses, and pensions in both the employment\nand income modules; in order to prevent double counting the value, we only report the\nhigher value of the two as the corresponding income.\n2. Other household members (individual-based) level: the financial respondent answers\nthe questions and reports every household member’s financial status, which includes\nthe value of financial assets, debt, earnings income (wages and bonuses), pension\nincome, government transfer, and other income.\n3. Household level: the financial respondent reports the whole household financial status,\nwhich includes the value of primary housing, mortgage for the primary house, other real\nestate, vehicles, non-financial household assets, fixed capital assets, irrigable land,\nagricultural assets, monetary assets, agricultural income, self-employed activities\nincome, government and/or public transfer income, and capital income.\n> [!NOTE]- 翻译\n> 在 CHARLS 中，财务问题分三个不同的层次进行询问：\n> 1. 个人层面：所有受访者和配偶回答有关他们自己的财务状况的问题，包括现金、储蓄账户、股票、共同基金、政府债券、债务、其他所有储蓄、个人收入（工资和奖金）、养老金收入、政府转移收入、其他收入和资本收入的价值。请注意，CAHRLS 在就业和收入模块中询问个人工资、奖金和养老金；为了防止重复计算价值，我们仅报告两者中较高的值作为相应的收入。\n> 2. 其他家庭成员（基于个人）级别：财务受访者回答问题并报告每个家庭成员的财务状况，包括金融资产、债务、收入（工资和奖金）、养老金收入、政府转移和其他收入的价值。\n> 3. 家庭层面：财务受访者报告整个家庭的财务状况，包括主要住房的价值、主要住房的抵押贷款、其他房地产、车辆、非金融家庭资产、固定资本资产、可灌溉土地、农业资产、货币资产、农业收入、自雇活动收入、政府和/或公共转移收入以及资本收入。\n\nIn order to distinguish whether a value corresponds to the respondent, the spouse, the\nrespondent and spouse as a financial unit, or to the full household, financial variable names\neither begin with “R”, “S”, \"H\", or \"HH\". If the value corresponds to individual level, the variable\nnames begin with “R” for respondent or “S” for spouse. If the value corresponds to the couple\nlevel, then the name of the variable will start with \"H\". On the other hand, if the value\ncorresponds to the full household or other household members, then the name of the variable\nwill start with \"HH\".\n> [!NOTE]- 翻译\n> 为了区分一个值是对应于受访者、配偶、作为财务单位的受访者和配偶，还是对应于整个家庭，财务变量名称要么以“R”、“S”、“H”或“HH”开头。如果值对应于个人级别，则变量名称以“R”表示受访者或“S”表示配偶开头。如果值对应于夫妻级别，则变量名称将以“H”开头。另一方面，如果值对应于整个家庭或其他家庭成员，则变量名称将以“HH”开头。\n\nFor harmonization purposes, it is preferable to use the same unit of observation in different\nharmonized data sets. But since the HRS neither has information on wealth and income of\nhousehold members outside the couple nor does the HRS have individual-level asset\ninformation, measures are provided at the individual level, such as earnings, pension, etc., at\nthe couple level, and at the household level (e.g. asset income and wealth) where possible.\nThus, in constructing our couple-level variables, we ignore income and wealth from household\nmembers outside the couple. These couple-level variables can be compared to the RAND HRS\nincome and wealth household measures.\n> [!NOTE]- 翻译\n> 为了协调，最好在不同的协调数据集中使用相同的观察单位。但是，由于 HRS 既没有关于夫妻以外的家庭成员的财富和收入的信息，也没有 HRS 个人级别资产信息，因此在可能的情况下，在个人级别（例如收入、养老金等）、夫妻级别和家庭级别提供测量（例如资产收入和财富）。因此，在构建我们的夫妻级变量时，我们忽略了来自夫妻以外的家庭成员的收入和财富。这些夫妻级变量可以与 RAND HRS 收入和财富家庭措施进行比较。\n\nFor more information, please visit CHARLS official website http://charls.pku.edu.cn/en.\n> [!NOTE]- 翻译\n> 有关更多信息，请访问 CHARLS 官方网站 http://charls.pku.edu.cn/en。\n##### Currency\nAll CHARLS financial variables are expressed in current yuan. CHARLS asset questions are asked\nabout current asset values.\n> [!NOTE]- 翻译\n> 所有 CHARLS 财务变量均以当前人民币表示。CHARLS 资产问题是关于当前资产价值的。\n\nFor cross-country comparisons of financial variables, these values have to be converted to a\nsingle monetary unit. The Harmonized CHARLS dataset includes exchange rates for this\npurpose. It is the users’ responsibility to check what period a variable refers to and accordingly\nuse the appropriate exchange rate.\n> [!NOTE]- 翻译\n> 对于金融变量的跨国比较，这些值必须转换为单一货币单位。Harmonized CHARLS 数据集包括用于此目的的汇率。用户有责任检查变量所指的时间段，并相应地使用适当的汇率。\n\n#### Structure of Codebook\nThe Data Codebook contains the codebook documenting all variables in the Harmonized\nCHARLS Data. This section explains how to interpret the codebook entries. The figure below.\nshows a typical codebook page; the numbers in circles correspond to comments below.\n> [!NOTE]- 翻译\n> 数据代码簿包含记录 Harmonized CHARLS 数据中所有变量的代码簿。本节解释如何解释代码簿条目。下图显示了典型的代码簿页面；圆圈中的数字对应于下面的注释。\n\n**Self-Report of Health**\n\n| Wave | Variable | Label | Type |\n| ----- | ------- | ----- | ---- |\n|1 | R1SHLT | r1shlt:w1 r self-report of health | Categ |\n|2 | R2SHLT | r2shlt:w2 r self-report of health | Categ |\n|3| R3SHLT| r3shlt:w3 r self-report of health| Categ|\n|1 |S1SHLT |s1shlt:w1 s self-report of health| Categ|\n|2| S2SHLT| s2shlt:w2 s self-report of health| Categ|\n|3| S3SHLT| s3shlt:w3 s self-report of health |Categ|\n|1| R1SHLTA| r1shlta:w1 r Self-report of health alt| Categ|\n2 R2SHLTA r2shlta:w2 r Self-report of health alt Categ\n3 R3SHLTA r3shlta:w3 r Self-report of health alt Categ\n4 R4SHLTA r4shlta:w4 r Self-report of health alt Categ\n1 S1SHLTA s1shlta:w1 s Self-report of health alt Categ\n2 S2SHLTA s2shlta:w2 s Self-report of health alt Categ\n3 S3SHLTA s3shlta:w3 s Self-report of health alt Categ\n4 S4SHLTA s4shlta:w4 s Self-report of health alt Categ\n\n**Descriptive Statistics**\nVariable N Mean Std Dev Minimum Maximum\nR1SHLT 12613 3.86 0.92 1.00 5.00\nR2SHLT 17591 3.83 0.93 1.00 5.00\nR3SHLT 19701 3.80 0.95 1.00 5.00\nS1SHLT 10725 3.85 0.92 1.00 5.00\nS2SHLT 14850 3.82 0.92 1.00 5.00\nS3SHLT 16749 3.77 0.95 1.00 5.00\nR1SHLTA 17561 3.03 0.92 1.00 5.00\nR2SHLTA 17603 2.97 0.96 1.00 5.00\nR3SHLTA 19698 2.89 0.99 1.00 5.00\nR4SHLTA 18278 2.95 1.03 1.00 5.00\nS1SHLTA 14846 3.01 0.92 1.00 5.00\nS2SHLTA 14844 2.95 0.95 1.00 5.00\nS3SHLTA 16751 2.87 0.98 1.00 5.00\nS4SHLTA 15266 2.92 1.02 1.00 5.00\nCategorical Variable Codes\nValue-----------------------------------| R1SHLT R2SHLT R3SHLT\n.d:dk | 8\n.m:missing | 5086 1021 1396\n.r:refuse | 1\n1.Excellent | 106 241 279\n2.Very good | 1146 1774 2374\n3.Good | 2274 2512 2454\n1\n2 4\n6\n6\n5\n3\n\n\n### 2020 CHARLS Wave 5\n\n本次数据发布 (版本号: 20231106) 一共发布了八个主要数据集以及两个辅助数据集  (样本信息以及横截面权重) 。PSU信息与往期数据相同。下表给出了这十个数据集的详细\n说明\n\n| 问卷模块 | dataset | description |\n| ------- | ------- | ----------- |\n| B. 基本信息 | Demographic_Background | 主要受访者及其配偶的基本人口学信息 |\n| C. 家庭信息 |  Family_Information | 家庭以及家户成员信息 |\n| D. 健康状况与功能 | Health_Status_and_Functioning | 健康状态、健康行为以及认知能力 |\n| F. 工作与退休 | Work_Retirement | 工作以及退休状况 |\n| G1. 家户收入与支出 | Household_Income | 家户收入、支出以及住房情况 |\n| G2. 个人收入 | Individual_Income | 个人收入 |\n| V. 疫情 | COVID_Module | 受访者疫情期间的相关信息 |\n| EX. 退出问卷 | EXIT_Module | 去世受访者的信息 |\n|  | Weights | 横截面权重 |\n| | Sample_Infor | 样本信息 |\n\n所有的数据集均以Stata 14格式存储, 用户可以通过随数据发布的“codebook”获取\n数据的基本统计描述。\n\n### 选题\n自变量 --> 因变量\n\n- 自变量: 医学指标; 环境暴露; 社科变量\n- 因变量: 健康结局\n\n- 人群: 中老年人群体(一般人群); xx疾病人群(特定人群)\n- 研究类型: 队列研究; 横断面研究\n\n题目: xx人群自变量对因变量的影响\n\nABSI, AIP， BFP, BRI, CCR, CVAI, LAP, eGDR, eGFR, ePWV, Frailty, non-HDL, NHHR, PHR, RC, TyG, WHtR\n| abbreviation | 英文 | 中文 | 变量类型 |\n| ------------ | --- | ---- | ------ |\n| TyG | Triglyceride-glucose | 甘油三酯葡萄糖 | 医学指标,自变量 |\n| TyG-WHtR | Triglyceride-glucose-waist height ratio | 甘油三酯葡萄糖-腰高比 | 医学指标,自变量 |\n| BMI | Body mass index | 体重指数 | 医学指标,自变量 |\n| Frailty | frailty | 虚弱 | 医学指标,自变量 |\n| non-HDL | non-HDL cholesterol | 非高密度脂蛋白胆固醇 | 医学指标,自变量 |\n| NHHR | Non-HDL/HDL cholesterol ratio | 非高密度脂蛋白胆固醇/高密度脂蛋白胆固醇比值 | 医学指标,自变量 |\n\n#### 医学指标\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link |\n| ------ | ------ | ----- | ----- | ---- |\n| Association between triglyceride glucose-waist height ratio index and cardiovascular disease in middle-aged and older Chinese individuals: a nationwide cohort study | 甘油三酯葡萄糖-腰高比指数与中老年中国人群心血管疾病的关系：一项全国性队列研究 | 甘油三酯葡萄糖-腰高比指数 (TyG-WHtR index) | CVD: 心血管疾病 | [BMC](https://cardiab.biomedcentral.com/articles/10.1186/s12933-024-02336-6) |\n| Sarcopenia and mild cognitive impairment among elderly adults: The first longitudinal evidence from CHARLS | 老年人群肌少症与轻度认知障碍的关系：来自CHARLS的首个纵向证据 | 肌少症 | 轻度认知障碍 | [PubMed](https://pubmed.ncbi.nlm.nih.gov/36058563/) \\ [PubMed](https://pmc.ncbi.nlm.nih.gov/articles/PMC9745544/) |\n| Association between atherogenic index of plasma and new-onset stroke in individuals with different glucose metabolism status: insights from CHARLS | 血浆动脉粥样硬化指数与不同糖代谢状态新发中风的关系：来自CHARLS的见解 | 血浆致动脉粥样硬化指数(AIP) | 新发卒中 | [BMC](https://cardiab.biomedcentral.com/articles/10.1186/s12933-024-02314-y) |\n\n#### 环境暴露\n因为 CHARLS 数据有地理信息(省市), 所以可以考虑一些环境暴露的指标, 且本身包含一些环境暴露变量\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link | dataset | score |\n| ------ | ------ | ----- | ----- | ---- | ------- | ----- |\n| Comparison of Particulate Air Pollution From Different Emission sources and Incident Dementia in the US | 不同排放源的颗粒物空气污染与美国新发痴呆症的比较 | 颗粒物空气污染 | 新发痴呆症 |  | HRS | 22.3/Q1 |\n| Extreme temperature events, functional dependency,and cardio-metabolic multi-morbidity: Insights from a national cohort study in China | 极端温度事件、功能依赖性和心脏代谢共病：来自中国国家队列研究的见解 | 极端温度事件 | 功能依赖性和心脏代谢共病 |  | CHARLS | 6.2/Q1 |\n| Heatwave exposure in relation to decreased sleep duration in older adults | 热浪暴露与老年人睡眠时间减少的关系 | 热浪暴露 | 睡眠时间 |  | CHARLS |\n| Effect of  long-term exposure to PM2.5 on the risk of type 2 diabetes and arthritis in type 2 diabetes patients: Evidence from a national cohort in China | 长期暴露于PM2.5对2型糖尿病患者2型糖尿病和关节炎风险的影响：来自中国国家队列的证据 | PM2.5 | 2型糖尿病和关节炎 | |CHARLS |\n| Effect of indoor air pollution from household solid fuel use on the risk of gastrointestinal and liver disease in middle aged and elderly adults | 家庭固体燃料使用造成的室内空气污染对中老年人群胃肠道和肝脏疾病风险的影响 | 固体燃料使用 | 胃肠道和肝脏疾病 | | CHARLS |\n\n#### PGS (多基因评分)\nGlobal Aging 中有一些 基因数据\n\nhealth and retirement study PGS\n- 目前发文量低于 50\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link | score |\n| ------ | ------ | ----- | ----- | ---- | ----- |\n| **Polygenic Risk and Social** Support in Predicting Depression Under Stress | 多基因风险和社会支持在压力下预测抑郁症 | 多基因评分(PRS, 也称遗传风险评分) | 抑郁症 |  | 15.1/Q1 |\n| Discriminating Heterogeneous Trajectories of Resilience and Depression After Major Life Stressors Using Polygenic Score | 使用多基因评分区分重大生活压力后韧性和抑郁症的异质轨迹 | 多基因评分(PGS) | 抑郁症 |  | 22.5/Q1 |\n\n#### 社科变量\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link |\n| ------ | ------ | ----- | ----- | ---- |\n| Association of Adverse Childhood Experiences and Social Isolation with Later-Life Cognitive Function Among Adults in China | 童年不良经历与社会孤立对中国成年人晚年认知功能的影响 | 童年不良经历; 社会孤立 | 晚年认知功能 |  |\n| Determinants and inequalities in healthy working life expectancy in China | 中国健康工作生活预期的决定因素和不平等 | 慢性病, 健康生活方式... | 健康工作预期寿命 | |\n\n#### 多库联合\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link | dataset | score |\n| ------ | ------ | ----- | ----- | ---- |  ------ | ----- |\n| **Changes in frailty** and incident **cardiovascular disease** in three prospective cohorts | 三项前瞻性队列研究中虚弱变化与新发心血管疾病的关系 | 虚弱变化 | CVD | [PubMed](https://pubmed.ncbi.nlm.nih.gov/38241094/)  | CHARLS, HRS, ELSA | 37.6/Q1 |\n| The association between adult child education and cognitive functioning among older parents: A cross-national comparison of diverse contexts | 成年子女教育与老年父母认知功能的关系：不同背景的跨国比较 | 成年子女教育 | 老年父母认知功能 |   | HRS, LASI, MHAS | 13.1/Q1 |\n| The associations of socioeconomic status, social activities, and loneliness with depressive symptoms in adults aged 50 years and older across 24 countries: findings from five prospective cohort studies | 24个国家50岁及以上成年人中社会经济地位、社会活动和孤独感与抑郁症状的关系：来自五项前瞻性队列研究的发现 | 社会经济地位; 社会活动; 孤独感 | 抑郁症状 |  | CHARLS, HRS, ELSA, SHARE, MHAS | 13.4/Q1 |\n\n#### 共病研究\n将患有多种疾病(慢性病为主)的患者称为共病患者。共病是指一个人同时患有两种或两种以上的疾病或健康状况。共病通常会增加患者的医疗需求和治疗复杂性，可能导致更高的医疗费用和更差的生活质量。\n- 心血管: 高血压 && 糖尿病\n- 骨关节: 骨关节炎 && 内风湿关节炎\n\n共病指标可以界定人群, 作为自变量\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link | dataset | score |\n| ------ | ------ | ----- | ----- | ---- | ------- | ----- |\n|Association between the **triglyceride glucose-body mass index** and future cardiovascular disease risk in a population with Cardiovascular-Kidney-Metabolic syndrome stage 0-3: a nationwide prospective cohort study | **甘油三酯-葡萄糖-体重指数**与心血管-肾脏-代谢综合征0-3期人群未来心血管疾病风险的关系：一项全国性前瞻性队列研究 | 甘油三酯葡萄糖-体重指数(TyG-BMI), CKM 综合征人群 | 心血管疾病(CVD) | [PubMed](https://pubmed.ncbi.nlm.nih.gov/39113004/)  | CHARLS | 8.5/Q1 |\n| Long-Term Impact of Physical Activity on Mortality in Adults With Multi-morbidity: A 12-Year Cohort Longitudinal Study From the Survey on Health, Ageing and Retirement in Europe | 身体活动对多病成人死亡率的长期影响: 来自欧洲健康、老龄化和退休调查的12年队列纵向研究 | 身体活动, 共病指标 | 死亡率 |  | SHARE | 9.4/Q1 |\n| Cardio-metabolic multi-morbidity, lifestyle behaviours, and cognitive function: a multi-cohort study | 心脏代谢共病、生活方式行为和认知功能: 一项多队列研究 | 心脏代谢共病, 生活方式行为 | 认知功能 |  | HRS, SHARE, CHARLS, ELSA | 13.4/Q1 |\n#### 对已发布的论文进行优化\n\n例如: \n- 随时间多次测量(纵向研究)的变量\n  - 连续变量: 单次暴露 -> 累积暴露\n  - 分类变量: 单次状态 -> 状态改变\n\n| 论文题目| 翻译题目 | 自变量 | 因变量 | link | 测量方式 | dataset | score |\n| ------ | ------ | ----- | ----- | ---- | ------- | ------- | ----- |\n| Non-linear associations of **atherogenic index** of plasma with prediabetes and type 2 diabetes mellitus among Chinese adults aged 45 years and above: a cross-sectional study from CHARLS | 45岁及以上中国成年人**血浆动脉粥样硬化指数**与糖尿病前期和2型糖尿病的非线性关系：来自CHARLS的一项横断面研究 | 血浆动脉粥样硬化指数(AIP) | 糖尿病前期和2型糖尿病 |  | 单次测量 | CHARLS | 3.9/Q2 |\n| Exposure of **cumulative atherogenic index** of plasma and the development of prediabetes in middle-aged and elderly individuals: evidence from the CHARLS cohort study | **累积血浆动脉粥样硬化指数**暴露与中老年人群糖尿病前期发展的关系：来自CHARLS队列研究的证据 | 血浆动脉粥样硬化指数(AIP) | 糖尿病前期 |  | 多次测量 |  CHARLS | 8.5/Q1 |\n| | **估计血糖 控制 水平** 与中老年人**脑卒中**发病率 的关系 | eGDR(延伸的糖代谢指标) | CVD的卒中  |  | 单次测量 | CHARLS | 3.0/Q2 |4636\n| | 中老年人 **估算血糖处理率 变化** 与 新发**心血管疾病**的关系: 中国全国前瞻性队列研究 | eGDR 变化 | 心血管系统疾病(CVD) |  | 多次测量 | CHARLS | 5.4/Q1 |\n| | 50岁以上非糖尿病个体中 **累积 估计葡萄糖处理率** 与 **心血管疾病发病率** 之间的关联: 来自中国和美国两个大型队列的数据 | eGDR 变化 | 心血管系统疾病 |  | 多次测量 | CHARLS, HRS | 8.5/Q1 |\n| | 估计的 **葡萄糖 处理 率** 和 **心血管 疾病 发病率** 的**变化**: 欧洲和亚洲的两个大型队列的数据 | eGDR 变化 | 心血管系统疾病 |  | 多次测量 | SHARE, ELSA | 8.5/Q1 |\n| Cross-sectional analysis of **non-HDL/HDL cholesterol ratio** as a marker for cardiovascular disease risk in middle-aged and older adults: Evidence from the CHARLS study | 中老年人群非高密度脂蛋白胆固醇/高密度脂蛋白胆固醇比值作为心血管疾病风险标志物的横断面分析: 来自CHARLS研究的证据 | 非高密度脂蛋白胆固醇/高密度脂蛋白胆固醇比值 | CVD |  | 单次测量 | CHARLS | 2.0/Q3 |\n\n## 数据处理与分析\n\n### 描述性统计\n\n## 论文分析\n1. 解读行文思路\n2. 解构研究设计\n3. 结果呈现的顺序逻辑\n4. 陈列研究包含的所有变量\n\n### Changes in frailty and incident cardiovascular disease in three prospective cohorts\n三项前瞻性队列研究中虚弱和心血管疾病发病率的变化\n#### Abstract\n##### Background and Aims 背景和目的\nPrevious studies found that frailty was an important risk factor for cardiovascular disease (CVD). However, previous studies only focused on baseline frailty status, not taking into consideration the changes in frailty status during follow-up. The aim of this study was to investigate the associations of changes in frailty status with incident CVD.\n> [!info]- 翻译\n> 先前的研究发现，虚弱是心血管疾病 (CVD) 的一个重要危险因素。<br/>\n> 然而，以往的研究仅关注基线虚弱状态，而没有考虑随访期间虚弱状态的变化。<br/>\n> 本研究的目的是调查虚弱状态变化与新发 CVD 之间的关系。\n##### Methods\nThis study used data of three prospective cohorts: China Health and Retirement Longitudinal Study (CHARLS), English Longitudinal Study of Ageing (ELSA), and Health and Retirement Study (HRS). Frailty status was evaluated by the Rockwood frailty index and classified as robust, pre-frail, or frail. Changes in frailty status were assessed by frailty status at baseline and the second survey which was two years after the baseline. Cardiovascular disease was ascertained by self-reported physician-diagnosed heart disease (including angina, heart attack, congestive heart failure, and other heart problems) or stroke. Cox proportional hazard models were used to calculate the hazard ratio (HR) and 95% confidence interval (95% CI) after adjusting for potential confounders.\n> [!info]- 翻译\n> 本研究使用了三个前瞻性队列的数据：中国健康与退休纵向研究 (CHARLS)、英国老龄化纵向研究 (ELSA) 和健康与退休研究 (HRS)。<br/>\n> **虚弱状态**通过 Rockwood 虚弱指数进行评估，分为健康、脆弱前期或脆弱。<br/>\n> **虚弱状态的变化**通过基线和第二次调查（基线后两年）时的虚弱状态进行评估。<br/>\n> **心血管疾病**通过自我报告的医生诊断的心脏病（包括心绞痛、心脏病发作、充血性心力衰竭和其他心脏问题）或中风来确定。<br/>\n> Cox 比例风险模型用于计算 风险比 (HR) 和 95% 置信区间 (95% CI)，并调整潜在混杂因素。\n##### Results\nA total of 7116 participants from CHARLS (female: 48.6%, mean age: 57.4 years), 5303 from ELSA (female: 57.7%, mean age: 63.7 years), and 7266 from HRS (female: 64.9%, mean age: 65.1 years) were included according to inclusion and exclusion criteria. The median follow-up periods were 5.0 years in the CHARLS, 10.7 years in the ELSA, and 9.5 years in the HRS. Compared with stable robust participants, robust participants who progressed to pre-frail or frail status had increased risks of incident CVD (CHARLS, HR = 1.84, 95% CI: 1.54–2.21; ELSA, HR = 1.53, 95% CI: 1.25–1.86; HRS, HR = 1.59, 95% CI: 1.31–1.92). In contrast, frail participants who recovered to robust or pre-frail status presented decreased risks of incident CVD (CHARLS, HR = 0.62, 95% CI: 0.47–0.81; ELSA, HR = 0.49, 95% CI: 0.34–0.69; HRS, HR = 0.70, 95% CI: 0.55–0.89) when compared with stable frail participants. These decreased risks of incident CVD were also observed in pre-frail participants who recovered to robust status (CHARLS, HR = 0.66, 95% CI: 0.52–0.83; ELSA, HR = 0.65, 95% CI: 0.49–0.85; HRS, HR = 0.71, 95% CI: 0.56–0.91) when compared with stable pre-frail participants.\n> [!info]- 翻译\n> 根据纳入和排除标准，共纳入 7116 名来自 CHARLS 的参与者（女性：48.6%，平均年龄：57.4 岁）、<br/>\n> 5303 名来自 ELSA 的参与者（女性：57.7%，平均年龄：63.7 岁）和7266名来自HRS的参与者（女性：64.9%，平均年龄：65.1岁）。<br/>\n> CHARLS 的中位随访时间为 5.0 年，ELSA 为 10.7 年，HRS 为 9.5 年。<br/>\n> 与稳定的健康参与者相比，<br/>\n> 进展为脆弱前期或脆弱状态的健康参与者发生新发 CVD 的风险增加 (CHARLS, HR = 1.84, 95% CI: 1.54–2.21; ELSA, HR = 1.53, 95% CI: 1.25–1.86; HRS, HR = 1.59, 95% CI: 1.31–1.92)。<br/>\n> 相反，与稳定的脆弱参与者相比，<br/>\n> 恢复为健康或脆弱前期状态的脆弱参与者发生新发 CVD 的风险降低 (CHARLS, HR = 0.62, 95% CI: 0.47–0.81; ELSA, HR = 0.49, 95% CI: 0.34–0.69; HRS, HR = 0.70, 95% CI: 0.55–0.89)。<br/>\n> 与稳定的脆弱前期参与者相比，<br/>\n> 恢复为健康状态的脆弱前期参与者发生新发 CVD 的风险也降低 (CHARLS, HR = 0.66, 95% CI: 0.52–0.83; ELSA, HR = 0.65, 95% CI: 0.49–0.85; HRS, HR = 0.71, 95% CI: 0.56–0.91)。\n##### Conclusion\nDifferent changes in frailty status are associated with different risks of incident CVD. Progression of frailty status increases incident CVD risks, while recovery of frailty status decreases incident CVD risks.\n> [!info]- 翻译\n> 虚弱状态的不同变化与新发 CVD 的不同风险相关。<br/>\n> 虚弱状态的进展增加了新发 CVD 风险，而虚弱状态的恢复降低了新发 CVD 风险。\n![图0](https://oup.silverchair-cdn.com/oup/backfile/Content_public/Journal/eurheartj/45/12/10.1093_eurheartj_ehad885/1/m_ehad885_ga1.jpeg?Expires=1746800142&Signature=j1xONush7iVJTXCEs90z73v0iUr90vsEyG7zefkNI3pAD80QfkajTHGMs9hu5E7k5KEQ63aREUeVvxYQOtRn7Zjkmp-FGOqkC1WesMjiPExyxT1uA2a6-HBoWIOYIjcMq1Q7aXHjfmdtDSM~5GSk159gGVwhFeziETuU49IfBQZlUv~NrVNYxjap82W9Cxfn9HjRdTwY8EB~LlDJYQBMukARU164sVNbvM3wJW9Uyl6F5GQvDJ7OttPpB7ueWBJzf~dz-~35wnxQ6VaN91EhspDp~zl6HFXosgx-yJrHAK3GpoXEc4WxSiVSIxjJn81pdWUTvqQNhNCrJpfRMxHuRw__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA)\n**Structured Graphical Abstract**\nChanges in frailty status and the risks of incident cardiovascular disease. CHARLS, China Health and Retirement Longitudinal Study; ELSA, English Longitudinal Study of Ageing; HRS, Health and Retirement Study; HR, hazard ratio; CI, confidence interval.\n> [!info]- 翻译\n> 虚弱状态的变化与新发心血管疾病的风险。<br/>\n> CHARLS，中国健康与退休纵向研究；<br/>\n> ELSA，英国老龄化纵向研究；<br/>\n> HRS，健康与退休研究；<br/>\n> HR，风险比；<br/>\n> CI，置信区间。\n\n**Keywords**: Frailty, Cardiovascular disease, Dynamic nature, Epidemiology\n> [!info]- 翻译\n> **关键词**：虚弱，心血管疾病，动态特征，流行病学\n\n**Topic**: cardiovascular diseases,  frailty,  frail elderly  \n**Issue Section**: Clinical Research\n#### Introduction\nWith the ageing of the world's population, a common geriatric syndrome termed frailty is becoming an emerging health burden.[^1][^2][^3] Frailty is a state of increased vulnerability to the stressor because of decreased reserves across multiple physiological systems.[^2][^3] It is well documented that frailty increases the risks of adverse health outcomes and is a predictor of multiple age-related diseases, such as falls, disability, and all-cause mortality.[^4][^5][^6][^7] Recently, frailty has attracted great attention from cardiologists as the prevalence and incidence of cardiovascular disease (CVD) also increase with age.[^8][^9][^10][^11] Clarifying the association between frailty and CVD will provide new clues for the prevention and management of CVD in the ageing population.\n> [!info]- 翻译\n> 随着全球人口老龄化，一种称为虚弱的老年综合征正成为新兴的健康负担。<br/>\n> 虚弱是由于多个生理系统的储备减少而对压力源的脆弱状态。<br/>\n> 已有充分证据表明，虚弱增加了不良健康结果的风险，并且是多种与年龄相关的疾病的预测因子，例如跌倒、残疾和全因死亡率。<br/>\n> 最近，虚弱引起了心脏病学家的极大关注，因为心血管疾病 (CVD) 的患病率和发病率也随着年龄的增长而增加。<br/>\n> 阐明虚弱与 CVD 之间的关系将为老龄化人群中 CVD 的预防和管理提供新的线索。\n\nIn prior studies, frailty and pre-frailty had been found to increase the risks of incident CVD.[^12][^13][^14] However, these studies only focused on baseline frailty status, not taking into consideration the changes in frailty status during follow-up. In comparison with a single assessment of frailty status at baseline, studying changes in frailty status can reflect more comprehensive biological associations, such as the associations of frailty progression with CVD. More importantly, there is growing evidence that frailty could be reversed after appropriate intervention.[^15][^16] Assessing incident CVD risks in individuals who recover from frailty will provide crucial evidence for the necessity to conduct interventions on frailty in cardiovascular practice. Therefore, it is urgent to investigate the associations of changes in frailty status with incident CVD risks.\n> [!info]- 翻译\n> 在先前的研究中，虚弱和脆弱前期被发现增加了新发 CVD 的风险。<br/>\n> 然而，这些研究仅关注基线虚弱状态，而没有考虑随访期间虚弱状态的变化。<br/>\n> 与基线单次评估的虚弱状态相比，研究虚弱状态的变化可以反映更全面的生物学关联，例如虚弱进展与 CVD 的关联。<br/>\n> 更重要的是，越来越多的证据表明，虚弱可以在适当的干预后逆转。<br/>\n> 评估从虚弱中恢复的个体的新发 CVD 风险将为在心血管实践中进行虚弱干预的必要性提供重要证据。<br/>\n> 因此，迫切需要研究虚弱状态变化与新发 CVD 风险之间的关系。\n\nIn the current study, we used three prospective cohorts of China Health and Retirement Longitudinal Study (CHARLS), English Longitudinal Study of Ageing (ELSA), and Health and Retirement Study (HRS). We aimed to investigate the associations of changes in frailty status with incident CVD risks. We hypothesized that progression of frailty status would increase incident CVD risks, while recovery of frailty status would decrease incident CVD risks.\n> [!info]- 翻译\n> 在本研究中，我们使用了中国健康与退休纵向研究 (CHARLS)、<br/>\n> 英国老龄化纵向研究 (ELSA) 和健康与退休研究 (HRS) 的三个前瞻性队列。<br/>\n> 我们的目的是研究虚弱状态变化与新发 CVD 风险之间的关系。<br/>\n> 我们假设虚弱状态的进展会增加新发 CVD 风险，而虚弱状态的恢复会降低新发 CVD 风险。\n#### Methods\n##### Study design and population\nThe CHARLS, ELSA, and HRS were all prospective and nationally representative cohorts conducted in China, the UK, and the USA, respectively.[^17][^18][^19] Detailed study designs on these three cohorts are summarized in Supplementary data online, Methods. In this study, wave 1 (2011) of CHARLS, wave 2 (2004–05) of ELSA, and wave 8 (2006) of HRS were regarded as the baseline. Wave 2 (2013) of CHARLS, wave 3 (2006–07) of ELSA, and wave 9 (2008) of HRS were regarded as the second survey. We used data from the baseline and the second survey to evaluate the dynamic nature of frailty status. Subsequent follow-up surveys were used to follow the outcome until the final follow-up survey which was wave 4 (2018) of CHARLS, wave 9 (2018–19) of ELSA, and wave 14 (2018) of HRS. The CHARLS, ELSA, and HRS were approved by the Ethics Review Committees of Peking University, London Multi-Centre Research, and the University of Michigan, respectively. Informed consent was obtained from each participant in these three cohorts.\n> [!info]- 翻译\n> CHARLS、ELSA 和 HRS 都是前瞻性和全国代表性的队列，分别在中国、英国和美国进行。<br/>\n> 详细的研究设计见补充数据在线方法。<br/>\n> 在本研究中，CHARLS 的第 1 波 (2011) 、ELSA 的第 2 波 (2004–05) 和 HRS 的第 8 波 (2006) 被视为基线。<br/>\n> CHARLS 的第 2 波 (2013) 、ELSA 的第 3 波 (2006–07) 和 HRS 的第 9 波 (2008) 被视为第二次调查。<br/>\n> 我们使用基线和第二次调查的数据来评估虚弱状态的动态特征。<br/>\n> 随后的随访调查用于跟踪结果，直到最后的随访调查，即 CHARLS 的第 4 波 (2018) 、ELSA 的第 9 波 (2018–19) 和 HRS 的第 14 波 (2018)。<br/>\n> CHARLS、ELSA 和 HRS 分别获得了北京大学、伦敦多中心研究和密歇根大学伦理审查委员会的批准。<br/>\n> 在这三个队列中均获得了每位参与者的知情同意。\n\nFigure 1 shows the selection process of the study population. Among 44 509 participants from the CHARLS, ELSA, and HRS, we first excluded 9315 participants with missing data on the frailty index (FI) calculation at baseline. Moreover, 9147 participants with CVD at baseline or loss to follow-up were also excluded. Finally, 26 047 eligible participants were included in baseline frailty status analyses. For changes in frailty status analyses, we further excluded 6362 participants according to similar criteria. The remaining 19 685 participants were included in the final analyses.\n> [!info]- 翻译\n> 图 1 显示了研究人群的选择过程。在 CHARLS、ELSA 和 HRS 的 44 509 名参与者中，<br/>\n> 我们首先排除了 基线时 **缺乏 FI** 数据的 9315 名参与者。<br/>\n> 此外，还排除了 基线时 **患有 CVD 或失访**的 9147 名参与者。<br/>\n> 最终，26 047 名符合条件的参与者被纳入 **基线虚弱状态** 分析。<br/>\n> 对于 **虚弱状态变化** 分析，我们根据类似标准进一步排除了 6362 名参与者。<br/> \n> 剩余的 19 685 名参与者被纳入最终分析。\n\n![Figure1](https://oup.silverchair-cdn.com/oup/backfile/Content_public/Journal/eurheartj/45/12/10.1093_eurheartj_ehad885/1/m_ehad885f1.jpeg?Expires=1746800142&Signature=CE4Q2hIVj7L38omfAZMTTISCIGWOJeCYaLLtnbHDlIQSg1cH67hfK00xSXC-hdb24zsUK20b1fzZbJZDP8CyWrvdjSRW-d3M3MZnwKo7ev6fX9nb55TJ~aimwr~MQCfHqKnKj1o-v8SEshoZLZnE-WymGBRrcdu1KwNJ-TJWquoT7iCDWe225zET9ORXdIW18730SvZtQ2tv2wdvO8giwtFaH6Wp7quEF63BpoH1ZSkTKGah~C789T6h84-iEBLnZRteefO5-N0dbuM7bEgJ0uCgFE49YziEzscdZBNAebcJbS3T0-VCcyS2W~mLZNvLISD1dDvRLsuWZQqGBVs9YQ__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA)\nFigure 1Selection process of the study population. CHARLS, China Health and Retirement Longitudinal Study; ELSA, English Longitudinal Study of Ageing; HRS, Health and Retirement Study; FI, frailty index; CVD, cardiovascular disease\n> [!info]- 翻译\n> 图 1 研究人群的选择过程。<br/>\n> CHARLS，中国健康与退休纵向研究；<br/>\n> ELSA，英国老龄化纵向研究；<br/>\n> HRS，健康与退休研究；<br/>\n> FI，虚弱指数；<br/>\n> CVD，心血管疾病\n\n##### Assessment of frailty\nFrailty was evaluated by the FI which was calculated by the accumulation of multiple age-related health deficits. In this study, we constructed the FI following standard procedures described previously. [^20][^21][^22] Based on the data of CHARLS, ELSA, and HRS, we selected 28 items for FI construction, involving disease (excluding heart disease and stroke), symptom, disability, physical function, depression, and cognition (see Supplementary data online, Table S1). Items 1–27 were dichotomized as 1 (presence of the deficit) or 0 (absence of the deficit) according to corresponding cut-off values, respectively. The item 28 (cognitive score) was a continuous variable which ranged from 0 to 1. A higher value of cognitive score indicated a worse cognition. For each participant, FI was calculated by the sum of the present health deficits divided by 28. Thus, the FI was a continuous variable ranging from 0 to 1, and a higher FI indicated a higher level of frailty. As suggested by previous studies,[^2][^23][^24] frailty status was classified into three categories: robust (FI ≤ 0.10), pre-frail (0.10 < FI < 0.25), and frail (FI ≥ 0.25). Changes in frailty status were evaluated by frailty status at baseline and the second survey which was conducted two years after the baseline (see Supplementary data online, Figure S1). We also used total FI and change in FI to assess the dynamic nature of frailty status. Total FI was calculated by the FI at baseline plus the FI at the second survey, while change in FI was calculated by the FI at the second survey minus the FI at baseline.\n> [!info]- 翻译\n> 虚弱通过 FI 进行评估，FI 是通过积累多种与年龄相关的健康缺陷计算得出的。<br/>\n> 在本研究中，我们按照先前描述的标准程序构建 FI。<br/>\n> 根据 CHARLS、ELSA 和 HRS 的数据，我们选择了 28 个项目用于 FI 构建，涉及疾病（不包括心脏病和中风）、症状、残疾、身体功能、抑郁和认知（见补充数据在线表 S1）。<br/>\n> 项目 1–27 根据相应的临界值二分为 1（缺陷存在）或 0（缺陷不存在）。<br/>\n> 项目 28（认知评分）是一个连续变量，范围从 0 到 1。<br/>\n> 较高的认知评分表示更差的认知。<br/>\n> 对于每个参与者，FI 通过现有健康缺陷的总和除以 28 来计算。<br/>\n> 因此，FI 是一个连续变量，范围从 0 到 1，<br/>\n> 较高的 FI 表示较高水平的虚弱。<br/>\n> 根据先前的研究，虚弱状态分为三类：<br/>\n> 健康 (FI ≤ 0.10)、脆弱前期 (0.10 < FI < 0.25) 和脆弱 (FI ≥ 0.25)。<br/>\n> 虚弱状态的变化通过基线和第二次调查（基线后两年）时的虚弱状态进行评估（见补充数据在线图 S1）。<br/>\n> 我们还使用总 FI 和 FI 变化来评估虚弱状态的动态特征。<br/>\n> 总 FI 由基线时的 FI 加上第二次调查时的 FI 计算得出，<br/>\n> 而 FI 变化由第二次调查时的 FI 减去基线时的 FI 计算得出。\n##### Covariates  协变量\nThe covariates included age, sex, marital status, education, smoking status, drinking status, physical activity level, body mass index (BMI), glycated haemoglobin (HbA $_{1c}$), systolic blood pressure (SBP), high-density lipoprotein cholesterol (HDL-C), and C-reactive protein. For consistency among the CHARLS, ELSA, and HRS, marital status was divided into two categories: married or partnered and other marital status (separated, divorced, unmarried, or widowed). Education was classified into three levels: below high school, high school, and college or above. Smoking status was categorized as never smokers and ever smokers. Ever smokers included former and current smokers. Similarly, drinking status was categorized as never drinkers and ever drinkers. Physical activity level was divided into three categories: vigorous (vigorous activity more than once a week), moderate (moderate activity more than once a week), and inactive (the rest).\n> [!info]- 翻译\n> 协变量包括年龄、性别、婚姻状况、教育程度、吸烟状况、饮酒状况、身体活动水平、体重指数 (BMI)、糖化血红蛋白 (HbA $_{1c}$)、收缩压 (SBP)、高密度脂蛋白胆固醇 (HDL-C) 和 C 反应蛋白。<br/>\n> 为了在 CHARLS、ELSA 和 HRS 之间保持一致，<br/>\n> 婚姻状况分为两类：已婚或伴侣和其他婚姻状况（分居、离婚、未婚或丧偶）。<br/>\n> 教育分为三个等级：高中以下、高中和大学或以上。<br/>\n> 吸烟状况分为从不吸烟者和曾经吸烟者。 曾经吸烟者包括前吸烟者和当前吸烟者。<br/>\n> 同样，饮酒状况分为从不饮酒者和曾经饮酒者。<br/>\n> 身体活动水平分为三类：<br/>\n> 剧烈（每周剧烈活动超过一次）、中等（每周中等活动超过一次）和不活跃（其余）。\n##### Outcome ascertainment and follow-up 结果确认和随访\nThe primary outcome for this study was incident CVD. In the CHARLS, ELSA, and HRS, CVD was ascertained based on self-reported physician-diagnosed heart disease (including angina, heart attack, congestive heart failure, and other heart problems) or stroke. Details of the CVD ascertainment were described in Supplementary data online, Methods. In brief, participants were inquired whether they were diagnosed with heart disease or stroke by doctors. Those who reported being diagnosed with heart disease or stroke were considered to have CVD.\n> [!info]- 翻译\n> 本研究的主要结局指标是 心血管疾病事件。<br/>\n> 在 CHARLS、ELSA 和 HRS 中，CVD 是根据自我报告的医生诊断的心脏病（包括心绞痛、心脏病发作、充血性心力衰竭和其他心脏问题）或中风来确定的。<br/>\n> 结果确认的详细信息见补充数据在线方法。<br/>\n> 简而言之，询问参与者是否被医生诊断为心脏病或中风。<br/>\n> 报告被诊断为心脏病或中风的参与者被认为患有 CVD。\n\nIn the baseline frailty status analyses, follow-up was initiated from wave 1 of CHARLS, wave 2 of ELSA, and wave 8 of HRS. In the frailty status change analyses, follow-up was initiated from wave 2 of CHARLS, wave 3 of ELSA, and wave 9 of HRS. The endpoint of follow-up was at the first occurrence of CVD, death, or the censoring date, whichever came first. The censoring date was the date of the last survey in which each participant attended. Ideally, the last survey was wave 4 (2018) of CHARLS, wave 9 (2018–2019) of ELSA, and wave 14 (2018) of HRS, respectively. Death data were available up to the last survey in the CHARLS and HRS, while those were only available up to the wave 6 (2012–2013) in the ELSA. [^25][^26][^27]\n> [!info]- 翻译\n> 在基线虚弱状态分析中，随访从 CHARLS 的第 1 波、ELSA 的第 2 波和 HRS 的第 8 波开始。<br/>\n> 在虚弱状态变化分析中，随访从 CHARLS 的第 2 波、ELSA 的第 3 波和 HRS 的第 9 波开始。<br/>\n> 随访的终点是在第一次发生 CVD、死亡或审查日期时，以先发生者为准。<br/>\n> 审查日期是每个参与者参加的最后一次调查的日期。<br/>\n> 理想情况下，最后一次调查分别是 CHARLS 的第 4 波 (2018) 、ELSA 的第 9 波 (2018–2019) 和 HRS 的第 14 波 (2018)。<br/>\n> CHARLS 和 HRS 的死亡数据可用到最后一次调查，而 ELSA 仅可用到第 6 波 (2012–2013)。\n##### Statistical analyses \nFor descriptive statistics, continuous variables were expressed as mean [standard deviation (SD)] or median [interquartile range (IQR)], while categorical variables were expressed as number (percentage).\n\n> [!info]- 翻译\n> 对于描述性统计，连续变量表示为均值 [标准差 (SD)] 或中位数 [四分位数范围 (IQR)]，<br/>\n> 而分类变量表示为数量（百分比）。<br/>\n> 统计分析使用 R 4.2.2 进行。<br/>\n> 统计显著性水平设定为 0.05。\n\nTo analyse the association of baseline frailty status with the risks of incident CVD, Cox proportional hazard regression was used to calculate the hazard ratio (HR) and its 95% confidence interval (95% CI). Two models were fitted for the Cox regression using robust participants as the reference. Model 1 was unadjusted. Model 2 was multivariable-adjusted controlling for age, sex, marital status, education, smoking status, drinking status, physical activity level, BMI, SBP, HbA1c HDL-C, and C-reactive protein. The missing rates of covariates were summarized in Supplementary data online, Tables S2 and S3. The missing data of covariates were imputed using the multiple imputation with chained equation, which was described in Supplementary data online, Methods. Using similar methods, we also analysed associations of changes in frailty status, total FI, and change in FI with incident CVD. Total FI and change in FI were divided into tertiles, respectively, with the lower tertile as the reference. In analyses of change in FI, we further controlled for the baseline FI in the multivariable-adjusted model. In addition, we performed the trend test by assigning the tertile as a continuous variable.[^28][^29] Proportional hazard assumptions for these Cox regression models were confirmed by the Schoenfeld residual.[^30][^31]\n> [!info]- 翻译\n> 为了分析基线虚弱状态与心血管疾病（CVD）发病风险之间的关联，使用 Cox 比例风险回归计算风险比 (HR) 及其 95% 置信区间 (95% CI)。<br/>\n> 使用健康参与者作为参考，对 Cox 回归进行了两个模型的拟合<br/>\n> 模型 1 未调整。<br/>\n> 模型 2 是多变量调整，控制年龄、性别、婚姻状况、教育程度、吸烟状况、饮酒状况、身体活动水平、BMI、SBP、HbA1c HDL-C 和 C 反应蛋白。<br/>\n> 协变量的缺失率见补充数据在线表 S2 和 S3。<br/>\n> 协变量的缺失数据使用链式方程的多重插补进行插补，<br/>\n> 该方法在补充数据在线方法中进行了描述。<br/>\n> 使用类似的方法，我们还分析了虚弱状态变化、总 FI 和 FI 变化与新发 CVD 的关系。<br/>\n> 总 FI 和 FI 变化分别分为三分位数，<br/>\n> 以较低的三分位数作为参考。在 FI 变化分析中，<br/>\n> 我们在多变量调整模型中进一步控制基线 FI。<br/>\n> 此外，我们通过将三分位数作为连续变量来进行趋势检验。<br/>\n> 比例风险假设通过 Schoenfeld 残差确认。<br/>\n> 统计分析使用 R 4.2.2 进行。<br/>\n\n\n[^1]: Big note.\n[^2]: Big note.\n[^3]: Big note.\n[^4]: Big note.\n[^5]: Big note.\n[^6]: Big note.\n[^7]: Big note.\n[^8]: Big note.\n[^9]: Big note.\n[^10]: Big note.\n[^11]: Big note.\n[^12]: Big note.\n[^13]: Big note.\n[^14]: Big note.\n[^15]: Big note.\n[^16]: Big note.\n[^17]: Big note.\n[^18]: Big note.\n[^19]: Big note.\n[^20]: Big note.\n[^21]: Big note.\n[^22]: Big note.\n[^23]: Big note.\n[^24]: Big note.\n[^25]: 25Big note.\n[^26]: 26Big note.\n[^27]: 27Big note.\n[^28]: 28Big note.\n[^29]: 29Big note.\n[^30]: 30Big note.\n[^31]: 31Big note.\n\n### Association between triglyceride glucose-waist height ratio index and cardiovascular disease in middle-aged and older Chinese individuals: a nationwide cohort study\n甘油三酯-血糖-腰围身高比指数与中年及老年人心血管疾病的相关性：一项全国性队列研究\n#### Abstract 摘要\n##### Background\nThe triglyceride-glucose (TyG) index and its combination with obesity indicators can predict cardiovascular diseases (CVD). However, there is limited research on the relationship between changes in the triglyceride glucose-waist height ratio (TyG-WHtR) and CVD. Our study aims to investigate the relationship between the change in the TyG-WHtR and the risk of CVD.\n> [!info]- 翻译\n> 甘油三酯-葡萄糖 (TyG) 指数及其与肥胖指标的结合可以预测心血管疾病 (CVD)。然而，关于甘油三酯葡萄糖-腰围身高比 (TyG-WHtR) 变化与 CVD 之间关系的研究有限。本研究旨在探讨 TyG-WHtR 变化与 CVD 风险之间的关系。\n##### Methods\nParticipants were from the China Health and Retirement Longitudinal Study (CHARLS). CVD was defined as self-reporting heart disease and stroke. Participants were divided into three groups based on changes in TyG-WHtR using K-means cluster analysis. Multivariable binary logistic regression analysis was used to examine the association between different groups (based on the change of TyG-WHtR) and CVD. A restricted cubic spline (RCS) regression model was used to explore the potential nonlinear association of the cumulative TyG-WHtR and CVD events.\n> [!info]- 翻译\n> 参与者来自中国健康与退休纵向研究 (CHARLS)。<br/>\n> 心血管疾病 (CVD) 定义为自我报告的心脏病和中风。<br/>\n> 根据 K 均值聚类分析，参与者根据 TyG-WHtR 的变化分为三组。<br/>\n> 使用 多变量二元逻辑回归分析 检查不同组（基于 TyG-WHtR 的变化）与 CVD 之间的关系。<br/>\n> 使用 限制立方样条 (RCS) 回归模型 探索累积 TyG-WHtR 与 CVD 事件之间 的 潜在非线性关系。\n##### Results\nDuring follow-up between 2015 and 2020, 623 (18.8%) of 3312 participants developed CVD. After adjusting for various potential confounders, compared to the participants with consistently low and stable TyG-WHtR, the risk of CVD was significantly higher in participants with moderate and increasing TyG-WHtR (OR 1.28, 95%CI 1.01–1.63) and participants with high TyG-WHtR with a slowly increasing trend (OR 1.58, 95%CI 1.16–2.15). Higher levels of cumulative TyG-WHtR were independently associated with a higher risk of CVD events (per SD, OR 1.27, 95%CI 1.12–1.43).\n> [!info]- 翻译\n> 在 2015 年至 2020 年的随访期间，3312 名参与者中有 623 名 (18.8%) 患上了 CVD。<br/>\n> 在调整了各种潜在混杂因素后，与 TyG-WHtR 始终处于低水平和稳定状态的参与者相比，  <br/>\n> TyG-WHtR 中等和增加的参与者 CVD 风险显著增加 (OR 1.28, 95%CI 1.01–1.63)，  <br/>\n> 而 TyG-WHtR 较高且缓慢上升的参与者 (OR 1.58, 95%CI 1.16–2.15)。  <br/>\n> 累积 TyG-WHtR 水平较高与 CVD 事件风险增加 独立相关 (每 SD, OR 1.27, 95%CI 1.12–1.43)。\n##### Conclusion\nFor middle-aged and older adults, changes in the TyG-WHtR are independently associated with the risk of CVD. Maintaining a favorable TyG index, effective weight management, and a reasonable waist circumference contribute to preventing CVD.\n> [!info]- 翻译\n> 对于中老年人群，TyG-WHtR 的变化与 CVD 风险独立相关。<br/>\n> 维持良好的 TyG 指数、有效的体重管理和合理的腰围有助于预防 CVD。\n#### Introduction  引言\n#### Methods\n##### Study design and population 研究设计和人群\n##### Assessment of the change in TyG-WHtR TyG-WHtR 变化评估\n##### Assessment of CVD  心血管疾病评估\n##### Covariates  协变量\n##### Statistical analyses  统计分析\n#### Results\n##### Baseline characteristics of participants 参与者基线特征\n##### Odds ratios for incident CVD 发生心血管疾病的风险比\n##### Subgroup analyses and sensitivity analyses 亚组分析和敏感性分析\n#### Discussion\n#### Conclusion\n#### References\n11. Dang K, Wang X, Hu J, et al. The association between triglyceride-glucose index and its combination with obesity indicators and cardiovascular disease: NHANES 2003–2018. Cardiovasc Diabetol. 2024;23(1):8.\n  > [!info]- 翻译\n  > Dang K, Wang X, Hu J, et al. 三酰甘油-葡萄糖指数及其与肥胖指标结合与心血管疾病的关系：NHANES 2003–2018。心血管糖尿病杂志。2024;23(1):8。",
    "toc": [
      {
        "depth": 2,
        "value": "常规生物医学指标与中国老年人健康状况的相关性研究",
        "slug": "常规生物医学指标与中国老年人健康状况的相关性研究"
      },
      {
        "depth": 2,
        "value": "数据集 Global Aging",
        "slug": "数据集-global-aging"
      },
      {
        "depth": 3,
        "value": "Harmonized Data",
        "slug": "harmonized-data"
      },
      {
        "depth": 4,
        "value": "Gateway to Global Aging Data",
        "slug": "gateway-to-global-aging-data"
      },
      {
        "depth": 4,
        "value": "Preface 前言",
        "slug": "preface-前言"
      },
      {
        "depth": 4,
        "value": "Requested Acknowledgment 要求致谢",
        "slug": "requested-acknowledgment-要求致谢"
      },
      {
        "depth": 4,
        "value": "CHARLS Version and Acknowledgment CHARLS 版本和致谢",
        "slug": "charls-version-and-acknowledgment-charls-版本和致谢"
      },
      {
        "depth": 4,
        "value": "Contents",
        "slug": "contents"
      },
      {
        "depth": 4,
        "value": "What’s New in Version D of the Harmonized CHARLS?",
        "slug": "what’s-new-in-version-d-of-the-harmonized-charls?"
      },
      {
        "depth": 4,
        "value": "Introduction and Overview",
        "slug": "introduction-and-overview"
      },
      {
        "depth": 5,
        "value": "Gateway to Global Aging Data",
        "slug": "gateway-to-global-aging-data"
      },
      {
        "depth": 5,
        "value": "Unit of Observation",
        "slug": "unit-of-observation"
      },
      {
        "depth": 5,
        "value": "Data File Structure",
        "slug": "data-file-structure"
      },
      {
        "depth": 5,
        "value": "Variable Naming Convention",
        "slug": "variable-naming-convention"
      },
      {
        "depth": 5,
        "value": "Missing Values, Nonresponse, and Imputations 缺失值、非响应和插补",
        "slug": "missing-values,-nonresponse,-and-imputations-缺失值、非响应和插补"
      },
      {
        "depth": 5,
        "value": "Weighting and Accounting for Survey Design",
        "slug": "weighting-and-accounting-for-survey-design"
      },
      {
        "depth": 5,
        "value": "Availability of Stress Measures",
        "slug": "availability-of-stress-measures"
      },
      {
        "depth": 4,
        "value": "Wealth and Income Variables 财富和收入变量",
        "slug": "wealth-and-income-variables-财富和收入变量"
      },
      {
        "depth": 5,
        "value": "Units of Observation and financial respondent 观察单位和财务受访者",
        "slug": "units-of-observation-and-financial-respondent-观察单位和财务受访者"
      },
      {
        "depth": 5,
        "value": "Currency",
        "slug": "currency"
      },
      {
        "depth": 4,
        "value": "Structure of Codebook",
        "slug": "structure-of-codebook"
      },
      {
        "depth": 3,
        "value": "2020 CHARLS Wave 5",
        "slug": "2020-charls-wave-5"
      },
      {
        "depth": 3,
        "value": "选题",
        "slug": "选题"
      },
      {
        "depth": 4,
        "value": "医学指标",
        "slug": "医学指标"
      },
      {
        "depth": 4,
        "value": "环境暴露",
        "slug": "环境暴露"
      },
      {
        "depth": 4,
        "value": "PGS (多基因评分)",
        "slug": "pgs-(多基因评分)"
      },
      {
        "depth": 4,
        "value": "社科变量",
        "slug": "社科变量"
      },
      {
        "depth": 4,
        "value": "多库联合",
        "slug": "多库联合"
      },
      {
        "depth": 4,
        "value": "共病研究",
        "slug": "共病研究"
      },
      {
        "depth": 4,
        "value": "对已发布的论文进行优化",
        "slug": "对已发布的论文进行优化"
      },
      {
        "depth": 2,
        "value": "数据处理与分析",
        "slug": "数据处理与分析"
      },
      {
        "depth": 3,
        "value": "描述性统计",
        "slug": "描述性统计"
      },
      {
        "depth": 2,
        "value": "论文分析",
        "slug": "论文分析"
      },
      {
        "depth": 3,
        "value": "Changes in frailty and incident cardiovascular disease in three prospective cohorts",
        "slug": "changes-in-frailty-and-incident-cardiovascular-disease-in-three-prospective-cohorts"
      },
      {
        "depth": 4,
        "value": "Abstract",
        "slug": "abstract"
      },
      {
        "depth": 5,
        "value": "Background and Aims 背景和目的",
        "slug": "background-and-aims-背景和目的"
      },
      {
        "depth": 5,
        "value": "Methods",
        "slug": "methods"
      },
      {
        "depth": 5,
        "value": "Results",
        "slug": "results"
      },
      {
        "depth": 5,
        "value": "Conclusion",
        "slug": "conclusion"
      },
      {
        "depth": 4,
        "value": "Introduction",
        "slug": "introduction"
      },
      {
        "depth": 4,
        "value": "Methods",
        "slug": "methods"
      },
      {
        "depth": 5,
        "value": "Study design and population",
        "slug": "study-design-and-population"
      },
      {
        "depth": 5,
        "value": "Assessment of frailty",
        "slug": "assessment-of-frailty"
      },
      {
        "depth": 5,
        "value": "Covariates  协变量",
        "slug": "covariates-协变量"
      },
      {
        "depth": 5,
        "value": "Outcome ascertainment and follow-up 结果确认和随访",
        "slug": "outcome-ascertainment-and-follow-up-结果确认和随访"
      },
      {
        "depth": 5,
        "value": "Statistical analyses",
        "slug": "statistical-analyses"
      },
      {
        "depth": 3,
        "value": "Association between triglyceride glucose-waist height ratio index and cardiovascular disease in middle-aged and older Chinese individuals: a nationwide cohort study",
        "slug": "association-between-triglyceride-glucose-waist-height-ratio-index-and-cardiovascular-disease-in-middle-aged-and-older-chinese-individuals:-a-nationwide-cohort-study"
      },
      {
        "depth": 4,
        "value": "Abstract 摘要",
        "slug": "abstract-摘要"
      },
      {
        "depth": 5,
        "value": "Background",
        "slug": "background"
      },
      {
        "depth": 5,
        "value": "Methods",
        "slug": "methods"
      },
      {
        "depth": 5,
        "value": "Results",
        "slug": "results"
      },
      {
        "depth": 5,
        "value": "Conclusion",
        "slug": "conclusion"
      },
      {
        "depth": 4,
        "value": "Introduction  引言",
        "slug": "introduction-引言"
      },
      {
        "depth": 4,
        "value": "Methods",
        "slug": "methods"
      },
      {
        "depth": 5,
        "value": "Study design and population 研究设计和人群",
        "slug": "study-design-and-population-研究设计和人群"
      },
      {
        "depth": 5,
        "value": "Assessment of the change in TyG-WHtR TyG-WHtR 变化评估",
        "slug": "assessment-of-the-change-in-tyg-whtr-tyg-whtr-变化评估"
      },
      {
        "depth": 5,
        "value": "Assessment of CVD  心血管疾病评估",
        "slug": "assessment-of-cvd-心血管疾病评估"
      },
      {
        "depth": 5,
        "value": "Covariates  协变量",
        "slug": "covariates-协变量"
      },
      {
        "depth": 5,
        "value": "Statistical analyses  统计分析",
        "slug": "statistical-analyses-统计分析"
      },
      {
        "depth": 4,
        "value": "Results",
        "slug": "results"
      },
      {
        "depth": 5,
        "value": "Baseline characteristics of participants 参与者基线特征",
        "slug": "baseline-characteristics-of-participants-参与者基线特征"
      },
      {
        "depth": 5,
        "value": "Odds ratios for incident CVD 发生心血管疾病的风险比",
        "slug": "odds-ratios-for-incident-cvd-发生心血管疾病的风险比"
      },
      {
        "depth": 5,
        "value": "Subgroup analyses and sensitivity analyses 亚组分析和敏感性分析",
        "slug": "subgroup-analyses-and-sensitivity-analyses-亚组分析和敏感性分析"
      },
      {
        "depth": 4,
        "value": "Discussion",
        "slug": "discussion"
      },
      {
        "depth": 4,
        "value": "Conclusion",
        "slug": "conclusion"
      },
      {
        "depth": 4,
        "value": "References",
        "slug": "references"
      }
    ]
  },
  {
    "title": "graph",
    "description": "图 (Graph) 是一种数据结构, 由节点 (Vertex) 和边 (Edge) 组成, 用于表示对象之间的关系",
    "url": "/blog/2024/03/13/graph.mdx",
    "slug": "2024/03/13/graph.mdx",
    "segments": [
      "2024",
      "03",
      "13",
      "graph.mdx"
    ],
    "filePath": "2024/03/13/graph.mdx",
    "meta": {
      "title": "graph",
      "description": "图 (Graph) 是一种数据结构, 由节点 (Vertex) 和边 (Edge) 组成, 用于表示对象之间的关系",
      "created_at": "2024-03-13T16:39:24.000Z",
      "updated_at": "2025-04-04T16:39:24.000Z",
      "tags": [
        "alg",
        "graph"
      ]
    },
    "content": "\n## 建图\n\n给定 `n` 个节点, `m` 条边, 用 $g(u,v)$ 表示 $u$, $v$ 的信息, 如 连通性, 边权\n```\n5 6\n0 1 2\n1 2 5\n0 3 3\n1 3 4\n3 4 7\n3 2 10\n```\n```mermaid\ngraph TD\n    0((0)) o--o|2| 1((1))\n    1 o--o|5| 2((2))\n    0 o--o|3| 3((3))\n    1 o--o|4| 3\n    3 o--o|7| 4((4))\n    3 o--o|10| 2\n```\n\n### 邻接矩阵\n\n- `g[i][j]` 表示 `i` 到 `j` 的信息\n- `g[i][i] = 0`, 表示到自己的距离为 0\n- 初始值为 `inf`, 表示不可达, 即距离为无穷大\n- 对于无向图, `g[u][v] = g[v][u]`\n\n```py\nfrom math import inf\nn, m = map(int, input().split())\ng = [[inf] * n for _ in range(n)]\nfor _ in range(m):\n    u, v, w = map(int, input().split())\n    g[u][v] = g[v][u] = w\n    g[u][u] = g[v][v] = 0 # 一般的题目中 不写这行 也是可以做对的\n```\n```py\ng = [\n  [0, 2, inf, 3, inf],\n  [2, 0, 5, 4, inf],\n  [inf, 5, 0, inf, inf],\n  [3, 4, inf, 0, 7],\n  [inf, inf, inf, 7, 0]\n]\n```\n\n对于稀疏图: 边数 `<<` 节点数, 邻接矩阵会浪费很多空间, 这时可以使用邻接表\n\n### 邻接表\n```py\nn ,m = map(int, input().split())\ne = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v, w = map(int, input().split())\n    e[u].append((v, w))\n    e[v].append((u, w))\n```\n```math\ne[u][j] = (v, w_{u,v})\n```\n```py\ne = [\n  [(1, 2), (3, 3)],\n  [(0, 2), (2, 5), (3, 4)],\n  [(1, 5)],\n  [(0, 3), (1, 4), (4, 7), (2, 10)],\n  [(3, 7)]\n]\n```\n- 对于稀疏图, 可以节省空间, 另外 可以直接获取邻居数量\n- 注意: 空间复杂度依旧是 $O(n^2)$, 只是常数小了很多\n\n## 遍历\n\n### dfs序\n\n```py\ns = set() # 已经访问的节点\ndef dfs(u):\n    if u in s:\n        return\n    # 操作开始 ---\n    # 操作\n    # 操作结束 ---\n    s.add(u)\n    for v, w in e[u]:\n        dfs(v)\n```\n\n#### leetCode 1971 寻找图中是否存在路径\nhttps://leetcode.cn/problems/find-if-path-exists-in-graph/\n\n有一个具有 `n` 个顶点的 双向 图，其中每个顶点标记从 `0` 到 `n - 1` (包含 `0` 和 `n - 1`) 。图中的边用一个二维整数数组 `edges` 表示，其中 `edges[i] = [u_i, v_i]{:ts}`表示顶点 `u_i` 和顶点 `v_i` 之间的双向边。 每个顶点对由 最多一条 边连接，并且没有顶点存在与自身相连的边。\n\n请你确定是否存在从顶点 `source` 开始，到顶点 `destination` 结束的 有效路径 。\n\n给你数组 `edges` 和整数 `n`、`source` 和 `destination`,如果从 `source` 到 `destination` 存在 有效路径 ，则返回 `true{:ts}`, 否则返回 `false{:ts}` 。\n\n**示例1:**\n```mermaid\ngraph TD\n    0((0)) --- 1((1))\n    0 --- 2((2))\n    1 --- 2\n```\n\n> **输入：**n=3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2<br/>\n> **输出：**true<br/>\n> **解释：**存在路径 0 -> 2<br/>\n> **示例2:**\n\n```mermaid\ngraph TD\n    0((0)) --- 1((1))\n    0 --- 2((2))\n    3((3)) --- 4((4))\n    3 --- 5((5))\n    4 --- 5\n```\n\n> **输入：** n=6, edges = [[0,1],[0,2],[3,4],[5,4],[5,3]], source = 0, destination = 5<br/>\n> **输出：** false<br/>\n> **解释：** 不存在路径 0 -> 5\n\n**提示:**\n- `1 <= n <= 2 * 10^4`\n- `0 <= edges.length <= 2 * 10^4`\n- `edges[i].length == 2`\n- `0 <= u_i, v_i <= n - 1`\n- `u_i != v_i`\n- `0 <= source, destination <= n - 1`\n- 不存在重复边\n- 不存在指向自身的边\n\n```py\ndef validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n    e = [[] for _ in range(n)]\n    for u, v in edges:\n        e[u].append(v)\n        e[v].append(u)\n\n    s = set()\n    def dfs(u):\n        if u in s:\n            return False\n        if u == destination:\n            return True\n        s.add(u)\n        for v in e[u]:\n            if dfs(v):\n                return True\n        return False\n\n    return dfs(source)\n```\n",
    "toc": [
      {
        "depth": 2,
        "value": "建图",
        "slug": "建图"
      },
      {
        "depth": 3,
        "value": "邻接矩阵",
        "slug": "邻接矩阵"
      },
      {
        "depth": 3,
        "value": "邻接表",
        "slug": "邻接表"
      },
      {
        "depth": 2,
        "value": "遍历",
        "slug": "遍历"
      },
      {
        "depth": 3,
        "value": "dfs序",
        "slug": "dfs序"
      },
      {
        "depth": 4,
        "value": "leetCode 1971 寻找图中是否存在路径",
        "slug": "leetcode-1971-寻找图中是否存在路径"
      }
    ]
  },
  {
    "title": "Latex",
    "description": "LaTeX 是一种基于排版的文档准备系统，广泛用于学术论文、书籍和演示文稿的编写。它以其强大的数学公式支持和高质量的排版效果而闻名。",
    "url": "/blog/2024/05/19/latex.mdx",
    "slug": "2024/05/19/latex.mdx",
    "segments": [
      "2024",
      "05",
      "19",
      "latex.mdx"
    ],
    "filePath": "2024/05/19/latex.mdx",
    "meta": {
      "title": "Latex",
      "description": "LaTeX 是一种基于排版的文档准备系统，广泛用于学术论文、书籍和演示文稿的编写。它以其强大的数学公式支持和高质量的排版效果而闻名。",
      "created_at": "2024-05-19T19:35:46.000Z",
      "updated_at": "2025-03-28T19:35:46.000Z",
      "tags": [
        "docs",
        "math",
        "latex"
      ]
    },
    "content": "\n## 基本结构\n\n一个简单的 LaTeX 文档通常包含以下结构：\n\n```latex\n\\documentclass{article} % 文档类型\n\\usepackage{amsmath}    % 数学公式支持\n\\begin{document}\n\n\\section{引言}\n这是一个简单的 LaTeX 示例。\n\n\\subsection{数学公式}\n以下是一个数学公式示例：\n\\[\nE = mc^2\n\\]\n\n\\end{document}\n```\n\n## 数学公式\n\nLaTeX 对数学公式的支持非常强大。以下是一些常见的公式示例：\n\n行内公式：\n```latex\n这是一个行内公式 $a^2 + b^2 = c^2$。\n```\n\n块级公式：\n```latex\n\\[\n\\int_a^b f(x) \\, dx = F(b) - F(a)\n\\]\n```\n\n### 希腊字母\n```latex\n\\alpha, \\beta, \\gamma, \\delta, \\epsilon, \\pi, \\sigma\n```\n```math\n\\begin{align}\n&\\alpha \\quad A \\quad  \\text{希腊字母 alpha} \\quad   \\\\\n&\\beta \\quad B  \\text{希腊字母 beta} \\\\\n&\\gamma \\quad \\Gamma \\quad  \\text{希腊字母 gamma} \\\\\n&\\delta \\quad \\Delta \\quad  \\text{希腊字母 delta} \\\\\n&\\epsilon \\quad E  \\text{希腊字母 epsilon} \\\\\n&\\zeta \\quad Z \\quad  \\text{希腊字母 zeta} \\\\\n&\\eta \\quad H \\quad  \\text{希腊字母 eta} \\\\\n&\\theta \\quad \\Theta \\quad  \\text{希腊字母 theta} \\\\\n&\\iota \\quad I \\quad  \\text{希腊字母 iota} \\\\\n&\\kappa \\quad K \\quad  \\text{希腊字母 kappa} \\\\\n&\\lambda \\quad \\Lambda \\quad  \\text{希腊字母 lambda} \\\\\n&\\mu \\quad M \\quad  \\text{希腊字母 mu} \\\\\n&\\nu \\quad N \\quad  \\text{希腊字母 nu} \\\\\n&\\xi \\quad \\Xi \\quad  \\text{希腊字母 xi} \\\\\n&\\omicron \\quad O \\quad  \\text{希腊字母 omicron} \\\\\n&\\pi \\quad \\Pi \\quad  \\text{希腊字母 pi} \\\\\n&\\rho \\quad P  \\quad \\text{希腊字母 rho} \\\\\n&\\sigma \\quad \\Sigma \\quad  \\text{希腊字母 sigma}\\\\\n&\\tau \\quad T \\quad  \\text{希腊字母 tau} \\\\\n&\\upsilon \\quad \\Upsilon \\quad  \\text{希腊字母 upsilon} \\\\\n&\\phi \\quad \\Phi \\quad  \\text{希腊字母 phi} \\\\\n&\\chi \\quad X \\quad  \\text{希腊字母 chi} \\\\\n&\\psi \\quad \\Psi \\quad  \\text{希腊字母 psi} \\\\\n&\\omega \\quad \\Omega  \\quad  \\text{希腊字母 omega} \\\\\n&\\varepsilon \\ :varepsilon,\\ \\vartheta\\ :vartheta,\\ \\varpi\\ :varpi,\\ \\varrho\\ :varrho,\\ \\varsigma\\ :varsigma, \\varphi\\ :varphi \\\\\n\\end{align}\n```\n\n## 表格\n\n使用 `tabular` 环境可以创建表格：\n\n```latex\n\\begin{tabular}{|c|c|c|}\n\\hline\n列1 & 列2 & 列3 \\\\\n\\hline\n数据1 & 数据2 & 数据3 \\\\\n\\hline\n\\end{tabular}\n```\n\n## 插入图片\n\n使用 `graphicx` 包可以插入图片：\n\n```latex\n\\usepackage{graphicx}\n\n\\begin{figure}[h]\n\\centering\n\\includegraphics[width=0.5\\textwidth]{example.png}\n\\caption{示例图片}\n\\end{figure}\n```",
    "toc": [
      {
        "depth": 2,
        "value": "基本结构",
        "slug": "基本结构"
      },
      {
        "depth": 2,
        "value": "数学公式",
        "slug": "数学公式"
      },
      {
        "depth": 3,
        "value": "希腊字母",
        "slug": "希腊字母"
      },
      {
        "depth": 2,
        "value": "表格",
        "slug": "表格"
      },
      {
        "depth": 2,
        "value": "插入图片",
        "slug": "插入图片"
      }
    ]
  },
  {
    "title": "Java",
    "description": "东西都被删除了吗 runtime function 重...",
    "url": "/blog/2024/10/12/java.mdx",
    "slug": "2024/10/12/java.mdx",
    "segments": [
      "2024",
      "10",
      "12",
      "java.mdx"
    ],
    "filePath": "2024/10/12/java.mdx",
    "meta": {
      "title": "Java",
      "description": "东西都被删除了吗 runtime function 重...",
      "created_at": "2024-10-12T15:55:11.000Z",
      "updated_at": "2025-03-30T15:55:11.000Z",
      "tags": [
        "java"
      ]
    },
    "content": "\n东西都被删除了吗\n\n## runtime\n\n## function\n\n### 重写 (Override)\n\n### 重载 (Overload)\n\n",
    "toc": [
      {
        "depth": 2,
        "value": "runtime",
        "slug": "runtime"
      },
      {
        "depth": 2,
        "value": "function",
        "slug": "function"
      },
      {
        "depth": 3,
        "value": "重写 (Override)",
        "slug": "重写-(override)"
      },
      {
        "depth": 3,
        "value": "重载 (Overload)",
        "slug": "重载-(overload)"
      }
    ]
  },
  {
    "title": "spring",
    "description": "Spring 是一个开源的 Java 企业级应用程序框架, 提供了全面的基础设施支持. springBoot 是 spring 的一个子项目, 旨在简化 Spring 应用程序的开发和配置",
    "url": "/blog/2024/10/13/spring.mdx",
    "slug": "2024/10/13/spring.mdx",
    "segments": [
      "2024",
      "10",
      "13",
      "spring.mdx"
    ],
    "filePath": "2024/10/13/spring.mdx",
    "meta": {
      "title": "spring",
      "description": "Spring 是一个开源的 Java 企业级应用程序框架, 提供了全面的基础设施支持. springBoot 是 spring 的一个子项目, 旨在简化 Spring 应用程序的开发和配置",
      "created_at": "2025-04-05T23:20:49.000Z",
      "updated_at": "2025-04-05T23:20:49.000Z",
      "tags": [
        "java",
        "spring"
      ]
    },
    "content": "\n使用 Java 的 Spring Boot 编写 API Server 是一个非常流行且高效的选择。以下是一些建议和步骤，帮助你快速构建一个高质量的 API Server：\n\n---\n\n### 1. **项目初始化**\n使用 [Spring Initializr](https://start.spring.io/) 快速生成项目骨架：\n- 选择 **Project**: Maven 或 Gradle\n- 选择 **Language**: Java\n- 选择 **Spring Boot Version**: 最新稳定版\n- 添加依赖：\n  - **Spring Web**（用于构建 REST API）\n  - **Spring Data JPA**（用于数据库交互）\n  - **Spring Boot DevTools**（用于开发时热部署）\n  - **H2 Database**（内存数据库，适合开发和测试）\n  - **Spring Security**（如果需要身份验证）\n\n下载生成的项目并导入到 IDE（如 IntelliJ IDEA 或 VS Code）。\n\n---\n\n### 2. **项目结构建议**\n- Spring Boot 项目通常是 \"layered architecture\"（分层架构），按职责划分为控制器层、服务层、数据访问层等\n- Spring Boot 的包结构是完全由开发者决定的，可以根据项目需求自由组织代码\n  - 如果需要类似 Django 的 \"app\" 概念，你可以通过创建子模块（Maven 或 Gradle 子项目）来实现\n\n以下是一个典型的 Spring Boot 项目结构：\n```\nsrc/main/java/com/example/demo/\n├── controller/    // 控制器层，处理 HTTP 请求\n├── service/       // 服务层，处理业务逻辑\n├── repository/    // 数据访问层，操作数据库\n├── model/         // 实体类，定义数据库表结构\n└── DemoApplication.java // 主应用程序入口\n```\n\n---\n\n### 3. **创建 REST API 示例**\n以下是一个简单的用户管理 API 示例：\n\n#### 3.1 定义实体类\n```java\npackage com.example.demo.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String email;\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n#### 3.2 创建 Repository\n```java\npackage com.example.demo.repository;\n\nimport com.example.demo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n}\n```\n\n#### 3.3 创建 Service\n```java\npackage com.example.demo.service;\n\nimport com.example.demo.model.User;\nimport com.example.demo.repository.UserRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class UserService {\n    private final UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public User createUser(User user) {\n        return userRepository.save(user);\n    }\n}\n```\n\n#### 3.4 创建 Controller\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.User;\nimport com.example.demo.service.UserService;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GetMapping\n    public List<User> getAllUsers() {\n        return userService.getAllUsers();\n    }\n\n    @PostMapping\n    public User createUser(@RequestBody User user) {\n        return userService.createUser(user);\n    }\n}\n```\n\n---\n\n### 4. **配置数据库**\n在 `application.properties` 或 `application.yml` 中配置数据库连接：\n\n```properties\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\nspring.jpa.hibernate.ddl-auto=update\n```\n\n---\n\n### 5. **运行项目**\n在项目的主类（`DemoApplication.java`）中运行 Spring Boot 应用程序：\n\n```java\npackage com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n启动后，访问以下 API：\n- `GET http://localhost:8080/api/users` 获取所有用户\n- `POST http://localhost:8080/api/users` 创建新用户（请求体为 JSON）\n\n---\n\n### 6. **测试**\n使用 Postman 或 curl 测试 API。例如：\n```bash\ncurl -X POST http://localhost:8080/api/users \\\n-H \"Content-Type: application/json\" \\\n-d '{\"name\": \"Alice\", \"email\": \"alice@example.com\"}'\n```\n\n---\n\n### 7. **扩展功能**\n- **身份验证**: 使用 Spring Security 和 JWT。\n- **API 文档**: 集成 Swagger（Springdoc OpenAPI）。\n- **单元测试**: 使用 JUnit 和 Mockito 测试服务和控制器。\n\n按照以上步骤，你可以快速构建一个功能完善的 Spring Boot API Server。\n",
    "toc": [
      {
        "depth": 3,
        "value": "1. 项目初始化",
        "slug": "1.-项目初始化"
      },
      {
        "depth": 3,
        "value": "2. 项目结构建议",
        "slug": "2.-项目结构建议"
      },
      {
        "depth": 3,
        "value": "3. 创建 REST API 示例",
        "slug": "3.-创建-rest-api-示例"
      },
      {
        "depth": 4,
        "value": "3.1 定义实体类",
        "slug": "3.1-定义实体类"
      },
      {
        "depth": 4,
        "value": "3.2 创建 Repository",
        "slug": "3.2-创建-repository"
      },
      {
        "depth": 4,
        "value": "3.3 创建 Service",
        "slug": "3.3-创建-service"
      },
      {
        "depth": 4,
        "value": "3.4 创建 Controller",
        "slug": "3.4-创建-controller"
      },
      {
        "depth": 3,
        "value": "4. 配置数据库",
        "slug": "4.-配置数据库"
      },
      {
        "depth": 3,
        "value": "5. 运行项目",
        "slug": "5.-运行项目"
      },
      {
        "depth": 3,
        "value": "6. 测试",
        "slug": "6.-测试"
      },
      {
        "depth": 3,
        "value": "7. 扩展功能",
        "slug": "7.-扩展功能"
      }
    ]
  },
  {
    "title": "equation",
    "description": "一元二次方程 对于一元二次方程 有如下通用形式(组合式...",
    "url": "/blog/2016/10/11/equation.mdx",
    "slug": "2016/10/11/equation.mdx",
    "segments": [
      "2016",
      "10",
      "11",
      "equation.mdx"
    ],
    "filePath": "2016/10/11/equation.mdx",
    "meta": {
      "title": "equation",
      "description": "一元二次方程 对于一元二次方程 有如下通用形式(组合式...",
      "created_at": "2016-10-11T18:14:10.000Z",
      "updated_at": "2025-04-06T18:14:10.000Z",
      "tags": [
        "math",
        "equation"
      ]
    },
    "content": "\n## 一元二次方程\n对于一元二次方程 有如下通用形式(组合式):\n```math\n\\begin{align*}\nax^2 + bx + c &= 0  \\tag{1} \\\\\n\\end{align*}\n```\n也有如下乘积形式: \n```math\n\\begin{align*}\na(x - x_1)(x - x_2) &= 0 \\tag{2} \\\\\n\\end{align*}\n```\n对 (2) 进行展开, 可以得到:\n```math\n\\begin{align*}\nax^2 - a(x_1 + x_2)x + ax_1x_2 &= 0 \\\\\n\\end{align*}\n```\n对 (1) 和 (2) 进行比较, 可以得到:\n```math\n\\begin{align*}\nx_1 + x_2 &= -\\frac{b}{a} \\tag{3} \\\\\nx_1x_2 &= \\frac{c}{a} \\tag{4} \\\\\n\\end{align*}\n```\n(3) 和 (4) 有许多用途, 例如: 用于求解一元二次方程的解集\n```math\n\\begin{align*}\n(x_1 + x_2)^2 &= x_1^2 + 2x_1x_2 + x_2^2 \\\\\n(x_1 - x_2)^2 &= x_1^2 - 2x_1x_2 + x_2^2 \\\\\n&=(x_1 + x_2)^2 - 4x_1x_2 \\\\\n&= \\left(-\\frac{b}{a}\\right)^2 - 4\\frac{c}{a}\n\\end{align*}\n```\n开平方得:\n```math\n\\begin{align*}\nx_1 - x_2 &= \\pm \\sqrt{\\left(-\\frac{b}{a}\\right)^2 - 4\\frac{c}{a}} \\\\\n&=  \\pm\\frac{\\sqrt{b^2 - 4ac}}{a} \\\\\n\\end{align*}\n```\n带入 (3) 可以得到:\n```math\n\\begin{align*}\nx_{1,2} &= [(x_1 + x_2) \\pm (x_1 - x_2)]/2 \\\\\n    &= \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}  \\tag{5} \\\\\n\\end{align*}\n```\n(5) 称为求根公式, 用于求解一元二次方程的解集",
    "toc": [
      {
        "depth": 2,
        "value": "一元二次方程",
        "slug": "一元二次方程"
      }
    ]
  },
  {
    "title": "websocket",
    "description": "v",
    "url": "/blog/2025/02/01/ws.mdx",
    "slug": "2025/02/01/ws.mdx",
    "segments": [
      "2025",
      "02",
      "01",
      "ws.mdx"
    ],
    "filePath": "2025/02/01/ws.mdx",
    "meta": {
      "title": "websocket",
      "description": "v",
      "created_at": "2025-02-01T17:34:03.000Z",
      "updated_at": "2025-04-02T17:34:03.000Z",
      "tags": [
        "web",
        "ws"
      ]
    },
    "content": "",
    "toc": []
  },
  {
    "title": "discord",
    "description": "...",
    "url": "/blog/2025/01/02/discord.mdx",
    "slug": "2025/01/02/discord.mdx",
    "segments": [
      "2025",
      "01",
      "02",
      "discord.mdx"
    ],
    "filePath": "2025/01/02/discord.mdx",
    "meta": {
      "title": "discord",
      "description": "...",
      "created_at": "2025-04-15T11:40:09.000Z",
      "updated_at": "2025-04-15T11:40:09.000Z",
      "tags": []
    },
    "content": "\n```sh\nyay -Syu discord\n# 检查是否有可用的 0.0.89 版本\nyay -Ss discord\n```\n",
    "toc": []
  },
  {
    "title": "alg",
    "description": "算法竞赛学习路线 算法竞赛是一个需要扎实的数学基础和编...",
    "url": "/blog/2025/03/25/alg.mdx",
    "slug": "2025/03/25/alg.mdx",
    "segments": [
      "2025",
      "03",
      "25",
      "alg.mdx"
    ],
    "filePath": "2025/03/25/alg.mdx",
    "meta": {
      "title": "alg",
      "description": "算法竞赛学习路线 算法竞赛是一个需要扎实的数学基础和编...",
      "created_at": "2025-03-28T19:55:10.000Z",
      "updated_at": "2025-03-28T19:55:10.000Z",
      "tags": [
        "alg"
      ]
    },
    "content": "\n## 算法竞赛学习路线\n算法竞赛是一个需要扎实的数学基础和编程能力的领域。以下是一个系统的学习路线，帮助你在算法竞赛中取得更好的成绩。\n\n### 基础数据结构\n   - **数组与字符串**：基本操作、滑动窗口、双指针。\n   - **栈与队列**：单调栈、单调队列、优先队列。\n   - **链表**：单链表、双向链表、环形链表。\n   - **哈希表**：哈希映射、哈希集合。\n   - **树与图**：二叉树、二叉搜索树、并查集（如你当前的文档）、图的表示方法（邻接表、邻接矩阵）。\n\n### 算法基础\n   - **排序与搜索**：快速排序、归并排序、二分查找。\n   - **递归与分治**：递归思想、分治法的应用。\n   - **动态规划 (DP)**：背包问题、区间 DP、状态压缩 DP。\n   - **贪心算法**：常见贪心策略及其应用。\n   - **图论算法**：\n     - 最短路径：Dijkstra、Floyd-Warshall、Bellman-Ford。\n     - 最小生成树：Prim、Kruskal。\n     - 拓扑排序、强连通分量 (Tarjan 算法)。\n   - **数学相关算法**：\n     - 数论：快速幂、欧几里得算法、线性筛、模运算。\n     - 组合数学：排列组合、容斥原理、生成函数。\n     - 博弈论：Nim 博弈、SG 函数。\n\n### 高级数据结构\n   - **线段树**：区间查询与修改。\n   - **树状数组**：高效处理前缀和问题。\n   - **字典树 (Trie)**：字符串处理。\n   - **堆**：优先队列的实现。\n   - **并查集**：路径压缩与按秩合并（如你当前文档提到的内容）。\n   - **平衡树**：如 AVL 树、红黑树、Treap。\n\n### 算法竞赛技巧\n   - **代码能力**：熟练掌握 C++ 或 Python 等语言，尤其是 STL（C++）或内置函数（Python）。\n   - **模板积累**：常用算法和数据结构的代码模板。\n   - **题型分类**：熟悉常见题型，如模拟、搜索、动态规划、数学题。\n   - **时间与空间优化**：掌握复杂度分析，避免超时或超内存。\n\n### 学习资源\n   - **书籍**：\n     - 《算法竞赛入门经典》（刘汝佳，《算法竞赛入门经典（第2版）》）。\n     - 《算法导论》（Introduction to Algorithms）。\n     - 《挑战程序设计竞赛》（日文版/中文版）。\n   - **在线平台**：\n     - [LeetCode](https://leetcode.com/)：刷题平台，适合练习算法和数据结构。\n     - [Codeforces](https://codeforces.com/)：算法竞赛平台，适合参加比赛。\n     - [AtCoder](https://atcoder.jp/)：日本的算法竞赛平台。\n     - [洛谷](https://www.luogu.com.cn/)：中文算法竞赛平台。\n   - **视频课程**：\n     - B 站上的算法竞赛课程（如《算法竞赛基础》系列）。\n\n### 训练计划\n   - **初期**：每天刷 2-3 道简单题，熟悉基础数据结构和算法。\n   - **中期**：每天刷 1-2 道中等题，尝试解决动态规划和图论问题。\n   - **后期**：参加虚拟比赛，模拟真实竞赛环境，提升解题速度和准确率。\n\n### 数学与算法结合\n   - 你的数学背景可以帮助你在以下领域更快上手：\n     - 数学建模：动态规划、图论问题。\n     - 数论：快速幂、模运算、线性代数在图论中的应用。\n     - 组合数学：排列组合、概率问题。\n\n通过系统学习和不断练习，你可以快速提升算法竞赛能力！",
    "toc": [
      {
        "depth": 2,
        "value": "算法竞赛学习路线",
        "slug": "算法竞赛学习路线"
      },
      {
        "depth": 3,
        "value": "基础数据结构",
        "slug": "基础数据结构"
      },
      {
        "depth": 3,
        "value": "算法基础",
        "slug": "算法基础"
      },
      {
        "depth": 3,
        "value": "高级数据结构",
        "slug": "高级数据结构"
      },
      {
        "depth": 3,
        "value": "算法竞赛技巧",
        "slug": "算法竞赛技巧"
      },
      {
        "depth": 3,
        "value": "学习资源",
        "slug": "学习资源"
      },
      {
        "depth": 3,
        "value": "训练计划",
        "slug": "训练计划"
      },
      {
        "depth": 3,
        "value": "数学与算法结合",
        "slug": "数学与算法结合"
      }
    ]
  },
  {
    "title": "bisect",
    "description": "二分查找是一种高效的查找算法，适用于有序数组或列表。它的核心思想是通过比较中间元素和目标值的大小，缩小查找范围，直到找到目标值或范围为空。",
    "url": "/blog/2025/03/25/bisect.mdx",
    "slug": "2025/03/25/bisect.mdx",
    "segments": [
      "2025",
      "03",
      "25",
      "bisect.mdx"
    ],
    "filePath": "2025/03/25/bisect.mdx",
    "meta": {
      "title": "bisect",
      "description": "二分查找是一种高效的查找算法，适用于有序数组或列表。它的核心思想是通过比较中间元素和目标值的大小，缩小查找范围，直到找到目标值或范围为空。",
      "created_at": "2025-03-25T04:40:00.000Z",
      "updated_at": "2025-04-10T17:37:05.000Z",
      "tags": [
        "alg",
        "bisect"
      ]
    },
    "content": "\n- **目标**: 掌握二分查找的思想和变种\n- **学习内容**:\n  1. 标准二分查找\n  2. 二分查找的变种（如查找左边界、右边界）, 二分查找变形问题\n  3. 二分查找的应用: 有序数组查找, 最优解的范围搜索, 查找边界, 旋转数组查找\n- **推荐题目**:\n  - [LeetCode 34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n  - [LeetCode 35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/description/)\n  - [LeetCode 704. 二分查找](https://leetcode-cn.com/problems/binary-search/description/)\n  - [LeetCode 69. x 的平方根](https://leetcode-cn.com/problems/sqrtx/description/) (二分查找)\n  - [LeetCode 153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/) (二分查找)\n  - [LeetCode 33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/) (二分查找)\n  - [LeetCode 4. 寻找两个正序数组的中位数](https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/) (二分查找)\n\n## python 自带的二分查找库\n```py\ndef bisect( \n    a, # 给定一个升序数组\n    x, # 目标值\n    lo:int=0,\n    hi:int | None = None\n  ): # 返回第一个大于目标值的索引 在 a[lo:hi] 里\n  ...\n# 时间复杂度: O(logn)\nfrom bisect import bisect\n\na = [1,9,9,9,200,500]\nprint(bisect(a, 3)) # 1，a[1] = 9\nprint(bisect(a, 9)) # 4，a[4] = 200\nprint(bisect(a, -1)) # 0，a[0] = 1\nprint(bisect(a, 1000)) # 6，a[6]: error\n\na.reverse() # [500, 200, 9, 9, 9, 1]\n# 找到第一个小于 x 的索引\na_rev_ = [-i for i in a] # [-500, -200, -9, -9, -9, -1]\nprint(bisect(a_rev_, -3)) # 5，a_[5] = -1\nprint(bisect(a_rev_, -9)) # 5，a_[5] = -1\nprint(bisect(a_rev_, -1)) # 6，a_[6]: err\nprint(bisect(a_rev_, -1000)) # 0，a_[0] = -500\n```\n\n## 例题\n\n[洛谷 P2249 【深基13.例1】查找](https://www.luogu.com.cn/problem/P2249)\n\n### 题目描述\n\n输入 $n$ 个不超过 $10^9$ 的单调不减的（就是后面的数字不小于前面的数字）非负整数 $a_1,a_2,\\dots,a_{n}$，然后进行 $m$ 次询问。对于每次询问，给出一个整数 $q$，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 $-1$ 。\n\n### 输入格式\n\n第一行 $2$ 个整数 $n$ 和 $m$，表示数字个数和询问次数。\n\n第二行 $n$ 个整数，表示这些待查询的数字。\n\n第三行 $m$ 个整数，表示询问这些数字的编号，从 $1$ 开始编号。\n\n### 输出格式\n\n输出一行，$m$ 个整数，以空格隔开，表示答案。\n\n### 输入输出样例\n\n#### 输入\n\n```\n11 3\n1 3 3 3 5 7 9 11 13 15 15\n1 3 6\n```\n\n#### 输出\n\n```\n1 2 -1\n```\n\n### 说明/提示\n\n数据保证，$1 \\leq n \\leq 10^6$，$0 \\leq a_i,q \\leq 10^9$，$1 \\leq m \\leq 10^5$\n\n本题输入输出量较大，请使用较快的 IO 方式。\n\n### 题解\n\n#### 获得输入\n```py\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nn, m = map(int, input().split())\na_ls = list(map(int, input().split()))\nq_ls = list(map(int, input().split()))\n```\n\n#### 方法一: 二分查找\n```py\nfrom bisect import bisect\nfrom typing import List\ndef m1(n:int, m:int, a_ls:List[int], q_ls:List[int]) -> List[int]:\n  s = set(a_ls)\n  res = []\n  for q in q_ls:\n    if q in s:\n      res.append(bisect(a_ls, q-1)+1)# + 1是因为题目的输出是从1开始编号\n    else:\n      res.append(-1)\n  return res\nprint(*m1(n, m, a_ls, q_ls))\n```\n\n## 实战题:2563\n\n[LeetCode 2563. 统计公平对数目](https://leetcode-cn.com/problems/count-the-number-of-fair-pairs/description/)\n\n给你一个下标从 0 开始、长度为 `n` 的整数数组 `nums` 和两个整数 `lower` 和 `upper`, 返回**公平数对的数目**。\n如果 `(i, j)` 满足以下情况, 则认为它是一个**公平数对**:\n- `0 <= i < j < n`且\n- `lower <= nums[i] + nums[j] <= upper`\n**示例 1:**\n> 输入: nums = [0,1,7,4,4,5], lower = 3, upper = 6\n> 输出: 6\n> 解释: 共计 6 个公平数对: (0,3), (0,4), (0,5), (1,3), (1,4), (1,5)。\n**示例 2:**\n> 输入: nums = [1,7,9,2,5], lower = 11, upper = 11\n> 输出: 1\n> 解释: 共计 1 个公平数对: (2,3)。\n**提示:**\n- `1 <= nums.length <= 10^5`\n- `nums.length == n`\n- `-10^9 <= nums[i] <= 10^9`\n- `-10^9 <= lower <= upper <= 10^9`\n\n### 方法一: 枚举\n```py\ndef countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n  res = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if lower <= nums[i] + nums[j] <= upper:\n        res += 1\n  return res\n```\n### 方法二: 二分查找\n- 注意到排序不影响结果(总数)\n- 对 `lower <= nums[i] + nums[j] <= upper` 进行变形，得到 `lower - nums[i] <= nums[j] <= upper - nums[i]`，\n- 即对于每个 `i`，找到 `nums[j]` 在 `[lower - nums[i], upper - nums[i]]` 之间的个数。\n- `j` 的范围是 `[i+1, n)`，所以可以对 `nums` 进行排序，然后对于每个 `i`, 在 `j`的范围中，找到 `lower - nums[i]` 和 `upper - nums[i]` 的位置，然后计算这两个位置之间的个数。\n```py\nfrom bisect import bisect\n\ndef countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n  res = 0\n  nums.sort()\n  for i in range(len(nums)):\n    L = bisect(nums, lower - nums[i]-1, i+1)\n    R = bisect(nums, upper - nums[i], i+1)-1\n    res += R - L + 1 # 索引做差+1 得到之间的个数, 对于前后都是闭区间\n  return res\n```\n\n## 自己实现二分查找\npython3.12 给 `bisect` 增加了 参数 `key: func`, 但是 python3.8 只有4个参数: `a, x, lo=0, hi=None`,\n\n因此需要学会自己实现二分查找, 以应对更多的情况\n\n**实现思路:**\n1. 对于区间 `[lo, hi)`, 划分为 `[lo, mid)` 和 `[mid, hi)`, `mid = (lo + hi) >> 1{:py}`\n2. `if x < a[mid]: hi = mid{:py}`, `else: lo = mid+1{:py}`\n3. 重复步骤1,2 直到 `lo == hi`\n\n```py\ndef bisect(a, x, lo=0, hi=None, key=lambda f: f):\n  if hi is None: hi = len(a)\n  while lo < hi:\n    mid = (lo + hi) >> 1\n    if x < key(a[mid]): hi = mid # 补上未来版本的 key\n    else: lo = mid + 1\n  return lo\n```\n\n## leetCode 2226\n\n[LeetCode 2226. 每个小孩最多能分到多少糖果](https://leetcode-cn.com/problems/maximum-candies-allocated-to-k-children/description/)\n\n给你一个 **下标从 0 开始** 的整数数组 `candies` 。数组中的每个元素表示大小为 `candies[i]` 的一堆糖果。你可以将每堆糖果分成任意数量的 **子堆** ，但 **无法** 再将两堆合并到一起。\n\n另给你一个整数 k 。你需要将这些糖果分配给 k 个小孩，使每个小孩分到 **相同** 数量的糖果。每个小孩可以拿走 **至多一堆** 糖果，有些糖果可能会不被分配。\n\n返回每个小孩可以拿走的 **最大糖果数目** 。\n\n**示例 1:**\n> 输入: `candies = [5,8,6], k = 3`\n> 输出: `5`\n> 解释: 可以将 `candies[1]` 分成大小分别为 5 和 3 的两堆，然后把 `candies[2]` 分成大小分别为 5 和 1 的两堆。现在就有五堆大小分别为 5、5、3、5 和 1 的糖果。可以把 3 堆大小为 5 的糖果分给 3 个小孩。可以证明无法让每个小孩得到超过 5 颗糖果。\n**示例 2:**\n> 输入: `candies = [2,5], k = 11`\n> 输出: `0`\n> 解释: 总共有 11 个小孩，但只有 7 颗糖果，但如果要分配糖果的话，必须保证每个小孩至少能得到 1 颗糖果。因此，最后每个小孩都没有得到糖果，答案是 0 。\n**示例 3:**\n- `1 <= candies.length <= 10^5`\n- `1 <= candies[i] <= 10^7`\n- `1 <= k <= 10^12`\n\n题解:\n```py\n# 可知问题解一定在 [0, max(candies)] 之间\n# 答案就是寻找有多个 能被 res 整除的数 在[0, max(candies)] 之间\n# def bisect(x,lo=0,hi=None,key=lambda f: f):\n# #   if hi is None: hi = len(a)\n#   while lo < hi:\n#     mid = (lo + hi) >> 1\n#     if x > key(mid): hi = mid\n#     else: lo = mid + 1\n#   return lo\n\nclass Solution:\n    def maximumCandies(self, candies: List[int], k: int) -> int:\n        tot = sum(candies)\n        r = tot//k\n        if r==1: return 1\n        elif tot<k: return 0\n        lo = 1\n        hi = 10**12+10\n        key = lambda x: sum([i//x for i in candies])\n        while lo < hi:\n            mid = (lo + hi) >> 1\n            if k > key(mid): hi = mid\n            else: lo = mid + 1\n        return lo - 1\n        # res = bisect(k, lo=1, hi=max(candies)+1, key=)\n        # return res -1\n```\n\n## lanqiao 3.冶炼金属\n\nhttps://www.lanqiao.cn/problems/3510/learning/?page=1&first_category_id=1&second_category_id=3&tags=%E4%BA%8C%E5%88%86,%E7%9C%81%E8%B5%9B&tag_relation=intersection&difficulty=20\n\n小蓝有一个神奇的炉子用于将普通金属 O 冶炼成为一种特殊金属 X。这个炉子有一个称作转换率的属性 V，V 是一个正整数，这意味着消耗 V 个普通金属 O 恰好可以冶炼出一个特殊金属 X，当普通金属 O 的数目不足 V 时，无法继续冶炼。\n\n现在给出了 N 条冶炼记录，每条记录中包含两个整数 A 和 B，这表示本次投入了 A 个普通金属 O，最终冶炼出了 B 个特殊金属 X。每条记录都是独立的，这意味着上一次没消耗完的普通金属 O 不会累加到下一次的冶炼当中。\n\n根据这 N 条冶炼记录，请你推测出转换率 V 的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。\n\n## 基础\n\n### 排序数组中查找元素的first和last位置\n\n[LeetCode 34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/)\n\n给你一个按照非递减顺序排列的整数数组 `nums`, 和一个目标值 `target`. 请你找出给定目标值在数组中的开始位置和结束位置。\n\n如果数组中不存在目标值 `target`, 返回 `[-1, -1]`\n\n你必须设计并实现时间复杂度为 `O(log n)` 的算法解决此问题。\n\n**示例 1:**\n> 输入: `nums = [5,7,7,8,8,10], target = 8` <br/>\n> 输出: `[3,4]`\n\n**示例 2:**\n> 输入: `nums = [5,7,7,8,8,10], target = 6` <br/>\n> 输出: `[-1,-1]`\n\n**示例 3:**\n> 输入: `nums = [], target = 0` <br/>\n> 输出: `[-1,-1]`\n\n**提示:**\n- `0 <= nums.length <= 10^5`\n- `-10^9 <= nums[i] <= 10^9`\n- `nums` 是一个非递减数组\n- `-10^9 <= target <= 10^9`\n\n```py\ndef bisect(a, x, lo=0, hi=None):\n    if hi is None: hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) >> 1\n        if x < a[mid]: hi = mid\n        else: lo = mid + 1\n    return lo\ndef searchRange(self, nums: List[int], target: int) -> List[int]:\n    if not nums: return [-1, -1]\n    l = bisect(nums, target-1)\n    r = bisect(nums, target)\n    if l == r: return [-1, -1]\n    return [l, r-1]\n```\n### 搜索插入位置\n\n[LeetCode 35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/description/)\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n请必须使用时间复杂度为 `O(log n)` 的算法。\n\n**示例 1:**\n> 输入: `nums = [1,3,5,6], target = 5` <br/>\n> 输出: `2`\n\n**示例 2:**\n> 输入: `nums = [1,3,5,6], target = 2` <br/>\n> 输出: `1`\n\n**示例 3:**\n> 输入: `nums = [1,3,5,6], target = 7` <br/>\n> 输出: `4`\n\n**提示:**\n- `1 <= nums.length <= 10^4`\n- `-10^4 <= nums[i] <= 10^4`\n- `nums` 为 **无重复元素** 的 **升序** 排列数组\n- `-10^4 <= target <= 10^4`\n\n```py\nfrom bisect import bisect\ndef searchInsert(self, nums: List[int], target: int) -> int:\n    right = bisect(nums, target)\n    if target == nums[right-1]:\n        return right - 1\n    else:\n        return right\n```\n\n### 二分查找\n[LeetCode 704. 二分查找](https://leetcode-cn.com/problems/binary-search/description/)\n\n给定一个 `n` 个元素有序的（升序）整型数组 `nums` 和一个目标值 `target`  ，写一个函数搜索 `nums` 中的 `target`, 如果目标值存在返回下标，否则返回 `-1`\n\n**示例 1:**\n> 输入: `nums = [-1,0,3,5,9,12], target = 9` <br/>\n> 输出: `4`\n> 解释: 9 出现在 nums 中并且下标为 4\n\n**示例 2:**\n> 输入: `nums = [-1,0,3,5,9,12], target = 2` <br/>\n> 输出: `-1`\n> 解释: 2 不存在 nums 中因此返回 -1\n\n**提示:**\n1. 你可以假设 `nums` 中的所有元素是不重复的\n2. `n` 将在 `[1, 10000]` 之间\n3. `nums` 的每个元素都将在 `[-9999, 9999]`之间\n",
    "toc": [
      {
        "depth": 2,
        "value": "python 自带的二分查找库",
        "slug": "python-自带的二分查找库"
      },
      {
        "depth": 2,
        "value": "例题",
        "slug": "例题"
      },
      {
        "depth": 3,
        "value": "题目描述",
        "slug": "题目描述"
      },
      {
        "depth": 3,
        "value": "输入格式",
        "slug": "输入格式"
      },
      {
        "depth": 3,
        "value": "输出格式",
        "slug": "输出格式"
      },
      {
        "depth": 3,
        "value": "输入输出样例",
        "slug": "输入输出样例"
      },
      {
        "depth": 4,
        "value": "输入",
        "slug": "输入"
      },
      {
        "depth": 4,
        "value": "输出",
        "slug": "输出"
      },
      {
        "depth": 3,
        "value": "说明/提示",
        "slug": "说明/提示"
      },
      {
        "depth": 3,
        "value": "题解",
        "slug": "题解"
      },
      {
        "depth": 4,
        "value": "获得输入",
        "slug": "获得输入"
      },
      {
        "depth": 4,
        "value": "方法一: 二分查找",
        "slug": "方法一:-二分查找"
      },
      {
        "depth": 2,
        "value": "实战题:2563",
        "slug": "实战题:2563"
      },
      {
        "depth": 3,
        "value": "方法一: 枚举",
        "slug": "方法一:-枚举"
      },
      {
        "depth": 3,
        "value": "方法二: 二分查找",
        "slug": "方法二:-二分查找"
      },
      {
        "depth": 2,
        "value": "自己实现二分查找",
        "slug": "自己实现二分查找"
      },
      {
        "depth": 2,
        "value": "leetCode 2226",
        "slug": "leetcode-2226"
      },
      {
        "depth": 2,
        "value": "lanqiao 3.冶炼金属",
        "slug": "lanqiao-3.冶炼金属"
      },
      {
        "depth": 2,
        "value": "基础",
        "slug": "基础"
      },
      {
        "depth": 3,
        "value": "排序数组中查找元素的first和last位置",
        "slug": "排序数组中查找元素的first和last位置"
      },
      {
        "depth": 3,
        "value": "搜索插入位置",
        "slug": "搜索插入位置"
      },
      {
        "depth": 3,
        "value": "二分查找",
        "slug": "二分查找"
      }
    ]
  },
  {
    "title": "bfs",
    "description": "通常是指 广度优先搜索 (Breadth-First Search)，一种经典的图算法，用于遍历或搜索树或图的数据结构",
    "url": "/blog/2025/03/26/bfs.mdx",
    "slug": "2025/03/26/bfs.mdx",
    "segments": [
      "2025",
      "03",
      "26",
      "bfs.mdx"
    ],
    "filePath": "2025/03/26/bfs.mdx",
    "meta": {
      "title": "bfs",
      "description": "通常是指 广度优先搜索 (Breadth-First Search)，一种经典的图算法，用于遍历或搜索树或图的数据结构",
      "created_at": "2025-03-26T22:29:10.000Z",
      "updated_at": "2025-03-27T20:40:13.000Z",
      "tags": [
        "alg",
        "bfs"
      ]
    },
    "content": "\n## BFS 思想\n\nBFS 通常是指 广度优先搜索 (Breadth-First Search)，一种经典的图算法，用于遍历或搜索树或图的数据结构。\n\nBFS 的核心是逐层扩展，使用队列存储待访问的节点\n1. 遍历所有相邻节点（如岛屿问题）。\n2. 模拟扩散过程。\n3. 求最短路径。\n\n## leetCode 695. 岛屿的最大面积\n\n[695. 岛屿的最大面积](https://leetcode-cn.com/problems/max-area-of-island/)\n\n给你一个大小为 `m x n` 的二进制矩阵 `grid` 。\n\n岛屿 是由一些相邻的 `1` (代表土地) 构成的组合，这里的「相邻」要求两个 `1` 必须在 水平或者竖直的四个方向上 相邻。你可以假设 `grid` 的四个边缘都被 `0` （代表水）包围着。\n\n岛屿的面积是岛上值为 `1` 的单元格的数目。\n\n计算并返回 `grid` 中最大的岛屿面积。如果没有岛屿，则返回面积为 `0` \n\n**示例 1:**\n![1](https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg)\n> **输入:** \n> ```py\n> grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],\n>         [0,0,0,0,0,0,0,1,1,1,0,0,0],\n>         [0,1,1,0,1,0,0,0,0,0,0,0,0],\n>         [0,1,0,0,1,1,0,0,1,0,1,0,0],\n>         [0,1,0,0,1,1,0,0,1,1,1,0,0],\n>         [0,0,0,0,0,0,0,0,0,0,1,0,0],\n>         [0,0,0,0,0,0,0,1,1,1,0,0,0],\n>         [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n> ```\n> **输出:** 6 <br/>\n> **解释:** 答案不应该是 `11` ，因为岛屿只能包含水平或垂直这四个方向上的 `1` 。\n\n**示例 2:**\n> **输入:** `grid = [[0,0,0,0,0,0,0,0]]{:py}` <br/>\n> **输出:** 0\n\n**提示:**\n- `m == grid.length`\n- `n == grid[i].length`\n- `1 <= m, n <= 50`\n- `grid[i][j]` 为 `0` 或 `1`\n\n```py showLineNumbers\ndef maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    # 维护一个结果变量\n    res = 0\n    # 定义一个方向数组\n    d1 = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    # 遍历每个点\n    for i in range(m):\n        for j in range(n):\n        # 如果当前点是陆地\n        if grid[i][j] == 1:\n            # 将当前点加入队列\n            q = [(i, j)]\n            # 维护当前岛屿的面积\n            area = 1\n            # 将当前点置为 0\n            grid[i][j] = 0\n            # 遍历队列\n            while q:\n                # 取出队列的第一个元素\n                x, y = q.pop(0)\n                # 遍历四个方向\n                for dx, dy in d1:\n                    # 计算新的坐标\n                    nx, ny = x + dx, y + dy\n                    # 如果新的坐标合法\n                    if 0 <= nx < m and 0 <= ny < n and grid[nx][ny]:\n                    # 将新的坐标加入队列\n                    q.append((nx, ny))\n                    # 将新的坐标置为 0\n                    grid[nx][ny] = 0\n                    # 面积加一\n                    area += 1\n            # 更新结果\n            res = max(res, area)\n    return res\n```\n\n## lanqiao 长草\n\nhttps://www.lanqiao.cn/problems/149/learning/?page=1&first_category_id=1&tags=BFS&tag_relation=intersection&difficulty=20\n\n**题目描述**\n\n小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。\n\n小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。\n\n这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，\n\n这四小块空地都将变为有草的小块。请告诉小明, k 个月后空地上哪些地方有草。\n**输入描述**\n\n输入的第一行包含两个整数 n,m。\n\n接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g, 表示种了草。\n\n接下来包含一个整数 k。 其中, 2≤n,m≤1000, 1≤k≤1000\n**输出描述**\n\n输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g, 表示长了草。\n**输入输出样例**\n**示例**\n\n>输入\n```\n4 5\n.g...\n.....\n..g..\n.....\n2\n```\n>输出\n```\ngggg.\ngggg.\nggggg\n.ggg.\n```\n**运行限制**\n\n- 最大运行时间: 1s\n- 最大运行内存: 256M\n\n```py showLineNumbers\nimport sys\nfrom collections import deque\ninput = lambda: sys.stdin.readline().strip()\ndef grass_growth(n, m, grid, k):\n    # 定义方向数组（上下左右）\n    d1 = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # 初始化队列，找到所有初始种草的格子\n    q = deque()\n    for y in range(n):\n        for x in range(m):\n            if grid[y][x] == 1:\n                print(\"aq\")\n                q.append((y, x))\n    \n    # 模拟 k 个月的扩展\n    for _ in range(k):\n        print('k')\n        for _ in range(len(q)):\n            print('q', len(q))\n            y, x = q.popleft()\n            for dy, dx in d1:\n                ny, nx = y + dy, x + dx\n                # 检查边界条件和是否为空地\n                if 0 <= ny < n and 0 <= nx < m and grid[ny][nx] == 0:\n                    grid[ny][nx] = 1  # 将空地变为草\n                    q.append((ny, nx))\n    \n    # 返回最终的状态\n    return grid\n\nn, m = map(int, input().split())\ngrid = [[0]*m for _ in range(n)]\nprint(grid)\nfor y in range(n):\n    r = input()\n    print(r)\n    for x in range(m):\n        if r[x] == 'g':\n            print('rx==g')\n            grid[y][x] = 1\nprint(grid)\nk = int(input())\nres = grass_growth(n, m, grid, k)\nfor row in res:\n    print(''.join(['g' if x == 1 else '.' for x in row]))\n```\n",
    "toc": [
      {
        "depth": 2,
        "value": "BFS 思想",
        "slug": "bfs-思想"
      },
      {
        "depth": 2,
        "value": "leetCode 695. 岛屿的最大面积",
        "slug": "leetcode-695.-岛屿的最大面积"
      },
      {
        "depth": 2,
        "value": "lanqiao 长草",
        "slug": "lanqiao-长草"
      }
    ]
  },
  {
    "title": "export",
    "description": "当想要将next.js项目导出为静态网站时, 可以使用next export命令。",
    "url": "/blog/2025/03/26/export.mdx",
    "slug": "2025/03/26/export.mdx",
    "segments": [
      "2025",
      "03",
      "26",
      "export.mdx"
    ],
    "filePath": "2025/03/26/export.mdx",
    "meta": {
      "title": "export",
      "description": "当想要将next.js项目导出为静态网站时, 可以使用next export命令。",
      "created_at": "2025-03-26T03:42:29.000Z",
      "updated_at": "2025-03-26T03:42:29.000Z",
      "tags": [
        "nextjs",
        "export",
        "html"
      ]
    },
    "content": "\n## Unsupported feature\n> 不支持的功能\n\nhttps://nextjs.org/docs/app/building-your-application/deploying/static-exports#unsupported-features\n\nFeatures that require a Node.js server, or dynamic logic that cannot be computed during the build process, are **not** supported:\n> 需要Node.js服务器的功能, 或者在构建过程中无法计算的动态逻辑，**不**支持：\n- Dynamic Routes with `dynamicParams: true`\n- Dynamic Routes without `generateStaticParams()`\n- ...\n\n## 注意\n\n可能不会识别 next.config.ts 导致变成默认配置, 尽量写 next.config.js 或者 next.config.mjs",
    "toc": [
      {
        "depth": 2,
        "value": "Unsupported feature",
        "slug": "unsupported-feature"
      },
      {
        "depth": 2,
        "value": "注意",
        "slug": "注意"
      }
    ]
  },
  {
    "title": "Next PWA",
    "description": "渐进式 Web 应用（PWA）结合了 Web 应用的覆盖范围和可访问性，以及原生移动应用的功能和用户体验。使用 Next.js，您可以创建提供无缝、类似应用体验的 PWA，无需多个代码库或应用商店审批",
    "url": "/blog/2025/03/26/nextPwa.mdx",
    "slug": "2025/03/26/nextPwa.mdx",
    "segments": [
      "2025",
      "03",
      "26",
      "nextPwa.mdx"
    ],
    "filePath": "2025/03/26/nextPwa.mdx",
    "meta": {
      "title": "Next PWA",
      "description": "渐进式 Web 应用（PWA）结合了 Web 应用的覆盖范围和可访问性，以及原生移动应用的功能和用户体验。使用 Next.js，您可以创建提供无缝、类似应用体验的 PWA，无需多个代码库或应用商店审批",
      "created_at": "2025-03-29T05:13:17.000Z",
      "updated_at": "2025-03-29T05:13:17.000Z",
      "tags": [
        "nextjs",
        "pwa"
      ]
    },
    "content": "偶然发现 nextjs15 版本中内置了对 PWA 的支持, https://nextjs.org/docs/app/building-your-application/configuring/progressive-web-apps\n",
    "toc": []
  },
  {
    "title": "api",
    "description": "fastApi vs hono",
    "url": "/blog/2025/03/27/api.mdx",
    "slug": "2025/03/27/api.mdx",
    "segments": [
      "2025",
      "03",
      "27",
      "api.mdx"
    ],
    "filePath": "2025/03/27/api.mdx",
    "meta": {
      "title": "api",
      "description": "fastApi vs hono",
      "created_at": "2025-03-27T23:15:42.000Z",
      "updated_at": "2025-03-27T23:15:42.000Z",
      "tags": [
        "web",
        "api"
      ]
    },
    "content": "",
    "toc": []
  },
  {
    "title": "dfs",
    "description": "最大数字 lanqiao 2193 https://w...",
    "url": "/blog/2025/03/27/dfs.mdx",
    "slug": "2025/03/27/dfs.mdx",
    "segments": [
      "2025",
      "03",
      "27",
      "dfs.mdx"
    ],
    "filePath": "2025/03/27/dfs.mdx",
    "meta": {
      "title": "dfs",
      "description": "最大数字 lanqiao 2193 https://w...",
      "created_at": "2025-03-27T20:41:55.000Z",
      "updated_at": "2025-03-27T20:41:55.000Z",
      "tags": [
        "alg",
        "dfs"
      ]
    },
    "content": "\n## 最大数字 lanqiao 2193\nhttps://www.lanqiao.cn/problems/2193/learning/?page=1&first_category_id=1&name=%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97\n\n**问题描述**\n\n给定一个正整数 N 。你可以对 N 的任意一位数字执行任意次以下 2 种操 作：\n\n1. 将该位数字加 1 。如果该位数字已经是 9 , 加 1 之后变成 0 。\n\n2. 将该位数字减 1 。如果该位数字已经是 0 , 减 1 之后变成 9 。\n\n你现在总共可以执行 1 号操作不超过 A 次, 2 号操作不超过 B 次。 请问你最大可以将 N 变成多少?\n**输入格式**\n\n第一行包含 3 个整数: N,A,B\n**输出格式**\n\n一个整数代表答案。\n**样例输入**\n```\n123 1 2\n```\n**样例输出**\n```\n933\n```\n**样例说明**\n\n对百位数字执行 2 次 2 号操作, 对十位数字执行 1 次 1 号操作。\n**评测用例规模与约定**\n\n对于 30%30% 的数据, 1≤N≤100; 0≤A,B≤10\n\n对于 100%100% 的数据, 1≤N≤10^17;0≤A,B≤100\n**运行限制**\n\n- 最大运行时间: 1s\n- 最大运行内存: 512M\n\n**思路**: \n1. 贪心: 从左到右, 近可能构造9\n\n```py\nN, A, B = map(int, input().split())\nsN = str(N)\nlenN = len(sN)\nres = 0\n# 当前的贪心策略虽然高效, 但在某些情况下可能无法找到全局最优解\nfor i in range(len(sN)):\n    base = 10 ** (lenN - i - 1)\n    x = int(sN[i])\n    if x != 9:\n        need_add = 9 - x\n        need_sub = x+1\n        if need_add<= A  and (need_add <= need_sub or B < need_sub):\n            A -= need_add\n            res += 9 * base\n        elif need_sub <= B:\n            B -= need_sub\n            res += 9 * base\n        elif 0 < A:\n            res += (x + A) * base\n            A = 0\n        else:\n          res += x * base\n    else:\n        res += x * base\nprint(res)\n```\n\n```py\ndef dfs(i, curr, a, b):\n    global res\n    if  i == lenN:\n        res = max(res, curr)\n        return\n    x = int(sN[i])\n    d = min(9-x, a)\n    dfs(i+1, curr*10+(x+d), a-d, b)\n    if x+1<=b:\n        dfs(i+1, curr*10+9, a, b-(x+1))\ndfs(0, 0, A, B)\n```\n\n## 小朋友崇拜圈 lanqiao 182\n\nhttps://www.lanqiao.cn/problems/182/learning/?page=1&first_category_id=1&name=%E5%B0%8F%E6%9C%8B%E5%8F%8B%E5%B4%87%E6%8B%9C%E5%9C%88\n\n**题目描述**\n\n班里 N 个小朋友，每个人都有自己最崇拜的一个小朋友（也可以是自己）。\n\n在一个游戏中，需要小朋友坐一个圈，每个小朋友都有自己最崇拜的小朋友在他的右手边。\n\n求满足条件的圈最大多少人？\n\n小朋友编号为 1,2,3,⋯N\n**输入描述**\n\n输入第一行，一个整数 `N (3<N<10^5)`\n\n接下来一行 N 个整数，由空格分开。\n**输出描述**\n\n要求输出一个整数，表示满足条件的最大圈的人数。\n**输入输出样例**\n\n示例\n\n>输入\n```\n9\n3 4 2 5 3 8 4 6 9\n```\n\n>输出\n\n```\n4\n```\n\n>样例解释\n\n如下图所示，崇拜关系用箭头表示，红色表示不在圈中。\n\n显然，最大圈是[2 4 5 3] 构成的圈。\n```mermaid\ngraph LR\n    1((1))-->3\n    2((2))-->4\n    3((3))-->2\n    4((4))-->5\n    5((5))-->3\n    6((6))-->8\n    7((7))-->4\n    8((8))-->6\n    9((9))-->9\n```\n运行限制\n\n- 最大运行时间: 1s\n- 最大运行内存: 256M\n\n**分析**\n- 每个节点 `u` 有且仅有一条出边 `u->v`, 给定数组 `g`, `g[u]==v` 表示这条出边\n\n```py showLineNumbers\nimport sys\nsys.setrecursionlimit(10**5)\nn = int(input())\ng = [0]+ list(map(int, input().split()))\nres = 0 \ndct = {}\ndef dfs(u, idx):\n    global res\n    if u in dct:\n        res = max(res, idx - dct[u])\n        return\n    dct[u] = idx\n    dfs(g[u], idx+1)\nfor u in range(1, n+1):\n    dfs(u, 0)\nprint(res)\n```\n",
    "toc": [
      {
        "depth": 2,
        "value": "最大数字 lanqiao 2193",
        "slug": "最大数字-lanqiao-2193"
      },
      {
        "depth": 2,
        "value": "小朋友崇拜圈 lanqiao 182",
        "slug": "小朋友崇拜圈-lanqiao-182"
      }
    ]
  },
  {
    "title": "Union-Find",
    "description": "并查集 (Disjoint Set Union, 简称 DSU 或 Union-Find) 并查集通常实现为一个森林，其中每棵树表示一个集合 是一种用于处理动态连通性问题的数据结构。",
    "url": "/blog/2025/03/28/Union-Find.mdx",
    "slug": "2025/03/28/Union-Find.mdx",
    "segments": [
      "2025",
      "03",
      "28",
      "Union-Find.mdx"
    ],
    "filePath": "2025/03/28/Union-Find.mdx",
    "meta": {
      "title": "Union-Find",
      "description": "并查集 (Disjoint Set Union, 简称 DSU 或 Union-Find) 并查集通常实现为一个森林，其中每棵树表示一个集合 是一种用于处理动态连通性问题的数据结构。",
      "created_at": "2025-03-28T19:28:35.000Z",
      "updated_at": "2025-03-30T02:10:58.000Z",
      "tags": [
        "alg",
        "tree"
      ]
    },
    "content": "```mermaid\ngraph BT\n    2((2)) --\"fa[2]\"-->  1((1))\n    3((3)) --\"fa[3]\"-->  1\n    4((4)) --\"fa[4]\"-->  3\n    5((5)) --\"fa[5]\"-->  3\n    8((8)) -->  7((7))\n    7 -->  6((6))\n```\n## overview\n\n它可以高效地解决以下问题: \n1. 合并 (Union) ：将两个集合合并为一个集合 (合并对应的树)。\n2. 查询 (Find) ：查询某个元素属于哪个集合 (通常通过找到集合的代表元素, 即根节点)。 \n\n并查集的核心思想是用一个数组表示集合，通过路径压缩和按秩合并优化，使得查询和合并操作的时间复杂度接近常数 (摊还时间复杂度为 $O(\\alpha(n))$，其中 $\\alpha(n)$ 是反阿克曼函数，增长极慢) \n\n### find\n\n```math\n\\begin{align}\n& find(x) = x 所在集合的根节点的值 \\\\\n& if\\quad fa[x] = x : 表示 x 是根节点 \\\\\n& else : find(fa[x]) 递归调用, 沿着树向上找\n\\end{align}\n```\n通常在判断是否可达, 连通性问题时 进行查询, 如需要判断 u, v 是否属于同一个集合, 则可以判断 find(u) == find(v)\n```py\n# 例如 fa[4] = 3 -> fa[3] = 1 -> fa[1] = 1\ndef find(x):\n    if fa[x] == x:\n        return x\n    return find(fa[x])\n```\n```py\n# or 如下写法\ndef find(x):\n    return x if fa[x] == x else find(fa[x])\n\nfind = lambda x: x if fa[x] == x else find(fa[x])\n```\n\n### union\n有时需要将两个集合合并(例如两个家庭结婚), 例如将 u, v 合并为同一个集合, 则可以将 u 的根节点的父节点设为 v 的根节点\n```mermaid\ngraph BT\n    1 --> 6\n    2((2)) -->  1((1))\n    3((3)) -->  1\n    4((4)) -->  3\n    5((5)) -->  3\n    8((8)) -->  7((7))\n    7 -->  6((6))\n```\n```py\ndef union(x, y):\n    x = find(x)\n    y = find(y)\n    if x != y:\n        fa[x] = y\n# or\ndef union(x, y):\n    if find(x) != find(y): fa[find(x)] = find(y)\n```\n> [!info]- python 的 `=` 操作是 **引用模型** (Reference Model)\n> `a = b{:py}` 是将 a 指向 b\n>```py\n> # 赋值语法: 变量 = 字面量; 实际上是\n> b = [1, 2, 3]\n> # 引用语法: 变量 = 变量\n> a = b\n> a[0] = 4\n> print(b) # [4, 2, 3]\n> ```\n\n### 路径压缩\n```mermaid\nflowchart LR\n    subgraph 第一阶段\n        2((2)) -->  1((1))\n        3((3)) -->  1\n        4((4)) -->  3\n        5((5)) -->  3\n    end\n\n    subgraph 第二阶段\n        2.2((2)) -->  2.1((1))\n        2.3((3)) -->  2.1\n        2.4((4)) -->  2.1\n        2.5((5)) -->  2.1\n    end\n\n    第一阶段 --路径压缩--> 第二阶段\n```\n路径压缩是指在查找过程中, 将访问过的节点的父节点直接指向根节点, 以减少树的高度, 提高查询效率\n```py {4}\ndef find(x):\n    if fa[x] == x: # 如果 x 是根节点\n        return x\n    fa[x] = find(fa[x]) # 路径压缩\n    return fa[x]\n```\n我们通过对查询操作引入路径压缩, 可以对比 [find](#find)\n\n### 模板总结\n\n```py title=\"递归模板\"\nfa = list(range(n)) # \ndef find(x):\n    if fa[x] == x: return x\n    fa[x] = find(fa[x]) # 路径压缩\n    return fa[x]\ndef union(x, y):\n    if find(x) != find(y):\n        fa[find(x)] = find(y)\n```\n可以不用考虑迭代模板, 一般不会爆栈的\n```py title=\"迭代模板\"\nfa = list(range(n)) #\ndef find(x):\n    root = x\n    while fa[root] != root:\n        root = fa[root]\n    while fa[x] != x: # 路径压缩\n        fa[x], x = root, fa[x]\n    return root\ndef union(x, y):\n    root_x = find(x)\n    root_y = find(y)\n    if root_x != root_y:\n        fa[root_x] = root_y\n```",
    "toc": [
      {
        "depth": 2,
        "value": "overview",
        "slug": "overview"
      },
      {
        "depth": 3,
        "value": "find",
        "slug": "find"
      },
      {
        "depth": 3,
        "value": "union",
        "slug": "union"
      },
      {
        "depth": 3,
        "value": "路径压缩",
        "slug": "路径压缩"
      },
      {
        "depth": 3,
        "value": "模板总结",
        "slug": "模板总结"
      }
    ]
  },
  {
    "title": "todo",
    "description": "paper | 时间 | 任务 | | ------ ...",
    "url": "/blog/2025/03/30/todo.mdx",
    "slug": "2025/03/30/todo.mdx",
    "segments": [
      "2025",
      "03",
      "30",
      "todo.mdx"
    ],
    "filePath": "2025/03/30/todo.mdx",
    "meta": {
      "title": "todo",
      "description": "paper | 时间 | 任务 | | ------ ...",
      "created_at": "2025-03-30T20:54:11.000Z",
      "updated_at": "2025-03-31T20:54:11.000Z",
      "tags": [
        "todo"
      ]
    },
    "content": "\r\n## paper\r\n\r\n| 时间 | 任务 |\r\n| ------ | ---- |\r\n| 03/31 | 大量阅读 CHARLS 相关论文的摘要, 并下载 |\r\n| 04/01 | 描述性统计 |\r\n| 04/02 | 阅读一篇 |\r\n| 04/03 | 阅读两篇 |\r\n| 04/04 | 阅读两篇 |\r\n| 04/05 | 阅读两篇 |\r\n| 04/06 | 回归 |\r\n",
    "toc": [
      {
        "depth": 2,
        "value": "paper",
        "slug": "paper"
      }
    ]
  }
]